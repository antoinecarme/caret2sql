-- This SQL code was generated by sklearn2sql (development version).
-- Copyright 2018

-- Model : CaretClassifier_nnet
-- Dataset : BinaryClass_10
-- Database : teradata


-- This SQL code can contain one or more statements, to be executed in the order they appear in this file.



-- Model deployment code

WITH "IL" AS 
(SELECT "ADS"."KEY" AS "KEY", CAST("ADS"."Feature_0" AS DOUBLE PRECISION) AS "Feature_0", CAST("ADS"."Feature_1" AS DOUBLE PRECISION) AS "Feature_1", CAST("ADS"."Feature_2" AS DOUBLE PRECISION) AS "Feature_2", CAST("ADS"."Feature_3" AS DOUBLE PRECISION) AS "Feature_3", CAST("ADS"."Feature_4" AS DOUBLE PRECISION) AS "Feature_4", CAST("ADS"."Feature_5" AS DOUBLE PRECISION) AS "Feature_5", CAST("ADS"."Feature_6" AS DOUBLE PRECISION) AS "Feature_6", CAST("ADS"."Feature_7" AS DOUBLE PRECISION) AS "Feature_7", CAST("ADS"."Feature_8" AS DOUBLE PRECISION) AS "Feature_8", CAST("ADS"."Feature_9" AS DOUBLE PRECISION) AS "Feature_9" 
FROM "BinaryClass_10" AS "ADS"), 
"HL_BA_1" AS 
(SELECT "IL"."KEY" AS "KEY", CAST(-0.9958993 AS DOUBLE PRECISION) * "IL"."Feature_0" + CAST(1.03536 AS DOUBLE PRECISION) * "IL"."Feature_1" + CAST(1.182567 AS DOUBLE PRECISION) * "IL"."Feature_2" + CAST(1.16566 AS DOUBLE PRECISION) * "IL"."Feature_3" + CAST(-0.1637856 AS DOUBLE PRECISION) * "IL"."Feature_4" + CAST(0.8053424 AS DOUBLE PRECISION) * "IL"."Feature_5" + CAST(-0.566758 AS DOUBLE PRECISION) * "IL"."Feature_6" + CAST(-0.3595837 AS DOUBLE PRECISION) * "IL"."Feature_7" + CAST(1.696663 AS DOUBLE PRECISION) * "IL"."Feature_8" + CAST(0.7808231 AS DOUBLE PRECISION) * "IL"."Feature_9" + CAST(-1.022626 AS DOUBLE PRECISION) AS "NEUR_1_1", CAST(-1.990649 AS DOUBLE PRECISION) * "IL"."Feature_0" + CAST(0.2147893 AS DOUBLE PRECISION) * "IL"."Feature_1" + CAST(-1.861611 AS DOUBLE PRECISION) * "IL"."Feature_2" + CAST(0.2210381 AS DOUBLE PRECISION) * "IL"."Feature_3" + CAST(0.06682182 AS DOUBLE PRECISION) * "IL"."Feature_4" + CAST(1.395122 AS DOUBLE PRECISION) * "IL"."Feature_5" + CAST(-2.495965 AS DOUBLE PRECISION) * "IL"."Feature_6" + CAST(-0.5595766 AS DOUBLE PRECISION) * "IL"."Feature_7" + CAST(0.8074377 AS DOUBLE PRECISION) * "IL"."Feature_8" + CAST(1.604173 AS DOUBLE PRECISION) * "IL"."Feature_9" + CAST(-2.365408 AS DOUBLE PRECISION) AS "NEUR_1_2", CAST(-2.980274 AS DOUBLE PRECISION) * "IL"."Feature_0" + CAST(-0.8065281 AS DOUBLE PRECISION) * "IL"."Feature_1" + CAST(0.07869041 AS DOUBLE PRECISION) * "IL"."Feature_2" + CAST(-0.1370727 AS DOUBLE PRECISION) * "IL"."Feature_3" + CAST(-0.2176051 AS DOUBLE PRECISION) * "IL"."Feature_4" + CAST(0.8647375 AS DOUBLE PRECISION) * "IL"."Feature_5" + CAST(1.145626 AS DOUBLE PRECISION) * "IL"."Feature_6" + CAST(-1.321456 AS DOUBLE PRECISION) * "IL"."Feature_7" + CAST(-0.4229365 AS DOUBLE PRECISION) * "IL"."Feature_8" + CAST(3.071673 AS DOUBLE PRECISION) * "IL"."Feature_9" + CAST(-0.8025901 AS DOUBLE PRECISION) AS "NEUR_1_3", CAST(0.9302776 AS DOUBLE PRECISION) * "IL"."Feature_0" + CAST(1.137138 AS DOUBLE PRECISION) * "IL"."Feature_1" + CAST(0.8367374 AS DOUBLE PRECISION) * "IL"."Feature_2" + CAST(2.662186 AS DOUBLE PRECISION) * "IL"."Feature_3" + CAST(2.098915 AS DOUBLE PRECISION) * "IL"."Feature_4" + CAST(-0.7220834 AS DOUBLE PRECISION) * "IL"."Feature_5" + CAST(-0.6721821 AS DOUBLE PRECISION) * "IL"."Feature_6" + CAST(0.2212104 AS DOUBLE PRECISION) * "IL"."Feature_7" + CAST(-2.703577 AS DOUBLE PRECISION) * "IL"."Feature_8" + CAST(-0.5484254 AS DOUBLE PRECISION) * "IL"."Feature_9" + CAST(0.6692279 AS DOUBLE PRECISION) AS "NEUR_1_4", CAST(-2.433322 AS DOUBLE PRECISION) * "IL"."Feature_0" + CAST(0.04567665 AS DOUBLE PRECISION) * "IL"."Feature_1" + CAST(0.03848845 AS DOUBLE PRECISION) * "IL"."Feature_2" + CAST(0.7000527 AS DOUBLE PRECISION) * "IL"."Feature_3" + CAST(-0.2064414 AS DOUBLE PRECISION) * "IL"."Feature_4" + CAST(-3.015271 AS DOUBLE PRECISION) * "IL"."Feature_5" + CAST(0.07610732 AS DOUBLE PRECISION) * "IL"."Feature_6" + CAST(-1.234476 AS DOUBLE PRECISION) * "IL"."Feature_7" + CAST(0.1365174 AS DOUBLE PRECISION) * "IL"."Feature_8" + CAST(3.002904 AS DOUBLE PRECISION) * "IL"."Feature_9" + CAST(-0.1913281 AS DOUBLE PRECISION) AS "NEUR_1_5", CAST(3.650677 AS DOUBLE PRECISION) * "IL"."Feature_0" + CAST(-1.111708 AS DOUBLE PRECISION) * "IL"."Feature_1" + CAST(1.137984 AS DOUBLE PRECISION) * "IL"."Feature_2" + CAST(-1.853856 AS DOUBLE PRECISION) * "IL"."Feature_3" + CAST(0.2694618 AS DOUBLE PRECISION) * "IL"."Feature_4" + CAST(2.906204 AS DOUBLE PRECISION) * "IL"."Feature_5" + CAST(0.898209 AS DOUBLE PRECISION) * "IL"."Feature_6" + CAST(1.692016 AS DOUBLE PRECISION) * "IL"."Feature_7" + CAST(0.6409014 AS DOUBLE PRECISION) * "IL"."Feature_8" + CAST(-4.364652 AS DOUBLE PRECISION) * "IL"."Feature_9" + CAST(-0.8150321 AS DOUBLE PRECISION) AS "NEUR_1_6", CAST(-2.025713 AS DOUBLE PRECISION) * "IL"."Feature_0" + CAST(-1.782193 AS DOUBLE PRECISION) * "IL"."Feature_1" + CAST(-0.2658696 AS DOUBLE PRECISION) * "IL"."Feature_2" + CAST(0.5425678 AS DOUBLE PRECISION) * "IL"."Feature_3" + CAST(1.180917 AS DOUBLE PRECISION) * "IL"."Feature_4" + CAST(0.6267196 AS DOUBLE PRECISION) * "IL"."Feature_5" + CAST(1.768728 AS DOUBLE PRECISION) * "IL"."Feature_6" + CAST(-0.9101696 AS DOUBLE PRECISION) * "IL"."Feature_7" + CAST(1.97686 AS DOUBLE PRECISION) * "IL"."Feature_8" + CAST(1.859628 AS DOUBLE PRECISION) * "IL"."Feature_9" + CAST(-0.09325062 AS DOUBLE PRECISION) AS "NEUR_1_7", CAST(-1.334946 AS DOUBLE PRECISION) * "IL"."Feature_0" + CAST(-0.4380549 AS DOUBLE PRECISION) * "IL"."Feature_1" + CAST(0.7926106 AS DOUBLE PRECISION) * "IL"."Feature_2" + CAST(2.496029 AS DOUBLE PRECISION) * "IL"."Feature_3" + CAST(-1.87493 AS DOUBLE PRECISION) * "IL"."Feature_4" + CAST(0.8796219 AS DOUBLE PRECISION) * "IL"."Feature_5" + CAST(0.7632725 AS DOUBLE PRECISION) * "IL"."Feature_6" + CAST(-0.3807036 AS DOUBLE PRECISION) * "IL"."Feature_7" + CAST(-1.130449 AS DOUBLE PRECISION) * "IL"."Feature_8" + CAST(1.155944 AS DOUBLE PRECISION) * "IL"."Feature_9" + CAST(2.183354 AS DOUBLE PRECISION) AS "NEUR_1_8", CAST(2.101779 AS DOUBLE PRECISION) * "IL"."Feature_0" + CAST(-1.818097 AS DOUBLE PRECISION) * "IL"."Feature_1" + CAST(2.290046 AS DOUBLE PRECISION) * "IL"."Feature_2" + CAST(-1.151845 AS DOUBLE PRECISION) * "IL"."Feature_3" + CAST(-1.120371 AS DOUBLE PRECISION) * "IL"."Feature_4" + CAST(3.099591 AS DOUBLE PRECISION) * "IL"."Feature_5" + CAST(0.1938207 AS DOUBLE PRECISION) * "IL"."Feature_6" + CAST(0.8405468 AS DOUBLE PRECISION) * "IL"."Feature_7" + CAST(1.116827 AS DOUBLE PRECISION) * "IL"."Feature_8" + CAST(-2.837309 AS DOUBLE PRECISION) * "IL"."Feature_9" + CAST(0.3433507 AS DOUBLE PRECISION) AS "NEUR_1_9", CAST(1.981789 AS DOUBLE PRECISION) * "IL"."Feature_0" + CAST(0.6856803 AS DOUBLE PRECISION) * "IL"."Feature_1" + CAST(0.9004662 AS DOUBLE PRECISION) * "IL"."Feature_2" + CAST(0.4565836 AS DOUBLE PRECISION) * "IL"."Feature_3" + CAST(1.883759 AS DOUBLE PRECISION) * "IL"."Feature_4" + CAST(0.2122842 AS DOUBLE PRECISION) * "IL"."Feature_5" + CAST(-1.507216 AS DOUBLE PRECISION) * "IL"."Feature_6" + CAST(0.6872855 AS DOUBLE PRECISION) * "IL"."Feature_7" + CAST(0.4353116 AS DOUBLE PRECISION) * "IL"."Feature_8" + CAST(-2.17956 AS DOUBLE PRECISION) * "IL"."Feature_9" + CAST(2.389866 AS DOUBLE PRECISION) AS "NEUR_1_10", CAST(-2.14091 AS DOUBLE PRECISION) * "IL"."Feature_0" + CAST(-3.01604 AS DOUBLE PRECISION) * "IL"."Feature_1" + CAST(1.378274 AS DOUBLE PRECISION) * "IL"."Feature_2" + CAST(-0.7840358 AS DOUBLE PRECISION) * "IL"."Feature_3" + CAST(0.3696838 AS DOUBLE PRECISION) * "IL"."Feature_4" + CAST(1.840692 AS DOUBLE PRECISION) * "IL"."Feature_5" + CAST(0.4935652 AS DOUBLE PRECISION) * "IL"."Feature_6" + CAST(-0.8639512 AS DOUBLE PRECISION) * "IL"."Feature_7" + CAST(1.357434 AS DOUBLE PRECISION) * "IL"."Feature_8" + CAST(1.621761 AS DOUBLE PRECISION) * "IL"."Feature_9" + CAST(-1.006882 AS DOUBLE PRECISION) AS "NEUR_1_11", CAST(0.547418 AS DOUBLE PRECISION) * "IL"."Feature_0" + CAST(0.4350616 AS DOUBLE PRECISION) * "IL"."Feature_1" + CAST(0.3326924 AS DOUBLE PRECISION) * "IL"."Feature_2" + CAST(0.1206272 AS DOUBLE PRECISION) * "IL"."Feature_3" + CAST(0.02164127 AS DOUBLE PRECISION) * "IL"."Feature_4" + CAST(-0.3852297 AS DOUBLE PRECISION) * "IL"."Feature_5" + CAST(0.6101615 AS DOUBLE PRECISION) * "IL"."Feature_6" + CAST(0.2369971 AS DOUBLE PRECISION) * "IL"."Feature_7" + CAST(-0.08487903 AS DOUBLE PRECISION) * "IL"."Feature_8" + CAST(-0.3334303 AS DOUBLE PRECISION) * "IL"."Feature_9" + CAST(1.03605 AS DOUBLE PRECISION) AS "NEUR_1_12" 
FROM "IL"), 
"HL_1_logistic" AS 
(SELECT "HL_BA_1"."KEY" AS "KEY", CAST(1.0 AS DOUBLE PRECISION) / (CAST(1.0 AS DOUBLE PRECISION) + exp(least(CAST(100.0 AS DOUBLE PRECISION), greatest(-CAST(100.0 AS DOUBLE PRECISION), -"HL_BA_1"."NEUR_1_1")))) AS "NEUR_1_1", CAST(1.0 AS DOUBLE PRECISION) / (CAST(1.0 AS DOUBLE PRECISION) + exp(least(CAST(100.0 AS DOUBLE PRECISION), greatest(-CAST(100.0 AS DOUBLE PRECISION), -"HL_BA_1"."NEUR_1_2")))) AS "NEUR_1_2", CAST(1.0 AS DOUBLE PRECISION) / (CAST(1.0 AS DOUBLE PRECISION) + exp(least(CAST(100.0 AS DOUBLE PRECISION), greatest(-CAST(100.0 AS DOUBLE PRECISION), -"HL_BA_1"."NEUR_1_3")))) AS "NEUR_1_3", CAST(1.0 AS DOUBLE PRECISION) / (CAST(1.0 AS DOUBLE PRECISION) + exp(least(CAST(100.0 AS DOUBLE PRECISION), greatest(-CAST(100.0 AS DOUBLE PRECISION), -"HL_BA_1"."NEUR_1_4")))) AS "NEUR_1_4", CAST(1.0 AS DOUBLE PRECISION) / (CAST(1.0 AS DOUBLE PRECISION) + exp(least(CAST(100.0 AS DOUBLE PRECISION), greatest(-CAST(100.0 AS DOUBLE PRECISION), -"HL_BA_1"."NEUR_1_5")))) AS "NEUR_1_5", CAST(1.0 AS DOUBLE PRECISION) / (CAST(1.0 AS DOUBLE PRECISION) + exp(least(CAST(100.0 AS DOUBLE PRECISION), greatest(-CAST(100.0 AS DOUBLE PRECISION), -"HL_BA_1"."NEUR_1_6")))) AS "NEUR_1_6", CAST(1.0 AS DOUBLE PRECISION) / (CAST(1.0 AS DOUBLE PRECISION) + exp(least(CAST(100.0 AS DOUBLE PRECISION), greatest(-CAST(100.0 AS DOUBLE PRECISION), -"HL_BA_1"."NEUR_1_7")))) AS "NEUR_1_7", CAST(1.0 AS DOUBLE PRECISION) / (CAST(1.0 AS DOUBLE PRECISION) + exp(least(CAST(100.0 AS DOUBLE PRECISION), greatest(-CAST(100.0 AS DOUBLE PRECISION), -"HL_BA_1"."NEUR_1_8")))) AS "NEUR_1_8", CAST(1.0 AS DOUBLE PRECISION) / (CAST(1.0 AS DOUBLE PRECISION) + exp(least(CAST(100.0 AS DOUBLE PRECISION), greatest(-CAST(100.0 AS DOUBLE PRECISION), -"HL_BA_1"."NEUR_1_9")))) AS "NEUR_1_9", CAST(1.0 AS DOUBLE PRECISION) / (CAST(1.0 AS DOUBLE PRECISION) + exp(least(CAST(100.0 AS DOUBLE PRECISION), greatest(-CAST(100.0 AS DOUBLE PRECISION), -"HL_BA_1"."NEUR_1_10")))) AS "NEUR_1_10", CAST(1.0 AS DOUBLE PRECISION) / (CAST(1.0 AS DOUBLE PRECISION) + exp(least(CAST(100.0 AS DOUBLE PRECISION), greatest(-CAST(100.0 AS DOUBLE PRECISION), -"HL_BA_1"."NEUR_1_11")))) AS "NEUR_1_11", CAST(1.0 AS DOUBLE PRECISION) / (CAST(1.0 AS DOUBLE PRECISION) + exp(least(CAST(100.0 AS DOUBLE PRECISION), greatest(-CAST(100.0 AS DOUBLE PRECISION), -"HL_BA_1"."NEUR_1_12")))) AS "NEUR_1_12" 
FROM "HL_BA_1"), 
"HL_1_logistic_1" AS 
(SELECT "HL_1_logistic"."KEY" AS "KEY", "HL_1_logistic"."NEUR_1_1" AS "NEUR_1_1", "HL_1_logistic"."NEUR_1_2" AS "NEUR_1_2", "HL_1_logistic"."NEUR_1_3" AS "NEUR_1_3", "HL_1_logistic"."NEUR_1_4" AS "NEUR_1_4", "HL_1_logistic"."NEUR_1_5" AS "NEUR_1_5", "HL_1_logistic"."NEUR_1_6" AS "NEUR_1_6", "HL_1_logistic"."NEUR_1_7" AS "NEUR_1_7", "HL_1_logistic"."NEUR_1_8" AS "NEUR_1_8", "HL_1_logistic"."NEUR_1_9" AS "NEUR_1_9", "HL_1_logistic"."NEUR_1_10" AS "NEUR_1_10", "HL_1_logistic"."NEUR_1_11" AS "NEUR_1_11", "HL_1_logistic"."NEUR_1_12" AS "NEUR_1_12" 
FROM "HL_1_logistic"), 
"OL_BA" AS 
(SELECT "HL_1_logistic_1"."KEY" AS "KEY", CAST(-4.358244 AS DOUBLE PRECISION) * "HL_1_logistic_1"."NEUR_1_1" + CAST(7.714548 AS DOUBLE PRECISION) * "HL_1_logistic_1"."NEUR_1_2" + CAST(-6.189692 AS DOUBLE PRECISION) * "HL_1_logistic_1"."NEUR_1_3" + CAST(-7.748282 AS DOUBLE PRECISION) * "HL_1_logistic_1"."NEUR_1_4" + CAST(5.978964 AS DOUBLE PRECISION) * "HL_1_logistic_1"."NEUR_1_5" + CAST(-8.787435 AS DOUBLE PRECISION) * "HL_1_logistic_1"."NEUR_1_6" + CAST(5.918957 AS DOUBLE PRECISION) * "HL_1_logistic_1"."NEUR_1_7" + CAST(8.347619 AS DOUBLE PRECISION) * "HL_1_logistic_1"."NEUR_1_8" + CAST(-6.402023 AS DOUBLE PRECISION) * "HL_1_logistic_1"."NEUR_1_9" + CAST(6.547018 AS DOUBLE PRECISION) * "HL_1_logistic_1"."NEUR_1_10" + CAST(2.526512 AS DOUBLE PRECISION) * "HL_1_logistic_1"."NEUR_1_11" + CAST(-0.6513634 AS DOUBLE PRECISION) * "HL_1_logistic_1"."NEUR_1_12" + CAST(-0.7725623 AS DOUBLE PRECISION) AS "NEUR_2_1" 
FROM "HL_1_logistic_1"), 
"OL_softmax" AS 
(SELECT "OL_BA"."KEY" AS "KEY", "OL_BA"."NEUR_2_1" AS "NEUR_2_1" 
FROM "OL_BA"), 
"OL_softmax_1" AS 
(SELECT "OL_softmax"."KEY" AS "KEY", "OL_softmax"."NEUR_2_1" AS "NEUR_2_1" 
FROM "OL_softmax"), 
orig_cte AS 
(SELECT "OL_softmax_1"."KEY" AS "KEY", CAST(NULL AS DOUBLE PRECISION) AS "Score_0", CAST(NULL AS DOUBLE PRECISION) AS "Score_1", CAST(1.0 AS DOUBLE PRECISION) - "OL_softmax_1"."NEUR_2_1" AS "Proba_0", "OL_softmax_1"."NEUR_2_1" AS "Proba_1", CAST(NULL AS DOUBLE PRECISION) AS "LogProba_0", CAST(NULL AS DOUBLE PRECISION) AS "LogProba_1", CAST(NULL AS BIGINT) AS "Decision", CAST(NULL AS DOUBLE PRECISION) AS "DecisionProba" 
FROM "OL_softmax_1"), 
score_class_union AS 
(SELECT scu."KEY_u" AS "KEY_u", scu."class" AS "class", scu."LogProba" AS "LogProba", scu."Proba" AS "Proba", scu."Score" AS "Score" 
FROM (SELECT orig_cte."KEY" AS "KEY_u", 0 AS "class", orig_cte."LogProba_0" AS "LogProba", orig_cte."Proba_0" AS "Proba", orig_cte."Score_0" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY_u", 1 AS "class", orig_cte."LogProba_1" AS "LogProba", orig_cte."Proba_1" AS "Proba", orig_cte."Score_1" AS "Score" 
FROM orig_cte) AS scu), 
score_max AS 
(SELECT orig_cte."KEY" AS "KEY", orig_cte."Score_0" AS "Score_0", orig_cte."Score_1" AS "Score_1", orig_cte."Proba_0" AS "Proba_0", orig_cte."Proba_1" AS "Proba_1", orig_cte."LogProba_0" AS "LogProba_0", orig_cte."LogProba_1" AS "LogProba_1", orig_cte."Decision" AS "Decision", orig_cte."DecisionProba" AS "DecisionProba", max_select."KEY_m" AS "KEY_m", max_select."max_Proba" AS "max_Proba" 
FROM orig_cte LEFT OUTER JOIN (SELECT score_class_union."KEY_u" AS "KEY_m", max(score_class_union."Proba") AS "max_Proba" 
FROM score_class_union GROUP BY score_class_union."KEY_u") AS max_select ON orig_cte."KEY" = max_select."KEY_m"), 
union_with_max AS 
(SELECT score_class_union."KEY_u" AS "KEY_u", score_class_union."class" AS "class", score_class_union."LogProba" AS "LogProba", score_class_union."Proba" AS "Proba", score_class_union."Score" AS "Score", score_max."KEY" AS "KEY", score_max."Score_0" AS "Score_0", score_max."Score_1" AS "Score_1", score_max."Proba_0" AS "Proba_0", score_max."Proba_1" AS "Proba_1", score_max."LogProba_0" AS "LogProba_0", score_max."LogProba_1" AS "LogProba_1", score_max."Decision" AS "Decision", score_max."DecisionProba" AS "DecisionProba", score_max."KEY_m" AS "KEY_m", score_max."max_Proba" AS "max_Proba" 
FROM score_class_union LEFT OUTER JOIN score_max ON score_class_union."KEY_u" = score_max."KEY"), 
arg_max_cte AS 
(SELECT score_max."KEY" AS "KEY", score_max."Score_0" AS "Score_0", score_max."Score_1" AS "Score_1", score_max."Proba_0" AS "Proba_0", score_max."Proba_1" AS "Proba_1", score_max."LogProba_0" AS "LogProba_0", score_max."LogProba_1" AS "LogProba_1", score_max."Decision" AS "Decision", score_max."DecisionProba" AS "DecisionProba", score_max."KEY_m" AS "KEY_m", score_max."max_Proba" AS "max_Proba", "arg_max_t_Proba"."KEY_Proba" AS "KEY_Proba", "arg_max_t_Proba"."arg_max_Proba" AS "arg_max_Proba" 
FROM score_max LEFT OUTER JOIN (SELECT union_with_max."KEY" AS "KEY_Proba", max(union_with_max."class") AS "arg_max_Proba" 
FROM union_with_max 
WHERE union_with_max."max_Proba" <= union_with_max."Proba" GROUP BY union_with_max."KEY") AS "arg_max_t_Proba" ON score_max."KEY" = "arg_max_t_Proba"."KEY_Proba")
 SELECT arg_max_cte."KEY" AS "KEY", arg_max_cte."Score_0" AS "Score_0", arg_max_cte."Score_1" AS "Score_1", arg_max_cte."Proba_0" AS "Proba_0", arg_max_cte."Proba_1" AS "Proba_1", CASE WHEN (arg_max_cte."Proba_0" IS NULL OR arg_max_cte."Proba_0" > CAST(0.0 AS DOUBLE PRECISION)) THEN ln(arg_max_cte."Proba_0") ELSE -1.79769313486231e+308 END AS "LogProba_0", CASE WHEN (arg_max_cte."Proba_1" IS NULL OR arg_max_cte."Proba_1" > CAST(0.0 AS DOUBLE PRECISION)) THEN ln(arg_max_cte."Proba_1") ELSE -1.79769313486231e+308 END AS "LogProba_1", arg_max_cte."arg_max_Proba" AS "Decision", arg_max_cte."max_Proba" AS "DecisionProba" 
FROM arg_max_cte