-- This SQL code was generated by sklearn2sql (development version).
-- Copyright 2018

-- Model : CaretClassifier_earth_pca
-- Dataset : iris
-- Database : mssql


-- This SQL code can contain one or more statements, to be executed in the order they appear in this file.



-- Model deployment code

WITH [ADS_sca_1_OUT] AS 
(SELECT [ADS].[KEY] AS [KEY], (CAST([ADS].[Feature_0] AS FLOAT(53)) - 5.8475) / 0.8305068311812104 AS [Feature_0], (CAST([ADS].[Feature_1] AS FLOAT(53)) - 3.040833333333333) / 0.4410636176856331 AS [Feature_1], (CAST([ADS].[Feature_2] AS FLOAT(53)) - 3.8441666666666667) / 1.7181578875675667 AS [Feature_2], (CAST([ADS].[Feature_3] AS FLOAT(53)) - 1.245833333333333) / 0.7517929083403303 AS [Feature_3] 
FROM iris AS [ADS]), 
[ADS_pre_1_OUT] AS 
(SELECT [ADS_sca_1_OUT].[KEY] AS [KEY], [ADS_sca_1_OUT].[Feature_0] * -0.5263014514387969 + [ADS_sca_1_OUT].[Feature_1] * 0.2495430740050257 + [ADS_sca_1_OUT].[Feature_2] * -0.5822562654142306 + [ADS_sca_1_OUT].[Feature_3] * -0.5671972124538438 AS [PC1], [ADS_sca_1_OUT].[Feature_0] * 0.35797855187209515 + [ADS_sca_1_OUT].[Feature_1] * 0.9312088394674648 + [ADS_sca_1_OUT].[Feature_2] * 0.009350349831007576 + [ADS_sca_1_OUT].[Feature_3] * 0.06792661227568664 AS [PC2], [ADS_sca_1_OUT].[Feature_0] * 0.7268387018817979 + [ADS_sca_1_OUT].[Feature_1] * -0.2319858665682916 + [ADS_sca_1_OUT].[Feature_2] * -0.142090941958786 + [ADS_sca_1_OUT].[Feature_3] * -0.6306331924126783 AS [PC3], [ADS_sca_1_OUT].[Feature_0] * -0.2579993024404442 + [ADS_sca_1_OUT].[Feature_1] * 0.1294639302135427 + [ADS_sca_1_OUT].[Feature_2] * 0.8004376156560707 + [ADS_sca_1_OUT].[Feature_3] * -0.5253332981610163 AS [PC4] 
FROM [ADS_sca_1_OUT]), 
earth_input AS 
(SELECT [ADS_pre_1_OUT].[KEY] AS [KEY], CAST([ADS_pre_1_OUT].[PC1] AS FLOAT(53)) AS [PC1], CAST([ADS_pre_1_OUT].[PC2] AS FLOAT(53)) AS [PC2], CAST([ADS_pre_1_OUT].[PC3] AS FLOAT(53)) AS [PC3], CAST([ADS_pre_1_OUT].[PC4] AS FLOAT(53)) AS [PC4] 
FROM [ADS_pre_1_OUT]), 
earth_model_cte AS 
(SELECT earth_input.[KEY] AS [KEY], 0.5652542518760738 * CASE WHEN (-0.017360589210772742 - earth_input.[PC1] <= 0) THEN 0 ELSE -0.017360589210772742 - earth_input.[PC1] END + -2.085242044132094 * CASE WHEN (earth_input.[PC3] - 0.2280435636734822 <= 0) THEN 0 ELSE earth_input.[PC3] - 0.2280435636734822 END + -3.39347876518004 * CASE WHEN (0.2280435636734822 - earth_input.[PC3] <= 0) THEN 0 ELSE 0.2280435636734822 - earth_input.[PC3] END + -31.105006767610195 * CASE WHEN (earth_input.[PC1] - 1.9193410513160611 <= 0) THEN 0 ELSE earth_input.[PC1] - 1.9193410513160611 END + 1.494746705263822 * CASE WHEN (earth_input.[PC4] - 0.1047646025983524 <= 0) THEN 0 ELSE earth_input.[PC4] - 0.1047646025983524 END + 246.5306887644564 * CASE WHEN (earth_input.[PC1] - -0.674082655111522 <= 0) THEN 0 ELSE earth_input.[PC1] - -0.674082655111522 END + -211.2310381967572 * CASE WHEN (earth_input.[PC1] - -0.8617563505066398 <= 0) THEN 0 ELSE earth_input.[PC1] - -0.8617563505066398 END + -26.468840824983282 AS [Score_0], -8.992786819418152 * CASE WHEN (-0.017360589210772742 - earth_input.[PC1] <= 0) THEN 0 ELSE -0.017360589210772742 - earth_input.[PC1] END + 15.849955443066829 * CASE WHEN (earth_input.[PC3] - 0.2280435636734822 <= 0) THEN 0 ELSE earth_input.[PC3] - 0.2280435636734822 END + -230.48053812141384 * CASE WHEN (0.2280435636734822 - earth_input.[PC3] <= 0) THEN 0 ELSE 0.2280435636734822 - earth_input.[PC3] END + 166.83394354349454 * CASE WHEN (earth_input.[PC1] - 1.9193410513160611 <= 0) THEN 0 ELSE earth_input.[PC1] - 1.9193410513160611 END + -178.68275200317646 * CASE WHEN (earth_input.[PC4] - 0.1047646025983524 <= 0) THEN 0 ELSE earth_input.[PC4] - 0.1047646025983524 END + -1777.9683172986129 * CASE WHEN (earth_input.[PC1] - -0.674082655111522 <= 0) THEN 0 ELSE earth_input.[PC1] - -0.674082655111522 END + 1642.202521023471 * CASE WHEN (earth_input.[PC1] - -0.8617563505066398 <= 0) THEN 0 ELSE earth_input.[PC1] - -0.8617563505066398 END + 10.146013831606671 AS [Score_1], 8.992786820244358 * CASE WHEN (-0.017360589210772742 - earth_input.[PC1] <= 0) THEN 0 ELSE -0.017360589210772742 - earth_input.[PC1] END + -15.849955447247641 * CASE WHEN (earth_input.[PC3] - 0.2280435636734822 <= 0) THEN 0 ELSE earth_input.[PC3] - 0.2280435636734822 END + 199.16131724211783 * CASE WHEN (0.2280435636734822 - earth_input.[PC3] <= 0) THEN 0 ELSE 0.2280435636734822 - earth_input.[PC3] END + -10.365620460304324 * CASE WHEN (earth_input.[PC1] - 1.9193410513160611 <= 0) THEN 0 ELSE earth_input.[PC1] - 1.9193410513160611 END + 182.7411014213087 * CASE WHEN (earth_input.[PC4] - 0.1047646025983524 <= 0) THEN 0 ELSE earth_input.[PC4] - 0.1047646025983524 END + 1268.4777055539728 * CASE WHEN (earth_input.[PC1] - -0.674082655111522 <= 0) THEN 0 ELSE earth_input.[PC1] - -0.674082655111522 END + -1230.34115471282 * CASE WHEN (earth_input.[PC1] - -0.8617563505066398 <= 0) THEN 0 ELSE earth_input.[PC1] - -0.8617563505066398 END + -10.146013832189793 AS [Score_2] 
FROM earth_input), 
earth_model_cte_logistic AS 
(SELECT earth_model_cte.[KEY] AS [KEY], earth_model_cte.[Score_0] AS [Score_0], 1.0 / (1.0 + exp(CASE WHEN (100.0 <= CASE WHEN (-100.0 <= -earth_model_cte.[Score_0]) THEN -earth_model_cte.[Score_0] ELSE -100.0 END) THEN 100.0 ELSE CASE WHEN (-100.0 <= -earth_model_cte.[Score_0]) THEN -earth_model_cte.[Score_0] ELSE -100.0 END END)) AS [Logistic_0], earth_model_cte.[Score_1] AS [Score_1], 1.0 / (1.0 + exp(CASE WHEN (100.0 <= CASE WHEN (-100.0 <= -earth_model_cte.[Score_1]) THEN -earth_model_cte.[Score_1] ELSE -100.0 END) THEN 100.0 ELSE CASE WHEN (-100.0 <= -earth_model_cte.[Score_1]) THEN -earth_model_cte.[Score_1] ELSE -100.0 END END)) AS [Logistic_1], earth_model_cte.[Score_2] AS [Score_2], 1.0 / (1.0 + exp(CASE WHEN (100.0 <= CASE WHEN (-100.0 <= -earth_model_cte.[Score_2]) THEN -earth_model_cte.[Score_2] ELSE -100.0 END) THEN 100.0 ELSE CASE WHEN (-100.0 <= -earth_model_cte.[Score_2]) THEN -earth_model_cte.[Score_2] ELSE -100.0 END END)) AS [Logistic_2] 
FROM earth_model_cte), 
orig_cte AS 
(SELECT earth_model_cte_logistic.[KEY] AS [KEY], earth_model_cte_logistic.[Score_0] AS [Score_0], earth_model_cte_logistic.[Score_1] AS [Score_1], earth_model_cte_logistic.[Score_2] AS [Score_2], earth_model_cte_logistic.[Logistic_0] / (earth_model_cte_logistic.[Logistic_0] + earth_model_cte_logistic.[Logistic_1] + earth_model_cte_logistic.[Logistic_2]) AS [Proba_0], earth_model_cte_logistic.[Logistic_1] / (earth_model_cte_logistic.[Logistic_0] + earth_model_cte_logistic.[Logistic_1] + earth_model_cte_logistic.[Logistic_2]) AS [Proba_1], earth_model_cte_logistic.[Logistic_2] / (earth_model_cte_logistic.[Logistic_0] + earth_model_cte_logistic.[Logistic_1] + earth_model_cte_logistic.[Logistic_2]) AS [Proba_2], CAST(NULL AS FLOAT(53)) AS [LogProba_0], CAST(NULL AS FLOAT(53)) AS [LogProba_1], CAST(NULL AS FLOAT(53)) AS [LogProba_2], CAST(NULL AS BIGINT) AS [Decision], CAST(NULL AS FLOAT(53)) AS [DecisionProba] 
FROM earth_model_cte_logistic), 
score_class_union AS 
(SELECT scu.[KEY_u] AS [KEY_u], scu.class AS class, scu.[LogProba] AS [LogProba], scu.[Proba] AS [Proba], scu.[Score] AS [Score] 
FROM (SELECT orig_cte.[KEY] AS [KEY_u], 0 AS class, orig_cte.[LogProba_0] AS [LogProba], orig_cte.[Proba_0] AS [Proba], orig_cte.[Score_0] AS [Score] 
FROM orig_cte UNION ALL SELECT orig_cte.[KEY] AS [KEY_u], 1 AS class, orig_cte.[LogProba_1] AS [LogProba], orig_cte.[Proba_1] AS [Proba], orig_cte.[Score_1] AS [Score] 
FROM orig_cte UNION ALL SELECT orig_cte.[KEY] AS [KEY_u], 2 AS class, orig_cte.[LogProba_2] AS [LogProba], orig_cte.[Proba_2] AS [Proba], orig_cte.[Score_2] AS [Score] 
FROM orig_cte) AS scu), 
score_max AS 
(SELECT orig_cte.[KEY] AS [KEY], orig_cte.[Score_0] AS [Score_0], orig_cte.[Score_1] AS [Score_1], orig_cte.[Score_2] AS [Score_2], orig_cte.[Proba_0] AS [Proba_0], orig_cte.[Proba_1] AS [Proba_1], orig_cte.[Proba_2] AS [Proba_2], orig_cte.[LogProba_0] AS [LogProba_0], orig_cte.[LogProba_1] AS [LogProba_1], orig_cte.[LogProba_2] AS [LogProba_2], orig_cte.[Decision] AS [Decision], orig_cte.[DecisionProba] AS [DecisionProba], max_select.[KEY_m] AS [KEY_m], max_select.[max_Proba] AS [max_Proba] 
FROM orig_cte LEFT OUTER JOIN (SELECT score_class_union.[KEY_u] AS [KEY_m], max(score_class_union.[Proba]) AS [max_Proba] 
FROM score_class_union GROUP BY score_class_union.[KEY_u]) AS max_select ON orig_cte.[KEY] = max_select.[KEY_m]), 
union_with_max AS 
(SELECT score_class_union.[KEY_u] AS [KEY_u], score_class_union.class AS class, score_class_union.[LogProba] AS [LogProba], score_class_union.[Proba] AS [Proba], score_class_union.[Score] AS [Score], score_max.[KEY] AS [KEY], score_max.[Score_0] AS [Score_0], score_max.[Score_1] AS [Score_1], score_max.[Score_2] AS [Score_2], score_max.[Proba_0] AS [Proba_0], score_max.[Proba_1] AS [Proba_1], score_max.[Proba_2] AS [Proba_2], score_max.[LogProba_0] AS [LogProba_0], score_max.[LogProba_1] AS [LogProba_1], score_max.[LogProba_2] AS [LogProba_2], score_max.[Decision] AS [Decision], score_max.[DecisionProba] AS [DecisionProba], score_max.[KEY_m] AS [KEY_m], score_max.[max_Proba] AS [max_Proba] 
FROM score_class_union LEFT OUTER JOIN score_max ON score_class_union.[KEY_u] = score_max.[KEY]), 
arg_max_cte AS 
(SELECT score_max.[KEY] AS [KEY], score_max.[Score_0] AS [Score_0], score_max.[Score_1] AS [Score_1], score_max.[Score_2] AS [Score_2], score_max.[Proba_0] AS [Proba_0], score_max.[Proba_1] AS [Proba_1], score_max.[Proba_2] AS [Proba_2], score_max.[LogProba_0] AS [LogProba_0], score_max.[LogProba_1] AS [LogProba_1], score_max.[LogProba_2] AS [LogProba_2], score_max.[Decision] AS [Decision], score_max.[DecisionProba] AS [DecisionProba], score_max.[KEY_m] AS [KEY_m], score_max.[max_Proba] AS [max_Proba], [arg_max_t_Proba].[KEY_Proba] AS [KEY_Proba], [arg_max_t_Proba].[arg_max_Proba] AS [arg_max_Proba] 
FROM score_max LEFT OUTER JOIN (SELECT union_with_max.[KEY] AS [KEY_Proba], max(union_with_max.class) AS [arg_max_Proba] 
FROM union_with_max 
WHERE union_with_max.[max_Proba] <= union_with_max.[Proba] GROUP BY union_with_max.[KEY]) AS [arg_max_t_Proba] ON score_max.[KEY] = [arg_max_t_Proba].[KEY_Proba])
 SELECT arg_max_cte.[KEY] AS [KEY], CAST(NULL AS FLOAT(53)) AS [Score_0], CAST(NULL AS FLOAT(53)) AS [Score_1], CAST(NULL AS FLOAT(53)) AS [Score_2], arg_max_cte.[Proba_0] AS [Proba_0], arg_max_cte.[Proba_1] AS [Proba_1], arg_max_cte.[Proba_2] AS [Proba_2], CASE WHEN (arg_max_cte.[Proba_0] IS NULL OR arg_max_cte.[Proba_0] > 0.0) THEN log(arg_max_cte.[Proba_0]) ELSE -1.79769313486231e+308 END AS [LogProba_0], CASE WHEN (arg_max_cte.[Proba_1] IS NULL OR arg_max_cte.[Proba_1] > 0.0) THEN log(arg_max_cte.[Proba_1]) ELSE -1.79769313486231e+308 END AS [LogProba_1], CASE WHEN (arg_max_cte.[Proba_2] IS NULL OR arg_max_cte.[Proba_2] > 0.0) THEN log(arg_max_cte.[Proba_2]) ELSE -1.79769313486231e+308 END AS [LogProba_2], arg_max_cte.[arg_max_Proba] AS [Decision], arg_max_cte.[max_Proba] AS [DecisionProba] 
FROM arg_max_cte