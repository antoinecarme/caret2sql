-- This SQL code was generated by sklearn2sql (development version).
-- Copyright 2018

-- Model : CaretClassifier_nnet_pca
-- Dataset : BinaryClass_10
-- Database : teradata


-- This SQL code can contain one or more statements, to be executed in the order they appear in this file.



-- Model deployment code

WITH "ADS_sca_1_OUT" AS 
(SELECT "ADS"."KEY" AS "KEY", (CAST("ADS"."Feature_0" AS DOUBLE PRECISION) - CAST(0.061829205238135 AS DOUBLE PRECISION)) / CAST(1.236134089597546 AS DOUBLE PRECISION) AS "Feature_0", (CAST("ADS"."Feature_1" AS DOUBLE PRECISION) - CAST(0.177024637671833 AS DOUBLE PRECISION)) / CAST(0.946757498519011 AS DOUBLE PRECISION) AS "Feature_1", (CAST("ADS"."Feature_2" AS DOUBLE PRECISION) - CAST(0.041383850049034 AS DOUBLE PRECISION)) / CAST(1.080959732698354 AS DOUBLE PRECISION) AS "Feature_2", (CAST("ADS"."Feature_3" AS DOUBLE PRECISION) - CAST(0.130606468058471 AS DOUBLE PRECISION)) / CAST(1.086033510624102 AS DOUBLE PRECISION) AS "Feature_3", (CAST("ADS"."Feature_4" AS DOUBLE PRECISION) - CAST(-0.059558104719831 AS DOUBLE PRECISION)) / CAST(1.116589750763382 AS DOUBLE PRECISION) AS "Feature_4", (CAST("ADS"."Feature_5" AS DOUBLE PRECISION) - CAST(-0.048929089870106 AS DOUBLE PRECISION)) / CAST(1.386882454724367 AS DOUBLE PRECISION) AS "Feature_5", (CAST("ADS"."Feature_6" AS DOUBLE PRECISION) - CAST(0.191017978617131 AS DOUBLE PRECISION)) / CAST(0.979670721363872 AS DOUBLE PRECISION) AS "Feature_6", (CAST("ADS"."Feature_7" AS DOUBLE PRECISION) - CAST(0.022049596732675 AS DOUBLE PRECISION)) / CAST(0.477597382512509 AS DOUBLE PRECISION) AS "Feature_7", (CAST("ADS"."Feature_8" AS DOUBLE PRECISION) - CAST(-0.05772981403414 AS DOUBLE PRECISION)) / CAST(1.071324358190733 AS DOUBLE PRECISION) AS "Feature_8", (CAST("ADS"."Feature_9" AS DOUBLE PRECISION) - CAST(-0.052549592052032 AS DOUBLE PRECISION)) / CAST(1.232258725853038 AS DOUBLE PRECISION) AS "Feature_9" 
FROM "BinaryClass_10" AS "ADS"), 
"ADS_pre_1_OUT" AS 
(SELECT "ADS_sca_1_OUT"."KEY" AS "KEY", "ADS_sca_1_OUT"."Feature_0" * CAST(0.566159232192036 AS DOUBLE PRECISION) + "ADS_sca_1_OUT"."Feature_1" * CAST(-0.035526328604153 AS DOUBLE PRECISION) + "ADS_sca_1_OUT"."Feature_2" * CAST(-0.046787936312051 AS DOUBLE PRECISION) + "ADS_sca_1_OUT"."Feature_3" * CAST(0.008946515209954 AS DOUBLE PRECISION) + "ADS_sca_1_OUT"."Feature_4" * CAST(0.082951188840366 AS DOUBLE PRECISION) + "ADS_sca_1_OUT"."Feature_5" * CAST(-0.102052212961004 AS DOUBLE PRECISION) + "ADS_sca_1_OUT"."Feature_6" * CAST(0.142445150790375 AS DOUBLE PRECISION) + "ADS_sca_1_OUT"."Feature_7" * CAST(0.566656668883156 AS DOUBLE PRECISION) + "ADS_sca_1_OUT"."Feature_8" * CAST(-0.066314277287908 AS DOUBLE PRECISION) + "ADS_sca_1_OUT"."Feature_9" * CAST(-0.559328985495082 AS DOUBLE PRECISION) AS "PC1", "ADS_sca_1_OUT"."Feature_0" * CAST(0.076712580027952 AS DOUBLE PRECISION) + "ADS_sca_1_OUT"."Feature_1" * CAST(-0.401537944583286 AS DOUBLE PRECISION) + "ADS_sca_1_OUT"."Feature_2" * CAST(0.567757825044682 AS DOUBLE PRECISION) + "ADS_sca_1_OUT"."Feature_3" * CAST(0.236973570301066 AS DOUBLE PRECISION) + "ADS_sca_1_OUT"."Feature_4" * CAST(-0.096329229162562 AS DOUBLE PRECISION) + "ADS_sca_1_OUT"."Feature_5" * CAST(-0.576778727916188 AS DOUBLE PRECISION) + "ADS_sca_1_OUT"."Feature_6" * CAST(-0.321637693479788 AS DOUBLE PRECISION) + "ADS_sca_1_OUT"."Feature_7" * CAST(-0.006693968243625 AS DOUBLE PRECISION) + "ADS_sca_1_OUT"."Feature_8" * CAST(-0.064211589452152 AS DOUBLE PRECISION) + "ADS_sca_1_OUT"."Feature_9" * CAST(0.069320080345438 AS DOUBLE PRECISION) AS "PC2", "ADS_sca_1_OUT"."Feature_0" * CAST(-0.044288079172689 AS DOUBLE PRECISION) + "ADS_sca_1_OUT"."Feature_1" * CAST(0.022442861422886 AS DOUBLE PRECISION) + "ADS_sca_1_OUT"."Feature_2" * CAST(-0.170938432317477 AS DOUBLE PRECISION) + "ADS_sca_1_OUT"."Feature_3" * CAST(0.418793802030975 AS DOUBLE PRECISION) + "ADS_sca_1_OUT"."Feature_4" * CAST(0.463880454713056 AS DOUBLE PRECISION) + "ADS_sca_1_OUT"."Feature_5" * CAST(0.124363843323912 AS DOUBLE PRECISION) + "ADS_sca_1_OUT"."Feature_6" * CAST(-0.249119763075 AS DOUBLE PRECISION) + "ADS_sca_1_OUT"."Feature_7" * CAST(-0.027070140621398 AS DOUBLE PRECISION) + "ADS_sca_1_OUT"."Feature_8" * CAST(-0.706606389230046 AS DOUBLE PRECISION) + "ADS_sca_1_OUT"."Feature_9" * CAST(0.013755282331336 AS DOUBLE PRECISION) AS "PC3", "ADS_sca_1_OUT"."Feature_0" * CAST(0.035505292609371 AS DOUBLE PRECISION) + "ADS_sca_1_OUT"."Feature_1" * CAST(0.462941597631812 AS DOUBLE PRECISION) + "ADS_sca_1_OUT"."Feature_2" * CAST(0.397039497281857 AS DOUBLE PRECISION) + "ADS_sca_1_OUT"."Feature_3" * CAST(0.108176435008563 AS DOUBLE PRECISION) + "ADS_sca_1_OUT"."Feature_4" * CAST(-0.54438802799142 AS DOUBLE PRECISION) + "ADS_sca_1_OUT"."Feature_5" * CAST(0.388699121446378 AS DOUBLE PRECISION) + "ADS_sca_1_OUT"."Feature_6" * CAST(-0.313627068551078 AS DOUBLE PRECISION) + "ADS_sca_1_OUT"."Feature_7" * CAST(0.09412147953131 AS DOUBLE PRECISION) + "ADS_sca_1_OUT"."Feature_8" * CAST(-0.204130331226492 AS DOUBLE PRECISION) + "ADS_sca_1_OUT"."Feature_9" * CAST(-0.136918343141165 AS DOUBLE PRECISION) AS "PC4", "ADS_sca_1_OUT"."Feature_0" * CAST(-0.023956113345304 AS DOUBLE PRECISION) + "ADS_sca_1_OUT"."Feature_1" * CAST(0.305966306740371 AS DOUBLE PRECISION) + "ADS_sca_1_OUT"."Feature_2" * CAST(0.124414861972722 AS DOUBLE PRECISION) + "ADS_sca_1_OUT"."Feature_3" * CAST(0.72052321304335 AS DOUBLE PRECISION) + "ADS_sca_1_OUT"."Feature_4" * CAST(-0.010360887714255 AS DOUBLE PRECISION) + "ADS_sca_1_OUT"."Feature_5" * CAST(-0.123138664673271 AS DOUBLE PRECISION) + "ADS_sca_1_OUT"."Feature_6" * CAST(0.563071125176879 AS DOUBLE PRECISION) + "ADS_sca_1_OUT"."Feature_7" * CAST(-0.042876365018652 AS DOUBLE PRECISION) + "ADS_sca_1_OUT"."Feature_8" * CAST(0.183916924199741 AS DOUBLE PRECISION) + "ADS_sca_1_OUT"."Feature_9" * CAST(0.056520588594193 AS DOUBLE PRECISION) AS "PC5", "ADS_sca_1_OUT"."Feature_0" * CAST(0.048169250614027 AS DOUBLE PRECISION) + "ADS_sca_1_OUT"."Feature_1" * CAST(0.623936249667701 AS DOUBLE PRECISION) + "ADS_sca_1_OUT"."Feature_2" * CAST(0.20083118524117 AS DOUBLE PRECISION) + "ADS_sca_1_OUT"."Feature_3" * CAST(-0.161860810639755 AS DOUBLE PRECISION) + "ADS_sca_1_OUT"."Feature_4" * CAST(0.543200733049669 AS DOUBLE PRECISION) + "ADS_sca_1_OUT"."Feature_5" * CAST(-0.243618603694409 AS DOUBLE PRECISION) + "ADS_sca_1_OUT"."Feature_6" * CAST(-0.314723330308694 AS DOUBLE PRECISION) + "ADS_sca_1_OUT"."Feature_7" * CAST(0.013375452116101 AS DOUBLE PRECISION) + "ADS_sca_1_OUT"."Feature_8" * CAST(0.296709034123596 AS DOUBLE PRECISION) + "ADS_sca_1_OUT"."Feature_9" * CAST(0.012969345295026 AS DOUBLE PRECISION) AS "PC6", "ADS_sca_1_OUT"."Feature_0" * CAST(-0.067735908634631 AS DOUBLE PRECISION) + "ADS_sca_1_OUT"."Feature_1" * CAST(-0.117581817738582 AS DOUBLE PRECISION) + "ADS_sca_1_OUT"."Feature_2" * CAST(0.647709549343604 AS DOUBLE PRECISION) + "ADS_sca_1_OUT"."Feature_3" * CAST(-0.311227282367873 AS DOUBLE PRECISION) + "ADS_sca_1_OUT"."Feature_4" * CAST(0.334776881812109 AS DOUBLE PRECISION) + "ADS_sca_1_OUT"."Feature_5" * CAST(0.294963754991101 AS DOUBLE PRECISION) + "ADS_sca_1_OUT"."Feature_6" * CAST(0.460736675610007 AS DOUBLE PRECISION) + "ADS_sca_1_OUT"."Feature_7" * CAST(-0.025868856528123 AS DOUBLE PRECISION) + "ADS_sca_1_OUT"."Feature_8" * CAST(-0.230508237026858 AS DOUBLE PRECISION) + "ADS_sca_1_OUT"."Feature_9" * CAST(-0.005964439285718 AS DOUBLE PRECISION) AS "PC7" 
FROM "ADS_sca_1_OUT"), 
"IL" AS 
(SELECT "ADS_pre_1_OUT"."KEY" AS "KEY", CAST("ADS_pre_1_OUT"."PC1" AS DOUBLE PRECISION) AS "PC1", CAST("ADS_pre_1_OUT"."PC2" AS DOUBLE PRECISION) AS "PC2", CAST("ADS_pre_1_OUT"."PC3" AS DOUBLE PRECISION) AS "PC3", CAST("ADS_pre_1_OUT"."PC4" AS DOUBLE PRECISION) AS "PC4", CAST("ADS_pre_1_OUT"."PC5" AS DOUBLE PRECISION) AS "PC5", CAST("ADS_pre_1_OUT"."PC6" AS DOUBLE PRECISION) AS "PC6", CAST("ADS_pre_1_OUT"."PC7" AS DOUBLE PRECISION) AS "PC7" 
FROM "ADS_pre_1_OUT"), 
"HL_BA_1" AS 
(SELECT "IL"."KEY" AS "KEY", CAST(-3.567382 AS DOUBLE PRECISION) * "IL"."PC1" + CAST(1.721026 AS DOUBLE PRECISION) * "IL"."PC2" + CAST(1.788402 AS DOUBLE PRECISION) * "IL"."PC3" + CAST(-0.802329 AS DOUBLE PRECISION) * "IL"."PC4" + CAST(0.05299994 AS DOUBLE PRECISION) * "IL"."PC5" + CAST(0.9209386 AS DOUBLE PRECISION) * "IL"."PC6" + CAST(-1.529888 AS DOUBLE PRECISION) * "IL"."PC7" + CAST(-1.278253 AS DOUBLE PRECISION) AS "NEUR_1_1", CAST(4.232301 AS DOUBLE PRECISION) * "IL"."PC1" + CAST(-4.232684 AS DOUBLE PRECISION) * "IL"."PC2" + CAST(-1.360063 AS DOUBLE PRECISION) * "IL"."PC3" + CAST(0.8572558 AS DOUBLE PRECISION) * "IL"."PC4" + CAST(-3.481319 AS DOUBLE PRECISION) * "IL"."PC5" + CAST(0.2438343 AS DOUBLE PRECISION) * "IL"."PC6" + CAST(-1.381224 AS DOUBLE PRECISION) * "IL"."PC7" + CAST(0.1311864 AS DOUBLE PRECISION) AS "NEUR_1_2", CAST(-1.722759 AS DOUBLE PRECISION) * "IL"."PC1" + CAST(0.01936179 AS DOUBLE PRECISION) * "IL"."PC2" + CAST(0.07056267 AS DOUBLE PRECISION) * "IL"."PC3" + CAST(-0.4214224 AS DOUBLE PRECISION) * "IL"."PC4" + CAST(0.340954 AS DOUBLE PRECISION) * "IL"."PC5" + CAST(-0.3440801 AS DOUBLE PRECISION) * "IL"."PC6" + CAST(0.3303606 AS DOUBLE PRECISION) * "IL"."PC7" + CAST(-0.4826253 AS DOUBLE PRECISION) AS "NEUR_1_3", CAST(4.668975 AS DOUBLE PRECISION) * "IL"."PC1" + CAST(1.512751 AS DOUBLE PRECISION) * "IL"."PC2" + CAST(0.3805184 AS DOUBLE PRECISION) * "IL"."PC3" + CAST(0.2105604 AS DOUBLE PRECISION) * "IL"."PC4" + CAST(-0.1092641 AS DOUBLE PRECISION) * "IL"."PC5" + CAST(-1.621299 AS DOUBLE PRECISION) * "IL"."PC6" + CAST(-2.890557 AS DOUBLE PRECISION) * "IL"."PC7" + CAST(-0.8007623 AS DOUBLE PRECISION) AS "NEUR_1_4", CAST(2.872416 AS DOUBLE PRECISION) * "IL"."PC1" + CAST(-1.157005 AS DOUBLE PRECISION) * "IL"."PC2" + CAST(-1.324613 AS DOUBLE PRECISION) * "IL"."PC3" + CAST(-1.941542 AS DOUBLE PRECISION) * "IL"."PC4" + CAST(-2.560656 AS DOUBLE PRECISION) * "IL"."PC5" + CAST(3.405694 AS DOUBLE PRECISION) * "IL"."PC6" + CAST(-0.9616352 AS DOUBLE PRECISION) * "IL"."PC7" + CAST(3.171522 AS DOUBLE PRECISION) AS "NEUR_1_5", CAST(-4.331364 AS DOUBLE PRECISION) * "IL"."PC1" + CAST(-1.484701 AS DOUBLE PRECISION) * "IL"."PC2" + CAST(0.5972719 AS DOUBLE PRECISION) * "IL"."PC3" + CAST(0.3153913 AS DOUBLE PRECISION) * "IL"."PC4" + CAST(-1.614025 AS DOUBLE PRECISION) * "IL"."PC5" + CAST(-0.5684577 AS DOUBLE PRECISION) * "IL"."PC6" + CAST(-2.298759 AS DOUBLE PRECISION) * "IL"."PC7" + CAST(-0.4634878 AS DOUBLE PRECISION) AS "NEUR_1_6", CAST(3.046094 AS DOUBLE PRECISION) * "IL"."PC1" + CAST(0.1918164 AS DOUBLE PRECISION) * "IL"."PC2" + CAST(-0.4347957 AS DOUBLE PRECISION) * "IL"."PC3" + CAST(0.6140331 AS DOUBLE PRECISION) * "IL"."PC4" + CAST(1.897109 AS DOUBLE PRECISION) * "IL"."PC5" + CAST(0.8735528 AS DOUBLE PRECISION) * "IL"."PC6" + CAST(0.9637155 AS DOUBLE PRECISION) * "IL"."PC7" + CAST(0.1815289 AS DOUBLE PRECISION) AS "NEUR_1_7", CAST(3.297666 AS DOUBLE PRECISION) * "IL"."PC1" + CAST(0.4546855 AS DOUBLE PRECISION) * "IL"."PC2" + CAST(0.6093639 AS DOUBLE PRECISION) * "IL"."PC3" + CAST(2.272446 AS DOUBLE PRECISION) * "IL"."PC4" + CAST(-3.149615 AS DOUBLE PRECISION) * "IL"."PC5" + CAST(1.952807 AS DOUBLE PRECISION) * "IL"."PC6" + CAST(0.964679 AS DOUBLE PRECISION) * "IL"."PC7" + CAST(-0.9210666 AS DOUBLE PRECISION) AS "NEUR_1_8", CAST(-4.457515 AS DOUBLE PRECISION) * "IL"."PC1" + CAST(1.887777 AS DOUBLE PRECISION) * "IL"."PC2" + CAST(1.873296 AS DOUBLE PRECISION) * "IL"."PC3" + CAST(-0.3947702 AS DOUBLE PRECISION) * "IL"."PC4" + CAST(0.03794934 AS DOUBLE PRECISION) * "IL"."PC5" + CAST(0.6386019 AS DOUBLE PRECISION) * "IL"."PC6" + CAST(-0.7770899 AS DOUBLE PRECISION) * "IL"."PC7" + CAST(-1.839816 AS DOUBLE PRECISION) AS "NEUR_1_9", CAST(-4.608675 AS DOUBLE PRECISION) * "IL"."PC1" + CAST(0.5117683 AS DOUBLE PRECISION) * "IL"."PC2" + CAST(0.7074803 AS DOUBLE PRECISION) * "IL"."PC3" + CAST(1.917331 AS DOUBLE PRECISION) * "IL"."PC4" + CAST(2.954067 AS DOUBLE PRECISION) * "IL"."PC5" + CAST(-2.747645 AS DOUBLE PRECISION) * "IL"."PC6" + CAST(0.8874437 AS DOUBLE PRECISION) * "IL"."PC7" + CAST(-1.175729 AS DOUBLE PRECISION) AS "NEUR_1_10", CAST(3.089574 AS DOUBLE PRECISION) * "IL"."PC1" + CAST(-1.480684 AS DOUBLE PRECISION) * "IL"."PC2" + CAST(-1.349558 AS DOUBLE PRECISION) * "IL"."PC3" + CAST(0.5558124 AS DOUBLE PRECISION) * "IL"."PC4" + CAST(-0.3574827 AS DOUBLE PRECISION) * "IL"."PC5" + CAST(-0.6249397 AS DOUBLE PRECISION) * "IL"."PC6" + CAST(0.9833712 AS DOUBLE PRECISION) * "IL"."PC7" + CAST(1.221207 AS DOUBLE PRECISION) AS "NEUR_1_11", CAST(-0.3501488 AS DOUBLE PRECISION) * "IL"."PC1" + CAST(0.1976878 AS DOUBLE PRECISION) * "IL"."PC2" + CAST(2.334814 AS DOUBLE PRECISION) * "IL"."PC3" + CAST(-3.252734 AS DOUBLE PRECISION) * "IL"."PC4" + CAST(-2.250592 AS DOUBLE PRECISION) * "IL"."PC5" + CAST(0.6504985 AS DOUBLE PRECISION) * "IL"."PC6" + CAST(0.2550863 AS DOUBLE PRECISION) * "IL"."PC7" + CAST(-1.221383 AS DOUBLE PRECISION) AS "NEUR_1_12" 
FROM "IL"), 
"HL_1_logistic" AS 
(SELECT "HL_BA_1"."KEY" AS "KEY", CAST(1.0 AS DOUBLE PRECISION) / (CAST(1.0 AS DOUBLE PRECISION) + exp(least(CAST(100.0 AS DOUBLE PRECISION), greatest(-CAST(100.0 AS DOUBLE PRECISION), -"HL_BA_1"."NEUR_1_1")))) AS "NEUR_1_1", CAST(1.0 AS DOUBLE PRECISION) / (CAST(1.0 AS DOUBLE PRECISION) + exp(least(CAST(100.0 AS DOUBLE PRECISION), greatest(-CAST(100.0 AS DOUBLE PRECISION), -"HL_BA_1"."NEUR_1_2")))) AS "NEUR_1_2", CAST(1.0 AS DOUBLE PRECISION) / (CAST(1.0 AS DOUBLE PRECISION) + exp(least(CAST(100.0 AS DOUBLE PRECISION), greatest(-CAST(100.0 AS DOUBLE PRECISION), -"HL_BA_1"."NEUR_1_3")))) AS "NEUR_1_3", CAST(1.0 AS DOUBLE PRECISION) / (CAST(1.0 AS DOUBLE PRECISION) + exp(least(CAST(100.0 AS DOUBLE PRECISION), greatest(-CAST(100.0 AS DOUBLE PRECISION), -"HL_BA_1"."NEUR_1_4")))) AS "NEUR_1_4", CAST(1.0 AS DOUBLE PRECISION) / (CAST(1.0 AS DOUBLE PRECISION) + exp(least(CAST(100.0 AS DOUBLE PRECISION), greatest(-CAST(100.0 AS DOUBLE PRECISION), -"HL_BA_1"."NEUR_1_5")))) AS "NEUR_1_5", CAST(1.0 AS DOUBLE PRECISION) / (CAST(1.0 AS DOUBLE PRECISION) + exp(least(CAST(100.0 AS DOUBLE PRECISION), greatest(-CAST(100.0 AS DOUBLE PRECISION), -"HL_BA_1"."NEUR_1_6")))) AS "NEUR_1_6", CAST(1.0 AS DOUBLE PRECISION) / (CAST(1.0 AS DOUBLE PRECISION) + exp(least(CAST(100.0 AS DOUBLE PRECISION), greatest(-CAST(100.0 AS DOUBLE PRECISION), -"HL_BA_1"."NEUR_1_7")))) AS "NEUR_1_7", CAST(1.0 AS DOUBLE PRECISION) / (CAST(1.0 AS DOUBLE PRECISION) + exp(least(CAST(100.0 AS DOUBLE PRECISION), greatest(-CAST(100.0 AS DOUBLE PRECISION), -"HL_BA_1"."NEUR_1_8")))) AS "NEUR_1_8", CAST(1.0 AS DOUBLE PRECISION) / (CAST(1.0 AS DOUBLE PRECISION) + exp(least(CAST(100.0 AS DOUBLE PRECISION), greatest(-CAST(100.0 AS DOUBLE PRECISION), -"HL_BA_1"."NEUR_1_9")))) AS "NEUR_1_9", CAST(1.0 AS DOUBLE PRECISION) / (CAST(1.0 AS DOUBLE PRECISION) + exp(least(CAST(100.0 AS DOUBLE PRECISION), greatest(-CAST(100.0 AS DOUBLE PRECISION), -"HL_BA_1"."NEUR_1_10")))) AS "NEUR_1_10", CAST(1.0 AS DOUBLE PRECISION) / (CAST(1.0 AS DOUBLE PRECISION) + exp(least(CAST(100.0 AS DOUBLE PRECISION), greatest(-CAST(100.0 AS DOUBLE PRECISION), -"HL_BA_1"."NEUR_1_11")))) AS "NEUR_1_11", CAST(1.0 AS DOUBLE PRECISION) / (CAST(1.0 AS DOUBLE PRECISION) + exp(least(CAST(100.0 AS DOUBLE PRECISION), greatest(-CAST(100.0 AS DOUBLE PRECISION), -"HL_BA_1"."NEUR_1_12")))) AS "NEUR_1_12" 
FROM "HL_BA_1"), 
"HL_1_logistic_1" AS 
(SELECT "HL_1_logistic"."KEY" AS "KEY", "HL_1_logistic"."NEUR_1_1" AS "NEUR_1_1", "HL_1_logistic"."NEUR_1_2" AS "NEUR_1_2", "HL_1_logistic"."NEUR_1_3" AS "NEUR_1_3", "HL_1_logistic"."NEUR_1_4" AS "NEUR_1_4", "HL_1_logistic"."NEUR_1_5" AS "NEUR_1_5", "HL_1_logistic"."NEUR_1_6" AS "NEUR_1_6", "HL_1_logistic"."NEUR_1_7" AS "NEUR_1_7", "HL_1_logistic"."NEUR_1_8" AS "NEUR_1_8", "HL_1_logistic"."NEUR_1_9" AS "NEUR_1_9", "HL_1_logistic"."NEUR_1_10" AS "NEUR_1_10", "HL_1_logistic"."NEUR_1_11" AS "NEUR_1_11", "HL_1_logistic"."NEUR_1_12" AS "NEUR_1_12" 
FROM "HL_1_logistic"), 
"OL_BA" AS 
(SELECT "HL_1_logistic_1"."KEY" AS "KEY", CAST(4.334979 AS DOUBLE PRECISION) * "HL_1_logistic_1"."NEUR_1_1" + CAST(-10.73098 AS DOUBLE PRECISION) * "HL_1_logistic_1"."NEUR_1_2" + CAST(-0.3437471 AS DOUBLE PRECISION) * "HL_1_logistic_1"."NEUR_1_3" + CAST(8.18088 AS DOUBLE PRECISION) * "HL_1_logistic_1"."NEUR_1_4" + CAST(8.32675 AS DOUBLE PRECISION) * "HL_1_logistic_1"."NEUR_1_5" + CAST(10.68226 AS DOUBLE PRECISION) * "HL_1_logistic_1"."NEUR_1_6" + CAST(-5.505124 AS DOUBLE PRECISION) * "HL_1_logistic_1"."NEUR_1_7" + CAST(-8.787587 AS DOUBLE PRECISION) * "HL_1_logistic_1"."NEUR_1_8" + CAST(5.391638 AS DOUBLE PRECISION) * "HL_1_logistic_1"."NEUR_1_9" + CAST(-6.405681 AS DOUBLE PRECISION) * "HL_1_logistic_1"."NEUR_1_10" + CAST(-3.318527 AS DOUBLE PRECISION) * "HL_1_logistic_1"."NEUR_1_11" + CAST(-4.045238 AS DOUBLE PRECISION) * "HL_1_logistic_1"."NEUR_1_12" + CAST(3.08585 AS DOUBLE PRECISION) AS "NEUR_2_1" 
FROM "HL_1_logistic_1"), 
"OL_softmax" AS 
(SELECT "OL_BA"."KEY" AS "KEY", "OL_BA"."NEUR_2_1" AS "NEUR_2_1" 
FROM "OL_BA"), 
"OL_softmax_1" AS 
(SELECT "OL_softmax"."KEY" AS "KEY", "OL_softmax"."NEUR_2_1" AS "NEUR_2_1" 
FROM "OL_softmax"), 
orig_cte AS 
(SELECT "OL_softmax_1"."KEY" AS "KEY", CAST(NULL AS DOUBLE PRECISION) AS "Score_0", CAST(NULL AS DOUBLE PRECISION) AS "Score_1", CAST(1.0 AS DOUBLE PRECISION) - "OL_softmax_1"."NEUR_2_1" AS "Proba_0", "OL_softmax_1"."NEUR_2_1" AS "Proba_1", CAST(NULL AS DOUBLE PRECISION) AS "LogProba_0", CAST(NULL AS DOUBLE PRECISION) AS "LogProba_1", CAST(NULL AS BIGINT) AS "Decision", CAST(NULL AS DOUBLE PRECISION) AS "DecisionProba" 
FROM "OL_softmax_1"), 
score_class_union AS 
(SELECT scu."KEY_u" AS "KEY_u", scu."class" AS "class", scu."LogProba" AS "LogProba", scu."Proba" AS "Proba", scu."Score" AS "Score" 
FROM (SELECT orig_cte."KEY" AS "KEY_u", 0 AS "class", orig_cte."LogProba_0" AS "LogProba", orig_cte."Proba_0" AS "Proba", orig_cte."Score_0" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY_u", 1 AS "class", orig_cte."LogProba_1" AS "LogProba", orig_cte."Proba_1" AS "Proba", orig_cte."Score_1" AS "Score" 
FROM orig_cte) AS scu), 
score_max AS 
(SELECT orig_cte."KEY" AS "KEY", orig_cte."Score_0" AS "Score_0", orig_cte."Score_1" AS "Score_1", orig_cte."Proba_0" AS "Proba_0", orig_cte."Proba_1" AS "Proba_1", orig_cte."LogProba_0" AS "LogProba_0", orig_cte."LogProba_1" AS "LogProba_1", orig_cte."Decision" AS "Decision", orig_cte."DecisionProba" AS "DecisionProba", max_select."KEY_m" AS "KEY_m", max_select."max_Proba" AS "max_Proba" 
FROM orig_cte LEFT OUTER JOIN (SELECT score_class_union."KEY_u" AS "KEY_m", max(score_class_union."Proba") AS "max_Proba" 
FROM score_class_union GROUP BY score_class_union."KEY_u") AS max_select ON orig_cte."KEY" = max_select."KEY_m"), 
union_with_max AS 
(SELECT score_class_union."KEY_u" AS "KEY_u", score_class_union."class" AS "class", score_class_union."LogProba" AS "LogProba", score_class_union."Proba" AS "Proba", score_class_union."Score" AS "Score", score_max."KEY" AS "KEY", score_max."Score_0" AS "Score_0", score_max."Score_1" AS "Score_1", score_max."Proba_0" AS "Proba_0", score_max."Proba_1" AS "Proba_1", score_max."LogProba_0" AS "LogProba_0", score_max."LogProba_1" AS "LogProba_1", score_max."Decision" AS "Decision", score_max."DecisionProba" AS "DecisionProba", score_max."KEY_m" AS "KEY_m", score_max."max_Proba" AS "max_Proba" 
FROM score_class_union LEFT OUTER JOIN score_max ON score_class_union."KEY_u" = score_max."KEY"), 
arg_max_cte AS 
(SELECT score_max."KEY" AS "KEY", score_max."Score_0" AS "Score_0", score_max."Score_1" AS "Score_1", score_max."Proba_0" AS "Proba_0", score_max."Proba_1" AS "Proba_1", score_max."LogProba_0" AS "LogProba_0", score_max."LogProba_1" AS "LogProba_1", score_max."Decision" AS "Decision", score_max."DecisionProba" AS "DecisionProba", score_max."KEY_m" AS "KEY_m", score_max."max_Proba" AS "max_Proba", "arg_max_t_Proba"."KEY_Proba" AS "KEY_Proba", "arg_max_t_Proba"."arg_max_Proba" AS "arg_max_Proba" 
FROM score_max LEFT OUTER JOIN (SELECT union_with_max."KEY" AS "KEY_Proba", max(union_with_max."class") AS "arg_max_Proba" 
FROM union_with_max 
WHERE union_with_max."max_Proba" <= union_with_max."Proba" GROUP BY union_with_max."KEY") AS "arg_max_t_Proba" ON score_max."KEY" = "arg_max_t_Proba"."KEY_Proba")
 SELECT arg_max_cte."KEY" AS "KEY", arg_max_cte."Score_0" AS "Score_0", arg_max_cte."Score_1" AS "Score_1", arg_max_cte."Proba_0" AS "Proba_0", arg_max_cte."Proba_1" AS "Proba_1", CASE WHEN (arg_max_cte."Proba_0" IS NULL OR arg_max_cte."Proba_0" > CAST(0.0 AS DOUBLE PRECISION)) THEN ln(arg_max_cte."Proba_0") ELSE -1.79769313486231e+308 END AS "LogProba_0", CASE WHEN (arg_max_cte."Proba_1" IS NULL OR arg_max_cte."Proba_1" > CAST(0.0 AS DOUBLE PRECISION)) THEN ln(arg_max_cte."Proba_1") ELSE -1.79769313486231e+308 END AS "LogProba_1", arg_max_cte."arg_max_Proba" AS "Decision", arg_max_cte."max_Proba" AS "DecisionProba" 
FROM arg_max_cte