-- This SQL code was generated by sklearn2sql (development version).
-- Copyright 2018

-- Model : CaretRegressor_nnet_pca
-- Dataset : freidman3
-- Database : teradata


-- This SQL code can contain one or more statements, to be executed in the order they appear in this file.



-- Model deployment code

WITH "ADS_sca_1_OUT" AS 
(SELECT "ADS"."KEY" AS "KEY", (CAST("ADS"."Feature_0" AS DOUBLE PRECISION) - CAST(43.791281222074 AS DOUBLE PRECISION)) / CAST(26.1998878150635 AS DOUBLE PRECISION) AS "Feature_0", (CAST("ADS"."Feature_1" AS DOUBLE PRECISION) - CAST(945.96728330844 AS DOUBLE PRECISION)) / CAST(464.3666952541536 AS DOUBLE PRECISION) AS "Feature_1", (CAST("ADS"."Feature_2" AS DOUBLE PRECISION) - CAST(0.531000909997521 AS DOUBLE PRECISION)) / CAST(0.292017174945916 AS DOUBLE PRECISION) AS "Feature_2", (CAST("ADS"."Feature_3" AS DOUBLE PRECISION) - CAST(6.139967152050498 AS DOUBLE PRECISION)) / CAST(3.092304925382 AS DOUBLE PRECISION) AS "Feature_3" 
FROM freidman3 AS "ADS"), 
"ADS_pre_1_OUT" AS 
(SELECT "ADS_sca_1_OUT"."KEY" AS "KEY", "ADS_sca_1_OUT"."Feature_0" * CAST(-0.61216507491007 AS DOUBLE PRECISION) + "ADS_sca_1_OUT"."Feature_1" * CAST(0.546478290332943 AS DOUBLE PRECISION) + "ADS_sca_1_OUT"."Feature_2" * CAST(-0.570867748564476 AS DOUBLE PRECISION) + "ADS_sca_1_OUT"."Feature_3" * CAST(-0.026933490380143 AS DOUBLE PRECISION) AS "PC1", "ADS_sca_1_OUT"."Feature_0" * CAST(0.488881338042008 AS DOUBLE PRECISION) + "ADS_sca_1_OUT"."Feature_1" * CAST(0.274519258456139 AS DOUBLE PRECISION) + "ADS_sca_1_OUT"."Feature_2" * CAST(-0.223844999535911 AS DOUBLE PRECISION) + "ADS_sca_1_OUT"."Feature_3" * CAST(-0.797199868435587 AS DOUBLE PRECISION) AS "PC2", "ADS_sca_1_OUT"."Feature_0" * CAST(-0.024686176636209 AS DOUBLE PRECISION) + "ADS_sca_1_OUT"."Feature_1" * CAST(0.709191857651851 AS DOUBLE PRECISION) + "ADS_sca_1_OUT"."Feature_2" * CAST(0.703881747208946 AS DOUBLE PRECISION) + "ADS_sca_1_OUT"."Feature_3" * CAST(0.031432271147406 AS DOUBLE PRECISION) AS "PC3", "ADS_sca_1_OUT"."Feature_0" * CAST(-0.620998833378688 AS DOUBLE PRECISION) + "ADS_sca_1_OUT"."Feature_1" * CAST(-0.350781362064452 AS DOUBLE PRECISION) + "ADS_sca_1_OUT"."Feature_2" * CAST(0.358544161544677 AS DOUBLE PRECISION) + "ADS_sca_1_OUT"."Feature_3" * CAST(-0.602294752752124 AS DOUBLE PRECISION) AS "PC4" 
FROM "ADS_sca_1_OUT"), 
"IL" AS 
(SELECT "ADS_pre_1_OUT"."KEY" AS "KEY", CAST("ADS_pre_1_OUT"."PC1" AS DOUBLE PRECISION) AS "PC1", CAST("ADS_pre_1_OUT"."PC2" AS DOUBLE PRECISION) AS "PC2", CAST("ADS_pre_1_OUT"."PC3" AS DOUBLE PRECISION) AS "PC3", CAST("ADS_pre_1_OUT"."PC4" AS DOUBLE PRECISION) AS "PC4" 
FROM "ADS_pre_1_OUT"), 
"HL_BA_1" AS 
(SELECT "IL"."KEY" AS "KEY", CAST(-0.6219924 AS DOUBLE PRECISION) * "IL"."PC1" + CAST(0.168477 AS DOUBLE PRECISION) * "IL"."PC2" + CAST(-0.5732471 AS DOUBLE PRECISION) * "IL"."PC3" + CAST(-0.1915444 AS DOUBLE PRECISION) * "IL"."PC4" + CAST(-1.464144 AS DOUBLE PRECISION) AS "NEUR_1_1", CAST(2.5014 AS DOUBLE PRECISION) * "IL"."PC1" + CAST(-2.777177 AS DOUBLE PRECISION) * "IL"."PC2" + CAST(-1.66772 AS DOUBLE PRECISION) * "IL"."PC3" + CAST(2.171119 AS DOUBLE PRECISION) * "IL"."PC4" + CAST(-2.985883 AS DOUBLE PRECISION) AS "NEUR_1_2", CAST(-1.003229 AS DOUBLE PRECISION) * "IL"."PC1" + CAST(0.3027428 AS DOUBLE PRECISION) * "IL"."PC2" + CAST(-0.8674886 AS DOUBLE PRECISION) * "IL"."PC3" + CAST(-0.3188034 AS DOUBLE PRECISION) * "IL"."PC4" + CAST(1.745336 AS DOUBLE PRECISION) AS "NEUR_1_3", CAST(-0.1132153 AS DOUBLE PRECISION) * "IL"."PC1" + CAST(-1.458279 AS DOUBLE PRECISION) * "IL"."PC2" + CAST(-0.4840396 AS DOUBLE PRECISION) * "IL"."PC3" + CAST(0.9287544 AS DOUBLE PRECISION) * "IL"."PC4" + CAST(-0.4297005 AS DOUBLE PRECISION) AS "NEUR_1_4", CAST(-0.6777764 AS DOUBLE PRECISION) * "IL"."PC1" + CAST(-0.5765287 AS DOUBLE PRECISION) * "IL"."PC2" + CAST(-1.045062 AS DOUBLE PRECISION) * "IL"."PC3" + CAST(0.1307895 AS DOUBLE PRECISION) * "IL"."PC4" + CAST(-1.770522 AS DOUBLE PRECISION) AS "NEUR_1_5", CAST(0.03241388 AS DOUBLE PRECISION) * "IL"."PC1" + CAST(1.355312 AS DOUBLE PRECISION) * "IL"."PC2" + CAST(0.1008357 AS DOUBLE PRECISION) * "IL"."PC3" + CAST(-0.7541333 AS DOUBLE PRECISION) * "IL"."PC4" + CAST(1.096559 AS DOUBLE PRECISION) AS "NEUR_1_6", CAST(-0.3600481 AS DOUBLE PRECISION) * "IL"."PC1" + CAST(1.084708 AS DOUBLE PRECISION) * "IL"."PC2" + CAST(-1.618792 AS DOUBLE PRECISION) * "IL"."PC3" + CAST(1.154593 AS DOUBLE PRECISION) * "IL"."PC4" + CAST(-1.115651 AS DOUBLE PRECISION) AS "NEUR_1_7", CAST(-1.647509 AS DOUBLE PRECISION) * "IL"."PC1" + CAST(-0.5604141 AS DOUBLE PRECISION) * "IL"."PC2" + CAST(-0.8951745 AS DOUBLE PRECISION) * "IL"."PC3" + CAST(0.4947589 AS DOUBLE PRECISION) * "IL"."PC4" + CAST(-1.251313 AS DOUBLE PRECISION) AS "NEUR_1_8", CAST(-3.56474 AS DOUBLE PRECISION) * "IL"."PC1" + CAST(-2.038344 AS DOUBLE PRECISION) * "IL"."PC2" + CAST(4.5974 AS DOUBLE PRECISION) * "IL"."PC3" + CAST(2.917817 AS DOUBLE PRECISION) * "IL"."PC4" + CAST(12.85164 AS DOUBLE PRECISION) AS "NEUR_1_9", CAST(0.4318511 AS DOUBLE PRECISION) * "IL"."PC1" + CAST(2.126435 AS DOUBLE PRECISION) * "IL"."PC2" + CAST(-0.1635253 AS DOUBLE PRECISION) * "IL"."PC3" + CAST(0.6792771 AS DOUBLE PRECISION) * "IL"."PC4" + CAST(-0.7184859 AS DOUBLE PRECISION) AS "NEUR_1_10", CAST(0.6194869 AS DOUBLE PRECISION) * "IL"."PC1" + CAST(-1.249888 AS DOUBLE PRECISION) * "IL"."PC2" + CAST(0.8858053 AS DOUBLE PRECISION) * "IL"."PC3" + CAST(0.5228495 AS DOUBLE PRECISION) * "IL"."PC4" + CAST(-1.745916 AS DOUBLE PRECISION) AS "NEUR_1_11", CAST(-0.2319322 AS DOUBLE PRECISION) * "IL"."PC1" + CAST(1.723583 AS DOUBLE PRECISION) * "IL"."PC2" + CAST(2.028785 AS DOUBLE PRECISION) * "IL"."PC3" + CAST(-2.838761 AS DOUBLE PRECISION) * "IL"."PC4" + CAST(2.275523 AS DOUBLE PRECISION) AS "NEUR_1_12" 
FROM "IL"), 
"HL_1_logistic" AS 
(SELECT "HL_BA_1"."KEY" AS "KEY", CAST(1.0 AS DOUBLE PRECISION) / (CAST(1.0 AS DOUBLE PRECISION) + exp(least(CAST(100.0 AS DOUBLE PRECISION), greatest(-CAST(100.0 AS DOUBLE PRECISION), -"HL_BA_1"."NEUR_1_1")))) AS "NEUR_1_1", CAST(1.0 AS DOUBLE PRECISION) / (CAST(1.0 AS DOUBLE PRECISION) + exp(least(CAST(100.0 AS DOUBLE PRECISION), greatest(-CAST(100.0 AS DOUBLE PRECISION), -"HL_BA_1"."NEUR_1_2")))) AS "NEUR_1_2", CAST(1.0 AS DOUBLE PRECISION) / (CAST(1.0 AS DOUBLE PRECISION) + exp(least(CAST(100.0 AS DOUBLE PRECISION), greatest(-CAST(100.0 AS DOUBLE PRECISION), -"HL_BA_1"."NEUR_1_3")))) AS "NEUR_1_3", CAST(1.0 AS DOUBLE PRECISION) / (CAST(1.0 AS DOUBLE PRECISION) + exp(least(CAST(100.0 AS DOUBLE PRECISION), greatest(-CAST(100.0 AS DOUBLE PRECISION), -"HL_BA_1"."NEUR_1_4")))) AS "NEUR_1_4", CAST(1.0 AS DOUBLE PRECISION) / (CAST(1.0 AS DOUBLE PRECISION) + exp(least(CAST(100.0 AS DOUBLE PRECISION), greatest(-CAST(100.0 AS DOUBLE PRECISION), -"HL_BA_1"."NEUR_1_5")))) AS "NEUR_1_5", CAST(1.0 AS DOUBLE PRECISION) / (CAST(1.0 AS DOUBLE PRECISION) + exp(least(CAST(100.0 AS DOUBLE PRECISION), greatest(-CAST(100.0 AS DOUBLE PRECISION), -"HL_BA_1"."NEUR_1_6")))) AS "NEUR_1_6", CAST(1.0 AS DOUBLE PRECISION) / (CAST(1.0 AS DOUBLE PRECISION) + exp(least(CAST(100.0 AS DOUBLE PRECISION), greatest(-CAST(100.0 AS DOUBLE PRECISION), -"HL_BA_1"."NEUR_1_7")))) AS "NEUR_1_7", CAST(1.0 AS DOUBLE PRECISION) / (CAST(1.0 AS DOUBLE PRECISION) + exp(least(CAST(100.0 AS DOUBLE PRECISION), greatest(-CAST(100.0 AS DOUBLE PRECISION), -"HL_BA_1"."NEUR_1_8")))) AS "NEUR_1_8", CAST(1.0 AS DOUBLE PRECISION) / (CAST(1.0 AS DOUBLE PRECISION) + exp(least(CAST(100.0 AS DOUBLE PRECISION), greatest(-CAST(100.0 AS DOUBLE PRECISION), -"HL_BA_1"."NEUR_1_9")))) AS "NEUR_1_9", CAST(1.0 AS DOUBLE PRECISION) / (CAST(1.0 AS DOUBLE PRECISION) + exp(least(CAST(100.0 AS DOUBLE PRECISION), greatest(-CAST(100.0 AS DOUBLE PRECISION), -"HL_BA_1"."NEUR_1_10")))) AS "NEUR_1_10", CAST(1.0 AS DOUBLE PRECISION) / (CAST(1.0 AS DOUBLE PRECISION) + exp(least(CAST(100.0 AS DOUBLE PRECISION), greatest(-CAST(100.0 AS DOUBLE PRECISION), -"HL_BA_1"."NEUR_1_11")))) AS "NEUR_1_11", CAST(1.0 AS DOUBLE PRECISION) / (CAST(1.0 AS DOUBLE PRECISION) + exp(least(CAST(100.0 AS DOUBLE PRECISION), greatest(-CAST(100.0 AS DOUBLE PRECISION), -"HL_BA_1"."NEUR_1_12")))) AS "NEUR_1_12" 
FROM "HL_BA_1"), 
"HL_1_logistic_1" AS 
(SELECT "HL_1_logistic"."KEY" AS "KEY", "HL_1_logistic"."NEUR_1_1" AS "NEUR_1_1", "HL_1_logistic"."NEUR_1_2" AS "NEUR_1_2", "HL_1_logistic"."NEUR_1_3" AS "NEUR_1_3", "HL_1_logistic"."NEUR_1_4" AS "NEUR_1_4", "HL_1_logistic"."NEUR_1_5" AS "NEUR_1_5", "HL_1_logistic"."NEUR_1_6" AS "NEUR_1_6", "HL_1_logistic"."NEUR_1_7" AS "NEUR_1_7", "HL_1_logistic"."NEUR_1_8" AS "NEUR_1_8", "HL_1_logistic"."NEUR_1_9" AS "NEUR_1_9", "HL_1_logistic"."NEUR_1_10" AS "NEUR_1_10", "HL_1_logistic"."NEUR_1_11" AS "NEUR_1_11", "HL_1_logistic"."NEUR_1_12" AS "NEUR_1_12" 
FROM "HL_1_logistic"), 
"OL_BA" AS 
(SELECT "HL_1_logistic_1"."KEY" AS "KEY", CAST(-1.210361 AS DOUBLE PRECISION) * "HL_1_logistic_1"."NEUR_1_1" + CAST(0.1906166 AS DOUBLE PRECISION) * "HL_1_logistic_1"."NEUR_1_2" + CAST(-0.4647677 AS DOUBLE PRECISION) * "HL_1_logistic_1"."NEUR_1_3" + CAST(-1.014743 AS DOUBLE PRECISION) * "HL_1_logistic_1"."NEUR_1_4" + CAST(-0.7366278 AS DOUBLE PRECISION) * "HL_1_logistic_1"."NEUR_1_5" + CAST(-1.904412 AS DOUBLE PRECISION) * "HL_1_logistic_1"."NEUR_1_6" + CAST(0.4120107 AS DOUBLE PRECISION) * "HL_1_logistic_1"."NEUR_1_7" + CAST(0.3739939 AS DOUBLE PRECISION) * "HL_1_logistic_1"."NEUR_1_8" + CAST(3.882804 AS DOUBLE PRECISION) * "HL_1_logistic_1"."NEUR_1_9" + CAST(-0.3107393 AS DOUBLE PRECISION) * "HL_1_logistic_1"."NEUR_1_10" + CAST(-1.048682 AS DOUBLE PRECISION) * "HL_1_logistic_1"."NEUR_1_11" + CAST(0.3681292 AS DOUBLE PRECISION) * "HL_1_logistic_1"."NEUR_1_12" + CAST(-0.125492 AS DOUBLE PRECISION) AS "NEUR_2_1" 
FROM "HL_1_logistic_1"), 
"OL_identity" AS 
(SELECT "OL_BA"."KEY" AS "KEY", "OL_BA"."NEUR_2_1" AS "NEUR_2_1" 
FROM "OL_BA"), 
"OL_identity_1" AS 
(SELECT "OL_identity"."KEY" AS "KEY", "OL_identity"."NEUR_2_1" AS "NEUR_2_1" 
FROM "OL_identity")
 SELECT "OL_identity_1"."KEY" AS "KEY", "OL_identity_1"."NEUR_2_1" AS "Estimator" 
FROM "OL_identity_1"