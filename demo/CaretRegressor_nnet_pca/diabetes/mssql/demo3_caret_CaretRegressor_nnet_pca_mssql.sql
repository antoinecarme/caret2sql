-- This SQL code was generated by sklearn2sql (development version).
-- Copyright 2018

-- Model : CaretRegressor_nnet_pca
-- Dataset : diabetes
-- Database : mssql


-- This SQL code can contain one or more statements, to be executed in the order they appear in this file.



-- Model deployment code

WITH [ADS_sca_1_OUT] AS 
(SELECT [ADS].[KEY] AS [KEY], (CAST([ADS].[Feature_0] AS FLOAT(53)) - 0.0002686932066652983) / 0.04730915349390602 AS [Feature_0], (CAST([ADS].[Feature_1] AS FLOAT(53)) - 0.0007239580580639588) / 0.047673150284254465 AS [Feature_1], (CAST([ADS].[Feature_2] AS FLOAT(53)) - 0.0007280719825586781) / 0.04700253448417295 AS [Feature_2], (CAST([ADS].[Feature_3] AS FLOAT(53)) - 0.0010135652210843957) / 0.04840388131203584 AS [Feature_3], (CAST([ADS].[Feature_4] AS FLOAT(53)) - 0.0009763580732882078) / 0.04811896752594957 AS [Feature_4], (CAST([ADS].[Feature_5] AS FLOAT(53)) - 0.0017643808242337245) / 0.048129028508581584 AS [Feature_5], (CAST([ADS].[Feature_6] AS FLOAT(53)) - -0.0016512815450565033) / 0.04626798564989309 AS [Feature_6], (CAST([ADS].[Feature_7] AS FLOAT(53)) - 0.0013905501983388132) / 0.04743032244703379 AS [Feature_7], (CAST([ADS].[Feature_8] AS FLOAT(53)) - 0.001272648254809092) / 0.04595800380394428 AS [Feature_8], (CAST([ADS].[Feature_9] AS FLOAT(53)) - 0.0010344250056816262) / 0.04782938024075454 AS [Feature_9] 
FROM diabetes AS [ADS]), 
[ADS_pre_1_OUT] AS 
(SELECT [ADS_sca_1_OUT].[KEY] AS [KEY], [ADS_sca_1_OUT].[Feature_0] * -0.2290778852038531 + [ADS_sca_1_OUT].[Feature_1] * -0.1753752188773297 + [ADS_sca_1_OUT].[Feature_2] * -0.3101462867523008 + [ADS_sca_1_OUT].[Feature_3] * -0.2626680617954629 + [ADS_sca_1_OUT].[Feature_4] * -0.3479056910483734 + [ADS_sca_1_OUT].[Feature_5] * -0.3559311512395374 + [ADS_sca_1_OUT].[Feature_6] * 0.2700667896053253 + [ADS_sca_1_OUT].[Feature_7] * -0.4281896059050315 + [ADS_sca_1_OUT].[Feature_8] * -0.3817554053543343 + [ADS_sca_1_OUT].[Feature_9] * -0.319118586083605 AS [PC1], [ADS_sca_1_OUT].[Feature_0] * 0.09937121658133408 + [ADS_sca_1_OUT].[Feature_1] * -0.3974071373222933 + [ADS_sca_1_OUT].[Feature_2] * -0.0955290657434 + [ADS_sca_1_OUT].[Feature_3] * -0.10428227480233908 + [ADS_sca_1_OUT].[Feature_4] * 0.5519944936080498 + [ADS_sca_1_OUT].[Feature_5] * 0.44169748621486143 + [ADS_sca_1_OUT].[Feature_6] * 0.5359791630654337 + [ADS_sca_1_OUT].[Feature_7] * -0.09747648126824032 + [ADS_sca_1_OUT].[Feature_8] * -0.06464571596604123 + [ADS_sca_1_OUT].[Feature_9] * -0.1069735796588606 AS [PC2], [ADS_sca_1_OUT].[Feature_0] * -0.447334397656141 + [ADS_sca_1_OUT].[Feature_1] * 0.06517171310859735 + [ADS_sca_1_OUT].[Feature_2] * -0.1813228857818792 + [ADS_sca_1_OUT].[Feature_3] * -0.5633053550809429 + [ADS_sca_1_OUT].[Feature_4] * 0.10998840407137493 + [ADS_sca_1_OUT].[Feature_5] * 0.2893639101113097 + [ADS_sca_1_OUT].[Feature_6] * -0.3533722834611607 + [ADS_sca_1_OUT].[Feature_7] * 0.3825782441157001 + [ADS_sca_1_OUT].[Feature_8] * -0.04470455133576475 + [ADS_sca_1_OUT].[Feature_9] * -0.2763840995943125 AS [PC3], [ADS_sca_1_OUT].[Feature_0] * -0.3821475868520689 + [ADS_sca_1_OUT].[Feature_1] * -0.6833479183061256 + [ADS_sca_1_OUT].[Feature_2] * 0.5241820976738465 + [ADS_sca_1_OUT].[Feature_3] * -0.03681239814871951 + [ADS_sca_1_OUT].[Feature_4] * -0.08445010736913261 + [ADS_sca_1_OUT].[Feature_5] * -0.16994357503869012 + [ADS_sca_1_OUT].[Feature_6] * -0.07693340159969728 + [ADS_sca_1_OUT].[Feature_7] * 0.017466366084080358 + [ADS_sca_1_OUT].[Feature_8] * 0.2554449000560565 + [ADS_sca_1_OUT].[Feature_9] * 0.05820877690254081 AS [PC4], [ADS_sca_1_OUT].[Feature_0] * -0.7351365637973705 + [ADS_sca_1_OUT].[Feature_1] * 0.3763855813795456 + [ADS_sca_1_OUT].[Feature_2] * 0.1420393394491647 + [ADS_sca_1_OUT].[Feature_3] * 0.3926718700192453 + [ADS_sca_1_OUT].[Feature_4] * 0.1428650665541864 + [ADS_sca_1_OUT].[Feature_5] * 0.1276726308786394 + [ADS_sca_1_OUT].[Feature_6] * 0.245950649429653 + [ADS_sca_1_OUT].[Feature_7] * -0.1284011919823951 + [ADS_sca_1_OUT].[Feature_8] * -0.1367980851890121 + [ADS_sca_1_OUT].[Feature_9] * 0.1055401494998786 AS [PC5], [ADS_sca_1_OUT].[Feature_0] * -0.12368487725974045 + [ADS_sca_1_OUT].[Feature_1] * -0.06284387588101352 + [ADS_sca_1_OUT].[Feature_2] * -0.2953969232053042 + [ADS_sca_1_OUT].[Feature_3] * -0.3412960311712761 + [ADS_sca_1_OUT].[Feature_4] * -0.01656449034153671 + [ADS_sca_1_OUT].[Feature_5] * -0.04587438751367261 + [ADS_sca_1_OUT].[Feature_6] * 0.08082110381516423 + [ADS_sca_1_OUT].[Feature_7] * -0.030199014358925625 + [ADS_sca_1_OUT].[Feature_8] * -0.0053457810566821425 + [ADS_sca_1_OUT].[Feature_9] * 0.8758760898858822 AS [PC6], [ADS_sca_1_OUT].[Feature_0] * -0.18093645279344808 + [ADS_sca_1_OUT].[Feature_1] * -0.06987137416766502 + [ADS_sca_1_OUT].[Feature_2] * -0.5789173338500514 + [ADS_sca_1_OUT].[Feature_3] * 0.2280204737784956 + [ADS_sca_1_OUT].[Feature_4] * 0.10126984562459923 + [ADS_sca_1_OUT].[Feature_5] * -0.2246202656518164 + [ADS_sca_1_OUT].[Feature_6] * 0.06544614151024082 + [ADS_sca_1_OUT].[Feature_7] * 0.03808580365663454 + [ADS_sca_1_OUT].[Feature_8] * 0.6979315085634531 + [ADS_sca_1_OUT].[Feature_9] * -0.147273260741705 AS [PC7] 
FROM [ADS_sca_1_OUT]), 
[IL] AS 
(SELECT [ADS_pre_1_OUT].[KEY] AS [KEY], CAST([ADS_pre_1_OUT].[PC1] AS FLOAT(53)) AS [PC1], CAST([ADS_pre_1_OUT].[PC2] AS FLOAT(53)) AS [PC2], CAST([ADS_pre_1_OUT].[PC3] AS FLOAT(53)) AS [PC3], CAST([ADS_pre_1_OUT].[PC4] AS FLOAT(53)) AS [PC4], CAST([ADS_pre_1_OUT].[PC5] AS FLOAT(53)) AS [PC5], CAST([ADS_pre_1_OUT].[PC6] AS FLOAT(53)) AS [PC6], CAST([ADS_pre_1_OUT].[PC7] AS FLOAT(53)) AS [PC7] 
FROM [ADS_pre_1_OUT]), 
[HL_BA_1] AS 
(SELECT [IL].[KEY] AS [KEY], -22.92682 * [IL].[PC1] + -31.50302 * [IL].[PC2] + 26.95488 * [IL].[PC3] + 3.995836 * [IL].[PC4] + 14.46083 * [IL].[PC5] + 18.35526 * [IL].[PC6] + -6.582554 * [IL].[PC7] + 49.55489 AS [NEUR_1_1], 25.93593 * [IL].[PC1] + 7.762742 * [IL].[PC2] + 12.19368 * [IL].[PC3] + -1.157029 * [IL].[PC4] + -3.011105 * [IL].[PC5] + -20.86034 * [IL].[PC6] + 2.270724 * [IL].[PC7] + -16.5693 AS [NEUR_1_2], -14.04915 * [IL].[PC1] + -4.317962 * [IL].[PC2] + 3.10069 * [IL].[PC3] + 15.78681 * [IL].[PC4] + -1.971078 * [IL].[PC5] + 4.42799 * [IL].[PC6] + 20.50308 * [IL].[PC7] + 11.4472 AS [NEUR_1_3], -2.052454 * [IL].[PC1] + -10.66806 * [IL].[PC2] + 4.167619 * [IL].[PC3] + 49.5875 * [IL].[PC4] + 0.4202469 * [IL].[PC5] + -46.49401 * [IL].[PC6] + 1.101015 * [IL].[PC7] + -14.6884 AS [NEUR_1_4], -13.22207 * [IL].[PC1] + -9.151609 * [IL].[PC2] + 3.604654 * [IL].[PC3] + -4.504803 * [IL].[PC4] + 11.84707 * [IL].[PC5] + 9.021643 * [IL].[PC6] + -34.79264 * [IL].[PC7] + -37.03954 AS [NEUR_1_5], -8.882186 * [IL].[PC1] + -3.113602 * [IL].[PC2] + -15.90141 * [IL].[PC3] + 12.24224 * [IL].[PC4] + -1.753112 * [IL].[PC5] + 11.7643 * [IL].[PC6] + -9.227787 * [IL].[PC7] + -26.96739 AS [NEUR_1_6], 53.21192 * [IL].[PC1] + 9.844227 * [IL].[PC2] + 4.489492 * [IL].[PC3] + -17.04057 * [IL].[PC4] + -5.439143 * [IL].[PC5] + 30.93597 * [IL].[PC6] + -2.63706 * [IL].[PC7] + -18.08267 AS [NEUR_1_7], -9.220667 * [IL].[PC1] + -8.155644 * [IL].[PC2] + -7.357008 * [IL].[PC3] + 1.664065 * [IL].[PC4] + -4.104615 * [IL].[PC5] + -17.62662 * [IL].[PC6] + 3.189245 * [IL].[PC7] + -11.16958 AS [NEUR_1_8], -16.1132 * [IL].[PC1] + -3.261671 * [IL].[PC2] + -20.42056 * [IL].[PC3] + -3.937752 * [IL].[PC4] + -1.576132 * [IL].[PC5] + 4.378889 * [IL].[PC6] + 3.357876 * [IL].[PC7] + -4.498075 AS [NEUR_1_9], -11.44042 * [IL].[PC1] + -2.442777 * [IL].[PC2] + -6.955322 * [IL].[PC3] + 9.635433 * [IL].[PC4] + -9.657276 * [IL].[PC5] + -11.77846 * [IL].[PC6] + -5.788498 * [IL].[PC7] + 25.29702 AS [NEUR_1_10], 53.81673 * [IL].[PC1] + 16.1637 * [IL].[PC2] + 18.14945 * [IL].[PC3] + -2.095743 * [IL].[PC4] + 4.322729 * [IL].[PC5] + -3.771781 * [IL].[PC6] + -18.60037 * [IL].[PC7] + -13.06638 AS [NEUR_1_11], -7.63126 * [IL].[PC1] + 8.518366 * [IL].[PC2] + 3.237745 * [IL].[PC3] + -1.19054 * [IL].[PC4] + -14.64844 * [IL].[PC5] + 5.685886 * [IL].[PC6] + 7.494803 * [IL].[PC7] + -3.706397 AS [NEUR_1_12] 
FROM [IL]), 
[HL_1_logistic] AS 
(SELECT [HL_BA_1].[KEY] AS [KEY], 1.0 / (1.0 + exp(CASE WHEN (100.0 <= CASE WHEN (-100.0 <= -[HL_BA_1].[NEUR_1_1]) THEN -[HL_BA_1].[NEUR_1_1] ELSE -100.0 END) THEN 100.0 ELSE CASE WHEN (-100.0 <= -[HL_BA_1].[NEUR_1_1]) THEN -[HL_BA_1].[NEUR_1_1] ELSE -100.0 END END)) AS [NEUR_1_1], 1.0 / (1.0 + exp(CASE WHEN (100.0 <= CASE WHEN (-100.0 <= -[HL_BA_1].[NEUR_1_2]) THEN -[HL_BA_1].[NEUR_1_2] ELSE -100.0 END) THEN 100.0 ELSE CASE WHEN (-100.0 <= -[HL_BA_1].[NEUR_1_2]) THEN -[HL_BA_1].[NEUR_1_2] ELSE -100.0 END END)) AS [NEUR_1_2], 1.0 / (1.0 + exp(CASE WHEN (100.0 <= CASE WHEN (-100.0 <= -[HL_BA_1].[NEUR_1_3]) THEN -[HL_BA_1].[NEUR_1_3] ELSE -100.0 END) THEN 100.0 ELSE CASE WHEN (-100.0 <= -[HL_BA_1].[NEUR_1_3]) THEN -[HL_BA_1].[NEUR_1_3] ELSE -100.0 END END)) AS [NEUR_1_3], 1.0 / (1.0 + exp(CASE WHEN (100.0 <= CASE WHEN (-100.0 <= -[HL_BA_1].[NEUR_1_4]) THEN -[HL_BA_1].[NEUR_1_4] ELSE -100.0 END) THEN 100.0 ELSE CASE WHEN (-100.0 <= -[HL_BA_1].[NEUR_1_4]) THEN -[HL_BA_1].[NEUR_1_4] ELSE -100.0 END END)) AS [NEUR_1_4], 1.0 / (1.0 + exp(CASE WHEN (100.0 <= CASE WHEN (-100.0 <= -[HL_BA_1].[NEUR_1_5]) THEN -[HL_BA_1].[NEUR_1_5] ELSE -100.0 END) THEN 100.0 ELSE CASE WHEN (-100.0 <= -[HL_BA_1].[NEUR_1_5]) THEN -[HL_BA_1].[NEUR_1_5] ELSE -100.0 END END)) AS [NEUR_1_5], 1.0 / (1.0 + exp(CASE WHEN (100.0 <= CASE WHEN (-100.0 <= -[HL_BA_1].[NEUR_1_6]) THEN -[HL_BA_1].[NEUR_1_6] ELSE -100.0 END) THEN 100.0 ELSE CASE WHEN (-100.0 <= -[HL_BA_1].[NEUR_1_6]) THEN -[HL_BA_1].[NEUR_1_6] ELSE -100.0 END END)) AS [NEUR_1_6], 1.0 / (1.0 + exp(CASE WHEN (100.0 <= CASE WHEN (-100.0 <= -[HL_BA_1].[NEUR_1_7]) THEN -[HL_BA_1].[NEUR_1_7] ELSE -100.0 END) THEN 100.0 ELSE CASE WHEN (-100.0 <= -[HL_BA_1].[NEUR_1_7]) THEN -[HL_BA_1].[NEUR_1_7] ELSE -100.0 END END)) AS [NEUR_1_7], 1.0 / (1.0 + exp(CASE WHEN (100.0 <= CASE WHEN (-100.0 <= -[HL_BA_1].[NEUR_1_8]) THEN -[HL_BA_1].[NEUR_1_8] ELSE -100.0 END) THEN 100.0 ELSE CASE WHEN (-100.0 <= -[HL_BA_1].[NEUR_1_8]) THEN -[HL_BA_1].[NEUR_1_8] ELSE -100.0 END END)) AS [NEUR_1_8], 1.0 / (1.0 + exp(CASE WHEN (100.0 <= CASE WHEN (-100.0 <= -[HL_BA_1].[NEUR_1_9]) THEN -[HL_BA_1].[NEUR_1_9] ELSE -100.0 END) THEN 100.0 ELSE CASE WHEN (-100.0 <= -[HL_BA_1].[NEUR_1_9]) THEN -[HL_BA_1].[NEUR_1_9] ELSE -100.0 END END)) AS [NEUR_1_9], 1.0 / (1.0 + exp(CASE WHEN (100.0 <= CASE WHEN (-100.0 <= -[HL_BA_1].[NEUR_1_10]) THEN -[HL_BA_1].[NEUR_1_10] ELSE -100.0 END) THEN 100.0 ELSE CASE WHEN (-100.0 <= -[HL_BA_1].[NEUR_1_10]) THEN -[HL_BA_1].[NEUR_1_10] ELSE -100.0 END END)) AS [NEUR_1_10], 1.0 / (1.0 + exp(CASE WHEN (100.0 <= CASE WHEN (-100.0 <= -[HL_BA_1].[NEUR_1_11]) THEN -[HL_BA_1].[NEUR_1_11] ELSE -100.0 END) THEN 100.0 ELSE CASE WHEN (-100.0 <= -[HL_BA_1].[NEUR_1_11]) THEN -[HL_BA_1].[NEUR_1_11] ELSE -100.0 END END)) AS [NEUR_1_11], 1.0 / (1.0 + exp(CASE WHEN (100.0 <= CASE WHEN (-100.0 <= -[HL_BA_1].[NEUR_1_12]) THEN -[HL_BA_1].[NEUR_1_12] ELSE -100.0 END) THEN 100.0 ELSE CASE WHEN (-100.0 <= -[HL_BA_1].[NEUR_1_12]) THEN -[HL_BA_1].[NEUR_1_12] ELSE -100.0 END END)) AS [NEUR_1_12] 
FROM [HL_BA_1]), 
[HL_1_logistic_1] AS 
(SELECT [HL_1_logistic].[KEY] AS [KEY], [HL_1_logistic].[NEUR_1_1] AS [NEUR_1_1], [HL_1_logistic].[NEUR_1_2] AS [NEUR_1_2], [HL_1_logistic].[NEUR_1_3] AS [NEUR_1_3], [HL_1_logistic].[NEUR_1_4] AS [NEUR_1_4], [HL_1_logistic].[NEUR_1_5] AS [NEUR_1_5], [HL_1_logistic].[NEUR_1_6] AS [NEUR_1_6], [HL_1_logistic].[NEUR_1_7] AS [NEUR_1_7], [HL_1_logistic].[NEUR_1_8] AS [NEUR_1_8], [HL_1_logistic].[NEUR_1_9] AS [NEUR_1_9], [HL_1_logistic].[NEUR_1_10] AS [NEUR_1_10], [HL_1_logistic].[NEUR_1_11] AS [NEUR_1_11], [HL_1_logistic].[NEUR_1_12] AS [NEUR_1_12] 
FROM [HL_1_logistic]), 
[OL_BA] AS 
(SELECT [HL_1_logistic_1].[KEY] AS [KEY], 25.00457 * [HL_1_logistic_1].[NEUR_1_1] + 21.08688 * [HL_1_logistic_1].[NEUR_1_2] + 56.64414 * [HL_1_logistic_1].[NEUR_1_3] + 36.86855 * [HL_1_logistic_1].[NEUR_1_4] + 34.03209 * [HL_1_logistic_1].[NEUR_1_5] + 41.82885 * [HL_1_logistic_1].[NEUR_1_6] + 37.96914 * [HL_1_logistic_1].[NEUR_1_7] + 48.34418 * [HL_1_logistic_1].[NEUR_1_8] + 57.93142 * [HL_1_logistic_1].[NEUR_1_9] + 15.41707 * [HL_1_logistic_1].[NEUR_1_10] + 28.83624 * [HL_1_logistic_1].[NEUR_1_11] + 22.27967 * [HL_1_logistic_1].[NEUR_1_12] + -31.24726 AS [NEUR_2_1] 
FROM [HL_1_logistic_1]), 
[OL_identity] AS 
(SELECT [OL_BA].[KEY] AS [KEY], [OL_BA].[NEUR_2_1] AS [NEUR_2_1] 
FROM [OL_BA]), 
[OL_identity_1] AS 
(SELECT [OL_identity].[KEY] AS [KEY], [OL_identity].[NEUR_2_1] AS [NEUR_2_1] 
FROM [OL_identity])
 SELECT [OL_identity_1].[KEY] AS [KEY], [OL_identity_1].[NEUR_2_1] AS [Estimator] 
FROM [OL_identity_1]