-- This SQL code was generated by sklearn2sql (development version).
-- Copyright 2018

-- Model : CaretClassifier_earth
-- Dataset : iris
-- Database : mssql


-- This SQL code can contain one or more statements, to be executed in the order they appear in this file.



-- Model deployment code

WITH earth_input AS 
(SELECT [ADS].[KEY] AS [KEY], CAST([ADS].[Feature_0] AS FLOAT(53)) AS [Feature_0], CAST([ADS].[Feature_1] AS FLOAT(53)) AS [Feature_1], CAST([ADS].[Feature_2] AS FLOAT(53)) AS [Feature_2], CAST([ADS].[Feature_3] AS FLOAT(53)) AS [Feature_3] 
FROM iris AS [ADS]), 
earth_model_cte AS 
(SELECT earth_input.[KEY] AS [KEY], 41.41051746815792 * CASE WHEN (3.9 - earth_input.[Feature_2] <= 0) THEN 0 ELSE 3.9 - earth_input.[Feature_2] END + 1.0916742696901622 * CASE WHEN (earth_input.[Feature_3] - 2.0 <= 0) THEN 0 ELSE earth_input.[Feature_3] - 2.0 END + -0.6470962481520242 * CASE WHEN (earth_input.[Feature_3] - 1.4 <= 0) THEN 0 ELSE earth_input.[Feature_3] - 1.4 END + -0.6289207803667948 * CASE WHEN (earth_input.[Feature_0] - 6.1 <= 0) THEN 0 ELSE earth_input.[Feature_0] - 6.1 END + 4.62752589834204 * CASE WHEN (earth_input.[Feature_2] - 5.1 <= 0) THEN 0 ELSE earth_input.[Feature_2] - 5.1 END + -28.803998540862246 * CASE WHEN (earth_input.[Feature_2] - 4.7 <= 0) THEN 0 ELSE earth_input.[Feature_2] - 4.7 END + 24.996461690247845 * CASE WHEN (earth_input.[Feature_2] - 3.3 <= 0) THEN 0 ELSE earth_input.[Feature_2] - 3.3 END + -59.95228367656241 AS [Score_0], -6.395207315469439 * CASE WHEN (3.9 - earth_input.[Feature_2] <= 0) THEN 0 ELSE 3.9 - earth_input.[Feature_2] END + -56.88781758741218 * CASE WHEN (earth_input.[Feature_3] - 2.0 <= 0) THEN 0 ELSE earth_input.[Feature_3] - 2.0 END + -11.33063537642153 * CASE WHEN (earth_input.[Feature_3] - 1.4 <= 0) THEN 0 ELSE earth_input.[Feature_3] - 1.4 END + 12.361305279700884 * CASE WHEN (earth_input.[Feature_0] - 6.1 <= 0) THEN 0 ELSE earth_input.[Feature_0] - 6.1 END + -105.45956843275327 * CASE WHEN (earth_input.[Feature_2] - 5.1 <= 0) THEN 0 ELSE earth_input.[Feature_2] - 5.1 END + -16.63921624937212 * CASE WHEN (earth_input.[Feature_2] - 4.7 <= 0) THEN 0 ELSE earth_input.[Feature_2] - 4.7 END + -2.6226964767417966 * CASE WHEN (earth_input.[Feature_2] - 3.3 <= 0) THEN 0 ELSE earth_input.[Feature_2] - 3.3 END + 8.10905581702345 AS [Score_1], -144.96926576249902 * CASE WHEN (3.9 - earth_input.[Feature_2] <= 0) THEN 0 ELSE 3.9 - earth_input.[Feature_2] END + 56.55496348523766 * CASE WHEN (earth_input.[Feature_3] - 2.0 <= 0) THEN 0 ELSE earth_input.[Feature_3] - 2.0 END + 14.161242582484396 * CASE WHEN (earth_input.[Feature_3] - 1.4 <= 0) THEN 0 ELSE earth_input.[Feature_3] - 1.4 END + -13.014628435253607 * CASE WHEN (earth_input.[Feature_0] - 6.1 <= 0) THEN 0 ELSE earth_input.[Feature_0] - 6.1 END + 105.38632644998407 * CASE WHEN (earth_input.[Feature_2] - 5.1 <= 0) THEN 0 ELSE earth_input.[Feature_2] - 5.1 END + 27.112019529507016 * CASE WHEN (earth_input.[Feature_2] - 4.7 <= 0) THEN 0 ELSE earth_input.[Feature_2] - 4.7 END + -3.1134722516891964 * CASE WHEN (earth_input.[Feature_2] - 3.3 <= 0) THEN 0 ELSE earth_input.[Feature_2] - 3.3 END + -1.894913056077661 AS [Score_2] 
FROM earth_input), 
earth_model_cte_logistic AS 
(SELECT earth_model_cte.[KEY] AS [KEY], earth_model_cte.[Score_0] AS [Score_0], 1.0 / (1.0 + exp(CASE WHEN (100.0 <= CASE WHEN (-100.0 <= -earth_model_cte.[Score_0]) THEN -earth_model_cte.[Score_0] ELSE -100.0 END) THEN 100.0 ELSE CASE WHEN (-100.0 <= -earth_model_cte.[Score_0]) THEN -earth_model_cte.[Score_0] ELSE -100.0 END END)) AS [Logistic_0], earth_model_cte.[Score_1] AS [Score_1], 1.0 / (1.0 + exp(CASE WHEN (100.0 <= CASE WHEN (-100.0 <= -earth_model_cte.[Score_1]) THEN -earth_model_cte.[Score_1] ELSE -100.0 END) THEN 100.0 ELSE CASE WHEN (-100.0 <= -earth_model_cte.[Score_1]) THEN -earth_model_cte.[Score_1] ELSE -100.0 END END)) AS [Logistic_1], earth_model_cte.[Score_2] AS [Score_2], 1.0 / (1.0 + exp(CASE WHEN (100.0 <= CASE WHEN (-100.0 <= -earth_model_cte.[Score_2]) THEN -earth_model_cte.[Score_2] ELSE -100.0 END) THEN 100.0 ELSE CASE WHEN (-100.0 <= -earth_model_cte.[Score_2]) THEN -earth_model_cte.[Score_2] ELSE -100.0 END END)) AS [Logistic_2] 
FROM earth_model_cte), 
orig_cte AS 
(SELECT earth_model_cte_logistic.[KEY] AS [KEY], earth_model_cte_logistic.[Score_0] AS [Score_0], earth_model_cte_logistic.[Score_1] AS [Score_1], earth_model_cte_logistic.[Score_2] AS [Score_2], earth_model_cte_logistic.[Logistic_0] / (earth_model_cte_logistic.[Logistic_0] + earth_model_cte_logistic.[Logistic_1] + earth_model_cte_logistic.[Logistic_2]) AS [Proba_0], earth_model_cte_logistic.[Logistic_1] / (earth_model_cte_logistic.[Logistic_0] + earth_model_cte_logistic.[Logistic_1] + earth_model_cte_logistic.[Logistic_2]) AS [Proba_1], earth_model_cte_logistic.[Logistic_2] / (earth_model_cte_logistic.[Logistic_0] + earth_model_cte_logistic.[Logistic_1] + earth_model_cte_logistic.[Logistic_2]) AS [Proba_2], CAST(NULL AS FLOAT(53)) AS [LogProba_0], CAST(NULL AS FLOAT(53)) AS [LogProba_1], CAST(NULL AS FLOAT(53)) AS [LogProba_2], CAST(NULL AS BIGINT) AS [Decision], CAST(NULL AS FLOAT(53)) AS [DecisionProba] 
FROM earth_model_cte_logistic), 
score_class_union AS 
(SELECT scu.[KEY_u] AS [KEY_u], scu.class AS class, scu.[LogProba] AS [LogProba], scu.[Proba] AS [Proba], scu.[Score] AS [Score] 
FROM (SELECT orig_cte.[KEY] AS [KEY_u], 0 AS class, orig_cte.[LogProba_0] AS [LogProba], orig_cte.[Proba_0] AS [Proba], orig_cte.[Score_0] AS [Score] 
FROM orig_cte UNION ALL SELECT orig_cte.[KEY] AS [KEY_u], 1 AS class, orig_cte.[LogProba_1] AS [LogProba], orig_cte.[Proba_1] AS [Proba], orig_cte.[Score_1] AS [Score] 
FROM orig_cte UNION ALL SELECT orig_cte.[KEY] AS [KEY_u], 2 AS class, orig_cte.[LogProba_2] AS [LogProba], orig_cte.[Proba_2] AS [Proba], orig_cte.[Score_2] AS [Score] 
FROM orig_cte) AS scu), 
score_max AS 
(SELECT orig_cte.[KEY] AS [KEY], orig_cte.[Score_0] AS [Score_0], orig_cte.[Score_1] AS [Score_1], orig_cte.[Score_2] AS [Score_2], orig_cte.[Proba_0] AS [Proba_0], orig_cte.[Proba_1] AS [Proba_1], orig_cte.[Proba_2] AS [Proba_2], orig_cte.[LogProba_0] AS [LogProba_0], orig_cte.[LogProba_1] AS [LogProba_1], orig_cte.[LogProba_2] AS [LogProba_2], orig_cte.[Decision] AS [Decision], orig_cte.[DecisionProba] AS [DecisionProba], max_select.[KEY_m] AS [KEY_m], max_select.[max_Proba] AS [max_Proba] 
FROM orig_cte LEFT OUTER JOIN (SELECT score_class_union.[KEY_u] AS [KEY_m], max(score_class_union.[Proba]) AS [max_Proba] 
FROM score_class_union GROUP BY score_class_union.[KEY_u]) AS max_select ON orig_cte.[KEY] = max_select.[KEY_m]), 
union_with_max AS 
(SELECT score_class_union.[KEY_u] AS [KEY_u], score_class_union.class AS class, score_class_union.[LogProba] AS [LogProba], score_class_union.[Proba] AS [Proba], score_class_union.[Score] AS [Score], score_max.[KEY] AS [KEY], score_max.[Score_0] AS [Score_0], score_max.[Score_1] AS [Score_1], score_max.[Score_2] AS [Score_2], score_max.[Proba_0] AS [Proba_0], score_max.[Proba_1] AS [Proba_1], score_max.[Proba_2] AS [Proba_2], score_max.[LogProba_0] AS [LogProba_0], score_max.[LogProba_1] AS [LogProba_1], score_max.[LogProba_2] AS [LogProba_2], score_max.[Decision] AS [Decision], score_max.[DecisionProba] AS [DecisionProba], score_max.[KEY_m] AS [KEY_m], score_max.[max_Proba] AS [max_Proba] 
FROM score_class_union LEFT OUTER JOIN score_max ON score_class_union.[KEY_u] = score_max.[KEY]), 
arg_max_cte AS 
(SELECT score_max.[KEY] AS [KEY], score_max.[Score_0] AS [Score_0], score_max.[Score_1] AS [Score_1], score_max.[Score_2] AS [Score_2], score_max.[Proba_0] AS [Proba_0], score_max.[Proba_1] AS [Proba_1], score_max.[Proba_2] AS [Proba_2], score_max.[LogProba_0] AS [LogProba_0], score_max.[LogProba_1] AS [LogProba_1], score_max.[LogProba_2] AS [LogProba_2], score_max.[Decision] AS [Decision], score_max.[DecisionProba] AS [DecisionProba], score_max.[KEY_m] AS [KEY_m], score_max.[max_Proba] AS [max_Proba], [arg_max_t_Proba].[KEY_Proba] AS [KEY_Proba], [arg_max_t_Proba].[arg_max_Proba] AS [arg_max_Proba] 
FROM score_max LEFT OUTER JOIN (SELECT union_with_max.[KEY] AS [KEY_Proba], max(union_with_max.class) AS [arg_max_Proba] 
FROM union_with_max 
WHERE union_with_max.[max_Proba] <= union_with_max.[Proba] GROUP BY union_with_max.[KEY]) AS [arg_max_t_Proba] ON score_max.[KEY] = [arg_max_t_Proba].[KEY_Proba])
 SELECT arg_max_cte.[KEY] AS [KEY], CAST(NULL AS FLOAT(53)) AS [Score_0], CAST(NULL AS FLOAT(53)) AS [Score_1], CAST(NULL AS FLOAT(53)) AS [Score_2], arg_max_cte.[Proba_0] AS [Proba_0], arg_max_cte.[Proba_1] AS [Proba_1], arg_max_cte.[Proba_2] AS [Proba_2], CASE WHEN (arg_max_cte.[Proba_0] IS NULL OR arg_max_cte.[Proba_0] > 0.0) THEN log(arg_max_cte.[Proba_0]) ELSE -1.79769313486231e+308 END AS [LogProba_0], CASE WHEN (arg_max_cte.[Proba_1] IS NULL OR arg_max_cte.[Proba_1] > 0.0) THEN log(arg_max_cte.[Proba_1]) ELSE -1.79769313486231e+308 END AS [LogProba_1], CASE WHEN (arg_max_cte.[Proba_2] IS NULL OR arg_max_cte.[Proba_2] > 0.0) THEN log(arg_max_cte.[Proba_2]) ELSE -1.79769313486231e+308 END AS [LogProba_2], arg_max_cte.[arg_max_Proba] AS [Decision], arg_max_cte.[max_Proba] AS [DecisionProba] 
FROM arg_max_cte