-- This SQL code was generated by sklearn2sql (development version).
-- Copyright 2018

-- Model : CaretClassifier_cforest_pca
-- Dataset : FourClass_100
-- Database : mssql


-- This SQL code can contain one or more statements, to be executed in the order they appear in this file.



-- Model deployment code

WITH [ADS_sca_1_OUT] AS 
(SELECT [ADS].[KEY] AS [KEY], (CAST([ADS].[Feature_0] AS FLOAT(53)) - -0.001480700768971662) / 0.92595830348287 AS [Feature_0], (CAST([ADS].[Feature_1] AS FLOAT(53)) - 0.0859921499068135) / 0.9678055302463062 AS [Feature_1], (CAST([ADS].[Feature_2] AS FLOAT(53)) - -0.006358164676411464) / 0.7932109053222204 AS [Feature_2], (CAST([ADS].[Feature_3] AS FLOAT(53)) - -0.024301807422776336) / 1.0319158502581285 AS [Feature_3], (CAST([ADS].[Feature_4] AS FLOAT(53)) - 0.015786548044298417) / 1.0251624561458146 AS [Feature_4], (CAST([ADS].[Feature_5] AS FLOAT(53)) - -0.13959329445651664) / 0.9233770214090964 AS [Feature_5], (CAST([ADS].[Feature_6] AS FLOAT(53)) - -0.06476745048019887) / 1.0448106927640035 AS [Feature_6], (CAST([ADS].[Feature_7] AS FLOAT(53)) - 0.02557981077409066) / 0.8767917075348788 AS [Feature_7], (CAST([ADS].[Feature_8] AS FLOAT(53)) - -0.03173937260977108) / 1.0217946084600749 AS [Feature_8], (CAST([ADS].[Feature_9] AS FLOAT(53)) - -0.15181414208624883) / 1.0128291727641403 AS [Feature_9], (CAST([ADS].[Feature_10] AS FLOAT(53)) - -0.1324457655849249) / 0.9263700204057728 AS [Feature_10], (CAST([ADS].[Feature_11] AS FLOAT(53)) - 0.044172679762224144) / 0.9100804069939378 AS [Feature_11], (CAST([ADS].[Feature_12] AS FLOAT(53)) - 0.01016594671981003) / 1.2254362934806953 AS [Feature_12], (CAST([ADS].[Feature_13] AS FLOAT(53)) - -0.03645872019103298) / 1.0936113820893048 AS [Feature_13], (CAST([ADS].[Feature_14] AS FLOAT(53)) - 0.06491512811593925) / 1.0328605848642292 AS [Feature_14], (CAST([ADS].[Feature_15] AS FLOAT(53)) - -0.11930146867074025) / 0.9556214594734022 AS [Feature_15], (CAST([ADS].[Feature_16] AS FLOAT(53)) - 0.007738863934852774) / 1.098584531577811 AS [Feature_16], (CAST([ADS].[Feature_17] AS FLOAT(53)) - -0.12267740601477257) / 0.9882166069043372 AS [Feature_17], (CAST([ADS].[Feature_18] AS FLOAT(53)) - 0.019160881669086402) / 1.218102685091075 AS [Feature_18], (CAST([ADS].[Feature_19] AS FLOAT(53)) - -0.26340351121131056) / 0.9858902131802824 AS [Feature_19], (CAST([ADS].[Feature_20] AS FLOAT(53)) - 0.035692361937735194) / 1.1216818851624195 AS [Feature_20], (CAST([ADS].[Feature_21] AS FLOAT(53)) - -0.010021324964069355) / 1.0847605650907812 AS [Feature_21], (CAST([ADS].[Feature_22] AS FLOAT(53)) - -0.12586143877235415) / 1.0333634518333716 AS [Feature_22], (CAST([ADS].[Feature_23] AS FLOAT(53)) - 0.09372773898231132) / 0.9741630781635542 AS [Feature_23], (CAST([ADS].[Feature_24] AS FLOAT(53)) - -0.1687929597880227) / 0.8892293854236001 AS [Feature_24], (CAST([ADS].[Feature_25] AS FLOAT(53)) - 0.10006283199629366) / 0.9197374497538012 AS [Feature_25], (CAST([ADS].[Feature_26] AS FLOAT(53)) - -0.10297858086822652) / 1.081788816429341 AS [Feature_26], (CAST([ADS].[Feature_27] AS FLOAT(53)) - 0.19240514535870407) / 2.100853079747925 AS [Feature_27], (CAST([ADS].[Feature_28] AS FLOAT(53)) - -0.05286643424609242) / 1.0083432891844395 AS [Feature_28], (CAST([ADS].[Feature_29] AS FLOAT(53)) - 0.26246121463661504) / 1.9882315851784689 AS [Feature_29], (CAST([ADS].[Feature_30] AS FLOAT(53)) - 0.0026775751403611808) / 0.8880297543100188 AS [Feature_30], (CAST([ADS].[Feature_31] AS FLOAT(53)) - 0.09707041941284061) / 0.8765779972535335 AS [Feature_31], (CAST([ADS].[Feature_32] AS FLOAT(53)) - -0.03279321985733348) / 0.8791900109780791 AS [Feature_32], (CAST([ADS].[Feature_33] AS FLOAT(53)) - -0.003130273745908918) / 1.0020023336828106 AS [Feature_33], (CAST([ADS].[Feature_34] AS FLOAT(53)) - 0.05344627621627997) / 1.0049768680720197 AS [Feature_34], (CAST([ADS].[Feature_35] AS FLOAT(53)) - -0.18668146437412358) / 1.0326210309115684 AS [Feature_35], (CAST([ADS].[Feature_36] AS FLOAT(53)) - -0.029335964960866205) / 1.04822941631173 AS [Feature_36], (CAST([ADS].[Feature_37] AS FLOAT(53)) - 0.07219772199502425) / 0.8371947933046862 AS [Feature_37], (CAST([ADS].[Feature_38] AS FLOAT(53)) - -0.0007762839781489322) / 0.9717267615118113 AS [Feature_38], (CAST([ADS].[Feature_39] AS FLOAT(53)) - 0.08270823712098281) / 1.0893590927965824 AS [Feature_39], (CAST([ADS].[Feature_40] AS FLOAT(53)) - 0.10432022852347984) / 1.0811181119591708 AS [Feature_40], (CAST([ADS].[Feature_41] AS FLOAT(53)) - 0.0705856638502228) / 1.0045922274173311 AS [Feature_41], (CAST([ADS].[Feature_42] AS FLOAT(53)) - 0.05096693098357383) / 0.8923569847261943 AS [Feature_42], (CAST([ADS].[Feature_43] AS FLOAT(53)) - 0.06607582033678182) / 1.0467120217947248 AS [Feature_43], (CAST([ADS].[Feature_44] AS FLOAT(53)) - -0.07075895636353376) / 2.2500599478541554 AS [Feature_44], (CAST([ADS].[Feature_45] AS FLOAT(53)) - 0.08422536561649956) / 0.957093882108504 AS [Feature_45], (CAST([ADS].[Feature_46] AS FLOAT(53)) - 0.21367580667795613) / 0.995923713179852 AS [Feature_46], (CAST([ADS].[Feature_47] AS FLOAT(53)) - -0.055897457335625) / 1.0446954373743709 AS [Feature_47], (CAST([ADS].[Feature_48] AS FLOAT(53)) - -0.1745303672613982) / 2.012013769513088 AS [Feature_48], (CAST([ADS].[Feature_49] AS FLOAT(53)) - -0.054944001818474) / 1.009435795235302 AS [Feature_49], (CAST([ADS].[Feature_50] AS FLOAT(53)) - -0.5961651261710365) / 2.480464056851398 AS [Feature_50], (CAST([ADS].[Feature_51] AS FLOAT(53)) - 0.5020404526565605) / 2.204444047678582 AS [Feature_51], (CAST([ADS].[Feature_52] AS FLOAT(53)) - -0.052340545201383926) / 0.9898244191641988 AS [Feature_52], (CAST([ADS].[Feature_53] AS FLOAT(53)) - 0.052943076116746576) / 1.8232250794036864 AS [Feature_53], (CAST([ADS].[Feature_54] AS FLOAT(53)) - 0.03835884479069335) / 0.9289837587226172 AS [Feature_54], (CAST([ADS].[Feature_55] AS FLOAT(53)) - -0.13571979014964694) / 0.8724655626760756 AS [Feature_55], (CAST([ADS].[Feature_56] AS FLOAT(53)) - -0.21903068431411832) / 4.1722160476339365 AS [Feature_56], (CAST([ADS].[Feature_57] AS FLOAT(53)) - -0.11917523620293825) / 0.9171225251142694 AS [Feature_57], (CAST([ADS].[Feature_58] AS FLOAT(53)) - 0.38058346912807683) / 3.5822072797925695 AS [Feature_58], (CAST([ADS].[Feature_59] AS FLOAT(53)) - -0.1272092897416851) / 0.934984908692595 AS [Feature_59], (CAST([ADS].[Feature_60] AS FLOAT(53)) - -0.09072936496613784) / 0.9540320523952692 AS [Feature_60], (CAST([ADS].[Feature_61] AS FLOAT(53)) - -0.0391512593795454) / 0.907690390847292 AS [Feature_61], (CAST([ADS].[Feature_62] AS FLOAT(53)) - 0.07075412393313485) / 0.9777620099921152 AS [Feature_62], (CAST([ADS].[Feature_63] AS FLOAT(53)) - 0.10124894587016947) / 0.9452436237984077 AS [Feature_63], (CAST([ADS].[Feature_64] AS FLOAT(53)) - -0.1945661449475579) / 0.9450252540268064 AS [Feature_64], (CAST([ADS].[Feature_65] AS FLOAT(53)) - -0.17594829812612323) / 0.948495216480143 AS [Feature_65], (CAST([ADS].[Feature_66] AS FLOAT(53)) - 0.07473228971855513) / 0.8917571234223504 AS [Feature_66], (CAST([ADS].[Feature_67] AS FLOAT(53)) - 0.0377705562115906) / 1.0282674343590985 AS [Feature_67], (CAST([ADS].[Feature_68] AS FLOAT(53)) - 0.01394708985989173) / 0.9515417533109678 AS [Feature_68], (CAST([ADS].[Feature_69] AS FLOAT(53)) - 0.2582685725145941) / 1.1085118146622406 AS [Feature_69], (CAST([ADS].[Feature_70] AS FLOAT(53)) - 0.02297578623304892) / 0.9248733493369344 AS [Feature_70], (CAST([ADS].[Feature_71] AS FLOAT(53)) - 0.1744543406194953) / 0.9057261470301646 AS [Feature_71], (CAST([ADS].[Feature_72] AS FLOAT(53)) - -0.011413879692078363) / 0.953315887430876 AS [Feature_72], (CAST([ADS].[Feature_73] AS FLOAT(53)) - 0.07898984156871976) / 0.9777727115083872 AS [Feature_73], (CAST([ADS].[Feature_74] AS FLOAT(53)) - 0.0952547273770713) / 0.9658302591076416 AS [Feature_74], (CAST([ADS].[Feature_75] AS FLOAT(53)) - -0.039977768396399) / 1.037299613797794 AS [Feature_75], (CAST([ADS].[Feature_76] AS FLOAT(53)) - -0.020839895874293503) / 0.950103403078872 AS [Feature_76], (CAST([ADS].[Feature_77] AS FLOAT(53)) - -0.07284631986613152) / 0.9151204077438628 AS [Feature_77], (CAST([ADS].[Feature_78] AS FLOAT(53)) - -0.2738995176443437) / 2.0469494906428225 AS [Feature_78], (CAST([ADS].[Feature_79] AS FLOAT(53)) - 0.08057287885287606) / 0.9971363081228324 AS [Feature_79], (CAST([ADS].[Feature_80] AS FLOAT(53)) - -0.0624427424543789) / 0.8155627719222026 AS [Feature_80], (CAST([ADS].[Feature_81] AS FLOAT(53)) - -0.12290855334066893) / 1.0361409602090683 AS [Feature_81], (CAST([ADS].[Feature_82] AS FLOAT(53)) - 0.11639531793890916) / 1.004605211185302 AS [Feature_82], (CAST([ADS].[Feature_83] AS FLOAT(53)) - -0.03350462786128604) / 1.0251129717969392 AS [Feature_83], (CAST([ADS].[Feature_84] AS FLOAT(53)) - -0.03914049968144583) / 0.9069411798500302 AS [Feature_84], (CAST([ADS].[Feature_85] AS FLOAT(53)) - 0.2419390307230517) / 0.9676271858531668 AS [Feature_85], (CAST([ADS].[Feature_86] AS FLOAT(53)) - -0.07389719862221902) / 1.0132985107452888 AS [Feature_86], (CAST([ADS].[Feature_87] AS FLOAT(53)) - 0.1400756228320113) / 0.936469340232026 AS [Feature_87], (CAST([ADS].[Feature_88] AS FLOAT(53)) - 0.27653019351361446) / 1.9558114165722047 AS [Feature_88], (CAST([ADS].[Feature_89] AS FLOAT(53)) - -0.07957147169250892) / 0.9739708522239542 AS [Feature_89], (CAST([ADS].[Feature_90] AS FLOAT(53)) - 0.1629576768064272) / 0.8999738247512131 AS [Feature_90], (CAST([ADS].[Feature_91] AS FLOAT(53)) - 0.07062813888509545) / 0.8375484834908378 AS [Feature_91], (CAST([ADS].[Feature_92] AS FLOAT(53)) - 0.012995630151896212) / 1.0647272193810997 AS [Feature_92], (CAST([ADS].[Feature_93] AS FLOAT(53)) - 0.10552124081904156) / 1.0581243892970371 AS [Feature_93], (CAST([ADS].[Feature_94] AS FLOAT(53)) - -0.1408434425354362) / 0.92205212993879 AS [Feature_94], (CAST([ADS].[Feature_95] AS FLOAT(53)) - -0.15740123667327244) / 0.9982252434499602 AS [Feature_95], (CAST([ADS].[Feature_96] AS FLOAT(53)) - 0.05477536676313335) / 0.9854596740586152 AS [Feature_96], (CAST([ADS].[Feature_97] AS FLOAT(53)) - 0.05673272205919615) / 0.9345138042198916 AS [Feature_97], (CAST([ADS].[Feature_98] AS FLOAT(53)) - -0.1422664921361953) / 1.1806080389955165 AS [Feature_98], (CAST([ADS].[Feature_99] AS FLOAT(53)) - -0.040426752891319515) / 1.99416099551069 AS [Feature_99] 
FROM [FourClass_100] AS [ADS]), 
[ADS_pre_1_OUT] AS 
(SELECT [ADS_sca_1_OUT].[KEY] AS [KEY], [ADS_sca_1_OUT].[Feature_0] * -0.0401244552686828 + [ADS_sca_1_OUT].[Feature_1] * 0.020499160476355745 + [ADS_sca_1_OUT].[Feature_2] * -0.006052331525250643 + [ADS_sca_1_OUT].[Feature_3] * 0.03104233571142545 + [ADS_sca_1_OUT].[Feature_4] * -0.11451704799046035 + [ADS_sca_1_OUT].[Feature_5] * 0.032884088555844924 + [ADS_sca_1_OUT].[Feature_6] * 0.01328016508106727 + [ADS_sca_1_OUT].[Feature_7] * -0.031306191525648085 + [ADS_sca_1_OUT].[Feature_8] * -0.012665975174703987 + [ADS_sca_1_OUT].[Feature_9] * -0.15194974454515695 + [ADS_sca_1_OUT].[Feature_10] * 0.07087661482468872 + [ADS_sca_1_OUT].[Feature_11] * -0.12918526503701633 + [ADS_sca_1_OUT].[Feature_12] * 0.04340209932140103 + [ADS_sca_1_OUT].[Feature_13] * 0.17417433101839438 + [ADS_sca_1_OUT].[Feature_14] * 0.03924150357456085 + [ADS_sca_1_OUT].[Feature_15] * -0.023957062347492886 + [ADS_sca_1_OUT].[Feature_16] * -0.01611183571378566 + [ADS_sca_1_OUT].[Feature_17] * 0.024496607712354873 + [ADS_sca_1_OUT].[Feature_18] * -0.07122776489437085 + [ADS_sca_1_OUT].[Feature_19] * 0.012413029834683724 + [ADS_sca_1_OUT].[Feature_20] * 0.1164914614109205 + [ADS_sca_1_OUT].[Feature_21] * 0.1458519269757758 + [ADS_sca_1_OUT].[Feature_22] * 0.12347866175119128 + [ADS_sca_1_OUT].[Feature_23] * -0.07902146521723592 + [ADS_sca_1_OUT].[Feature_24] * -0.08496852741682909 + [ADS_sca_1_OUT].[Feature_25] * -0.0614102188843471 + [ADS_sca_1_OUT].[Feature_26] * 0.04542935924700126 + [ADS_sca_1_OUT].[Feature_27] * 0.1712245069589597 + [ADS_sca_1_OUT].[Feature_28] * -0.1007124640721992 + [ADS_sca_1_OUT].[Feature_29] * -0.06587278863214716 + [ADS_sca_1_OUT].[Feature_30] * -0.15172096420241082 + [ADS_sca_1_OUT].[Feature_31] * -0.11469823315893578 + [ADS_sca_1_OUT].[Feature_32] * 0.059311130834241985 + [ADS_sca_1_OUT].[Feature_33] * 0.056526093252048874 + [ADS_sca_1_OUT].[Feature_34] * 0.04886866342627528 + [ADS_sca_1_OUT].[Feature_35] * 0.011364013556468005 + [ADS_sca_1_OUT].[Feature_36] * -0.07464129638107862 + [ADS_sca_1_OUT].[Feature_37] * -0.08487040993323544 + [ADS_sca_1_OUT].[Feature_38] * -0.05151346795406592 + [ADS_sca_1_OUT].[Feature_39] * -0.04094742976522061 + [ADS_sca_1_OUT].[Feature_40] * -0.002856462718286015 + [ADS_sca_1_OUT].[Feature_41] * 0.1802446469587421 + [ADS_sca_1_OUT].[Feature_42] * 0.13749931654143727 + [ADS_sca_1_OUT].[Feature_43] * -0.0702624498035523 + [ADS_sca_1_OUT].[Feature_44] * 0.19261812127160327 + [ADS_sca_1_OUT].[Feature_45] * 0.13991163175642024 + [ADS_sca_1_OUT].[Feature_46] * -0.013084424662731915 + [ADS_sca_1_OUT].[Feature_47] * 0.0990518093443299 + [ADS_sca_1_OUT].[Feature_48] * 0.09919423274445176 + [ADS_sca_1_OUT].[Feature_49] * -0.118116286565446 + [ADS_sca_1_OUT].[Feature_50] * 0.2480050217450701 + [ADS_sca_1_OUT].[Feature_51] * 0.017320395489334776 + [ADS_sca_1_OUT].[Feature_52] * -0.052015941940848125 + [ADS_sca_1_OUT].[Feature_53] * 0.13823764749571546 + [ADS_sca_1_OUT].[Feature_54] * 0.030330716274927238 + [ADS_sca_1_OUT].[Feature_55] * -0.046858902541017274 + [ADS_sca_1_OUT].[Feature_56] * 0.3025849450494309 + [ADS_sca_1_OUT].[Feature_57] * 0.05359678000503487 + [ADS_sca_1_OUT].[Feature_58] * -0.36239439641684984 + [ADS_sca_1_OUT].[Feature_59] * -0.03998884416116093 + [ADS_sca_1_OUT].[Feature_60] * 0.005347378549646504 + [ADS_sca_1_OUT].[Feature_61] * 0.028039063690728054 + [ADS_sca_1_OUT].[Feature_62] * -0.13986902475580254 + [ADS_sca_1_OUT].[Feature_63] * -0.09441683779266215 + [ADS_sca_1_OUT].[Feature_64] * -0.08904164662080896 + [ADS_sca_1_OUT].[Feature_65] * 0.0043103568195712975 + [ADS_sca_1_OUT].[Feature_66] * -0.07333069048196506 + [ADS_sca_1_OUT].[Feature_67] * -0.056872060218794686 + [ADS_sca_1_OUT].[Feature_68] * 0.15488026260203203 + [ADS_sca_1_OUT].[Feature_69] * -0.004169501688752003 + [ADS_sca_1_OUT].[Feature_70] * -0.07544855561115908 + [ADS_sca_1_OUT].[Feature_71] * -0.04582594927922057 + [ADS_sca_1_OUT].[Feature_72] * -0.00547320006511803 + [ADS_sca_1_OUT].[Feature_73] * -0.0889462220541773 + [ADS_sca_1_OUT].[Feature_74] * 0.08969064930423817 + [ADS_sca_1_OUT].[Feature_75] * 0.15795733644380003 + [ADS_sca_1_OUT].[Feature_76] * -0.053853819648172686 + [ADS_sca_1_OUT].[Feature_77] * -0.03644355408338976 + [ADS_sca_1_OUT].[Feature_78] * 0.1682276907689373 + [ADS_sca_1_OUT].[Feature_79] * -0.010577210714357708 + [ADS_sca_1_OUT].[Feature_80] * -0.032006187953247174 + [ADS_sca_1_OUT].[Feature_81] * -0.02367390926160316 + [ADS_sca_1_OUT].[Feature_82] * 0.09109962523013593 + [ADS_sca_1_OUT].[Feature_83] * 0.03444802814932895 + [ADS_sca_1_OUT].[Feature_84] * -0.07584014169386646 + [ADS_sca_1_OUT].[Feature_85] * 0.10046031445262672 + [ADS_sca_1_OUT].[Feature_86] * 0.07449607805987651 + [ADS_sca_1_OUT].[Feature_87] * 0.14710908768484185 + [ADS_sca_1_OUT].[Feature_88] * -0.07717752366801423 + [ADS_sca_1_OUT].[Feature_89] * 0.09526524151994897 + [ADS_sca_1_OUT].[Feature_90] * 0.004065573631029493 + [ADS_sca_1_OUT].[Feature_91] * -0.026072508678587045 + [ADS_sca_1_OUT].[Feature_92] * 0.03865707537314091 + [ADS_sca_1_OUT].[Feature_93] * 0.012104928011620652 + [ADS_sca_1_OUT].[Feature_94] * -0.016930396747416726 + [ADS_sca_1_OUT].[Feature_95] * -0.008767726313414641 + [ADS_sca_1_OUT].[Feature_96] * 0.01739555948872414 + [ADS_sca_1_OUT].[Feature_97] * 0.10875777098237331 + [ADS_sca_1_OUT].[Feature_98] * -0.11960603849249105 + [ADS_sca_1_OUT].[Feature_99] * -0.10074068650258974 AS [PC1], [ADS_sca_1_OUT].[Feature_0] * 0.01007930825707305 + [ADS_sca_1_OUT].[Feature_1] * 0.1812851350505922 + [ADS_sca_1_OUT].[Feature_2] * -0.0036806419522241174 + [ADS_sca_1_OUT].[Feature_3] * 0.07233835605642648 + [ADS_sca_1_OUT].[Feature_4] * -0.1686011852849522 + [ADS_sca_1_OUT].[Feature_5] * -0.03960428231064081 + [ADS_sca_1_OUT].[Feature_6] * 0.013745422680974784 + [ADS_sca_1_OUT].[Feature_7] * -0.027296549910901025 + [ADS_sca_1_OUT].[Feature_8] * 0.16968222124226534 + [ADS_sca_1_OUT].[Feature_9] * 0.06478775756378856 + [ADS_sca_1_OUT].[Feature_10] * 0.19573921124105004 + [ADS_sca_1_OUT].[Feature_11] * 0.07905137852739945 + [ADS_sca_1_OUT].[Feature_12] * 0.023543664724630042 + [ADS_sca_1_OUT].[Feature_13] * -0.17034086199898119 + [ADS_sca_1_OUT].[Feature_14] * 0.06394366687667727 + [ADS_sca_1_OUT].[Feature_15] * -0.03701706247841861 + [ADS_sca_1_OUT].[Feature_16] * -0.10611596525016759 + [ADS_sca_1_OUT].[Feature_17] * 0.14774647450440204 + [ADS_sca_1_OUT].[Feature_18] * 0.15621880909466732 + [ADS_sca_1_OUT].[Feature_19] * 0.0581028961184112 + [ADS_sca_1_OUT].[Feature_20] * 0.0860038730005672 + [ADS_sca_1_OUT].[Feature_21] * 0.06009884349359811 + [ADS_sca_1_OUT].[Feature_22] * -0.11208341414420167 + [ADS_sca_1_OUT].[Feature_23] * 0.10457059900958099 + [ADS_sca_1_OUT].[Feature_24] * 0.01494168508586557 + [ADS_sca_1_OUT].[Feature_25] * -0.020994994081973344 + [ADS_sca_1_OUT].[Feature_26] * -0.06601647310405777 + [ADS_sca_1_OUT].[Feature_27] * 0.07021303896872166 + [ADS_sca_1_OUT].[Feature_28] * 0.10958890032333553 + [ADS_sca_1_OUT].[Feature_29] * 0.20855323943643028 + [ADS_sca_1_OUT].[Feature_30] * -0.12399434827516688 + [ADS_sca_1_OUT].[Feature_31] * -0.018761984892381085 + [ADS_sca_1_OUT].[Feature_32] * -0.08961541523366824 + [ADS_sca_1_OUT].[Feature_33] * 0.17439756367630546 + [ADS_sca_1_OUT].[Feature_34] * 0.139314156668447 + [ADS_sca_1_OUT].[Feature_35] * 0.07329253708504176 + [ADS_sca_1_OUT].[Feature_36] * -0.046766474303533465 + [ADS_sca_1_OUT].[Feature_37] * -0.06804639628869084 + [ADS_sca_1_OUT].[Feature_38] * -0.040520458632741854 + [ADS_sca_1_OUT].[Feature_39] * 0.17455758054263606 + [ADS_sca_1_OUT].[Feature_40] * 0.001842279907317834 + [ADS_sca_1_OUT].[Feature_41] * 0.044439852375101584 + [ADS_sca_1_OUT].[Feature_42] * 0.1183825837969738 + [ADS_sca_1_OUT].[Feature_43] * 0.055407763288769965 + [ADS_sca_1_OUT].[Feature_44] * 0.09415538438237583 + [ADS_sca_1_OUT].[Feature_45] * 0.015418152257620391 + [ADS_sca_1_OUT].[Feature_46] * -0.12095293933041362 + [ADS_sca_1_OUT].[Feature_47] * -0.10982428900730147 + [ADS_sca_1_OUT].[Feature_48] * 0.04700434227243054 + [ADS_sca_1_OUT].[Feature_49] * -0.05008621011389847 + [ADS_sca_1_OUT].[Feature_50] * 0.12978551141544015 + [ADS_sca_1_OUT].[Feature_51] * 0.2099204764588611 + [ADS_sca_1_OUT].[Feature_52] * 0.117386834399194 + [ADS_sca_1_OUT].[Feature_53] * -0.08620737851624995 + [ADS_sca_1_OUT].[Feature_54] * 0.07098453227132004 + [ADS_sca_1_OUT].[Feature_55] * 0.025764740095519312 + [ADS_sca_1_OUT].[Feature_56] * -0.07052441463201801 + [ADS_sca_1_OUT].[Feature_57] * -0.09647031867423891 + [ADS_sca_1_OUT].[Feature_58] * -0.04821419205276085 + [ADS_sca_1_OUT].[Feature_59] * 0.12584853798132659 + [ADS_sca_1_OUT].[Feature_60] * 0.13149880886904275 + [ADS_sca_1_OUT].[Feature_61] * -0.14102898743903328 + [ADS_sca_1_OUT].[Feature_62] * -0.0077244668839770644 + [ADS_sca_1_OUT].[Feature_63] * -0.05552124144439122 + [ADS_sca_1_OUT].[Feature_64] * -0.1188231212036933 + [ADS_sca_1_OUT].[Feature_65] * -0.11657428347096745 + [ADS_sca_1_OUT].[Feature_66] * 0.001750256874796491 + [ADS_sca_1_OUT].[Feature_67] * 0.0029405490359251827 + [ADS_sca_1_OUT].[Feature_68] * -0.09396757544609953 + [ADS_sca_1_OUT].[Feature_69] * -0.12087858061461768 + [ADS_sca_1_OUT].[Feature_70] * 0.06719995675041385 + [ADS_sca_1_OUT].[Feature_71] * 0.04099635909189515 + [ADS_sca_1_OUT].[Feature_72] * -0.003759042706920289 + [ADS_sca_1_OUT].[Feature_73] * 0.1135223098228258 + [ADS_sca_1_OUT].[Feature_74] * 0.189672684672976 + [ADS_sca_1_OUT].[Feature_75] * -0.10705520398901898 + [ADS_sca_1_OUT].[Feature_76] * 0.10960402098170148 + [ADS_sca_1_OUT].[Feature_77] * 0.110011886550088 + [ADS_sca_1_OUT].[Feature_78] * -0.21632547504872704 + [ADS_sca_1_OUT].[Feature_79] * -0.017202340082464438 + [ADS_sca_1_OUT].[Feature_80] * -0.042155732556624 + [ADS_sca_1_OUT].[Feature_81] * -0.1385092434743741 + [ADS_sca_1_OUT].[Feature_82] * 0.02832665565441665 + [ADS_sca_1_OUT].[Feature_83] * 0.11720940005742317 + [ADS_sca_1_OUT].[Feature_84] * -0.025561432886426837 + [ADS_sca_1_OUT].[Feature_85] * 0.03302183067134395 + [ADS_sca_1_OUT].[Feature_86] * -0.10303955263196435 + [ADS_sca_1_OUT].[Feature_87] * -0.15782796773192892 + [ADS_sca_1_OUT].[Feature_88] * -0.10498582847679379 + [ADS_sca_1_OUT].[Feature_89] * -0.024829147471001227 + [ADS_sca_1_OUT].[Feature_90] * 0.00213837918745163 + [ADS_sca_1_OUT].[Feature_91] * -0.05011116939481462 + [ADS_sca_1_OUT].[Feature_92] * -0.029996543309213763 + [ADS_sca_1_OUT].[Feature_93] * -0.07893083103399491 + [ADS_sca_1_OUT].[Feature_94] * -0.03981610197075956 + [ADS_sca_1_OUT].[Feature_95] * -0.05596181736063816 + [ADS_sca_1_OUT].[Feature_96] * 0.14237301782930495 + [ADS_sca_1_OUT].[Feature_97] * 0.08057831679266396 + [ADS_sca_1_OUT].[Feature_98] * -0.03576446823866232 + [ADS_sca_1_OUT].[Feature_99] * -0.060631951231252215 AS [PC2], [ADS_sca_1_OUT].[Feature_0] * -0.14336941412359347 + [ADS_sca_1_OUT].[Feature_1] * 0.1243125529484781 + [ADS_sca_1_OUT].[Feature_2] * -0.10683419368059023 + [ADS_sca_1_OUT].[Feature_3] * 0.04633955319454231 + [ADS_sca_1_OUT].[Feature_4] * 0.1183850724684303 + [ADS_sca_1_OUT].[Feature_5] * 0.07420366587921592 + [ADS_sca_1_OUT].[Feature_6] * -0.07070232725684558 + [ADS_sca_1_OUT].[Feature_7] * -0.10065249948077434 + [ADS_sca_1_OUT].[Feature_8] * 0.08980412085264461 + [ADS_sca_1_OUT].[Feature_9] * -0.04470214152021714 + [ADS_sca_1_OUT].[Feature_10] * 0.1268699542701135 + [ADS_sca_1_OUT].[Feature_11] * -0.034073353925092364 + [ADS_sca_1_OUT].[Feature_12] * 0.14905170257930714 + [ADS_sca_1_OUT].[Feature_13] * -0.05415377248741238 + [ADS_sca_1_OUT].[Feature_14] * 0.09481344424740284 + [ADS_sca_1_OUT].[Feature_15] * -0.16894310412780386 + [ADS_sca_1_OUT].[Feature_16] * -0.015688899760936403 + [ADS_sca_1_OUT].[Feature_17] * -0.09750233635527213 + [ADS_sca_1_OUT].[Feature_18] * 0.0897034538122159 + [ADS_sca_1_OUT].[Feature_19] * -0.08079437007850859 + [ADS_sca_1_OUT].[Feature_20] * -0.0007910259606566054 + [ADS_sca_1_OUT].[Feature_21] * -0.027238937445207084 + [ADS_sca_1_OUT].[Feature_22] * 0.11970656834145232 + [ADS_sca_1_OUT].[Feature_23] * -0.04966462592656529 + [ADS_sca_1_OUT].[Feature_24] * -0.12556796334461615 + [ADS_sca_1_OUT].[Feature_25] * 0.031257580163277406 + [ADS_sca_1_OUT].[Feature_26] * -0.00887525548856709 + [ADS_sca_1_OUT].[Feature_27] * -0.2964661283041753 + [ADS_sca_1_OUT].[Feature_28] * -0.01724911736075281 + [ADS_sca_1_OUT].[Feature_29] * -0.02150141680197033 + [ADS_sca_1_OUT].[Feature_30] * 0.001838171443046764 + [ADS_sca_1_OUT].[Feature_31] * -0.24184455799394325 + [ADS_sca_1_OUT].[Feature_32] * 0.029883316909358887 + [ADS_sca_1_OUT].[Feature_33] * -0.013642663685901049 + [ADS_sca_1_OUT].[Feature_34] * -0.06805250309488793 + [ADS_sca_1_OUT].[Feature_35] * 0.08461903073837251 + [ADS_sca_1_OUT].[Feature_36] * 0.017357321876645307 + [ADS_sca_1_OUT].[Feature_37] * 0.04028520433951826 + [ADS_sca_1_OUT].[Feature_38] * 0.0702120781420923 + [ADS_sca_1_OUT].[Feature_39] * 0.07622528243326275 + [ADS_sca_1_OUT].[Feature_40] * -0.08535702464211764 + [ADS_sca_1_OUT].[Feature_41] * -0.029775412115257367 + [ADS_sca_1_OUT].[Feature_42] * 0.06550153737303445 + [ADS_sca_1_OUT].[Feature_43] * -0.22088835135387186 + [ADS_sca_1_OUT].[Feature_44] * 0.10988096505542509 + [ADS_sca_1_OUT].[Feature_45] * -0.07234076629201161 + [ADS_sca_1_OUT].[Feature_46] * 0.05779128521139387 + [ADS_sca_1_OUT].[Feature_47] * -0.014928114666689012 + [ADS_sca_1_OUT].[Feature_48] * 0.1373585636634067 + [ADS_sca_1_OUT].[Feature_49] * -0.08977401483376062 + [ADS_sca_1_OUT].[Feature_50] * 0.13378806375708963 + [ADS_sca_1_OUT].[Feature_51] * -0.10939405170727222 + [ADS_sca_1_OUT].[Feature_52] * -0.23526240606018556 + [ADS_sca_1_OUT].[Feature_53] * -0.16158227280327123 + [ADS_sca_1_OUT].[Feature_54] * 0.14070252034982114 + [ADS_sca_1_OUT].[Feature_55] * -0.18921403362480196 + [ADS_sca_1_OUT].[Feature_56] * -0.21033615264645167 + [ADS_sca_1_OUT].[Feature_57] * -0.08584650679320333 + [ADS_sca_1_OUT].[Feature_58] * 0.0574751885867657 + [ADS_sca_1_OUT].[Feature_59] * 0.0775270948853584 + [ADS_sca_1_OUT].[Feature_60] * -0.14077617222209438 + [ADS_sca_1_OUT].[Feature_61] * -0.01812007961021057 + [ADS_sca_1_OUT].[Feature_62] * -0.011083668297469781 + [ADS_sca_1_OUT].[Feature_63] * 0.012235125760330444 + [ADS_sca_1_OUT].[Feature_64] * 0.09783071507011977 + [ADS_sca_1_OUT].[Feature_65] * 0.11102249223654097 + [ADS_sca_1_OUT].[Feature_66] * -0.01421626858668519 + [ADS_sca_1_OUT].[Feature_67] * 0.0037384270638209424 + [ADS_sca_1_OUT].[Feature_68] * 0.053978211644580575 + [ADS_sca_1_OUT].[Feature_69] * -0.026123535141439558 + [ADS_sca_1_OUT].[Feature_70] * 0.051764891745307635 + [ADS_sca_1_OUT].[Feature_71] * 0.016521019591181754 + [ADS_sca_1_OUT].[Feature_72] * 0.041811787071407966 + [ADS_sca_1_OUT].[Feature_73] * 0.01975563956347437 + [ADS_sca_1_OUT].[Feature_74] * -0.13841441753892528 + [ADS_sca_1_OUT].[Feature_75] * 0.01848243434293461 + [ADS_sca_1_OUT].[Feature_76] * 0.05028316258457437 + [ADS_sca_1_OUT].[Feature_77] * -0.015593957135781471 + [ADS_sca_1_OUT].[Feature_78] * -0.08227507239312785 + [ADS_sca_1_OUT].[Feature_79] * -0.0009435655435321592 + [ADS_sca_1_OUT].[Feature_80] * 0.07823246370663516 + [ADS_sca_1_OUT].[Feature_81] * -0.021865878188387842 + [ADS_sca_1_OUT].[Feature_82] * 0.2082015163260664 + [ADS_sca_1_OUT].[Feature_83] * 0.1683899282698133 + [ADS_sca_1_OUT].[Feature_84] * -0.03366310866179508 + [ADS_sca_1_OUT].[Feature_85] * 0.07185013913779265 + [ADS_sca_1_OUT].[Feature_86] * -0.015313484455430635 + [ADS_sca_1_OUT].[Feature_87] * 0.004393863678052832 + [ADS_sca_1_OUT].[Feature_88] * -0.08327562822351459 + [ADS_sca_1_OUT].[Feature_89] * 0.1703061491950554 + [ADS_sca_1_OUT].[Feature_90] * 0.0446593282824064 + [ADS_sca_1_OUT].[Feature_91] * -0.008310286551264168 + [ADS_sca_1_OUT].[Feature_92] * -0.016938353410693347 + [ADS_sca_1_OUT].[Feature_93] * 0.0414253370986218 + [ADS_sca_1_OUT].[Feature_94] * 0.10472566772668858 + [ADS_sca_1_OUT].[Feature_95] * 0.0871491396712961 + [ADS_sca_1_OUT].[Feature_96] * -0.01834631559299331 + [ADS_sca_1_OUT].[Feature_97] * -0.18245732788631494 + [ADS_sca_1_OUT].[Feature_98] * 0.012406191425841904 + [ADS_sca_1_OUT].[Feature_99] * -0.007204594541586239 AS [PC3], [ADS_sca_1_OUT].[Feature_0] * -0.02450185788693987 + [ADS_sca_1_OUT].[Feature_1] * -0.050108121593760206 + [ADS_sca_1_OUT].[Feature_2] * -0.11647411198913395 + [ADS_sca_1_OUT].[Feature_3] * 0.1100965872383824 + [ADS_sca_1_OUT].[Feature_4] * 0.10403985700014344 + [ADS_sca_1_OUT].[Feature_5] * -0.00420872377004422 + [ADS_sca_1_OUT].[Feature_6] * 0.09708795997518636 + [ADS_sca_1_OUT].[Feature_7] * -0.12808578125208311 + [ADS_sca_1_OUT].[Feature_8] * 0.06276237961742165 + [ADS_sca_1_OUT].[Feature_9] * -0.049238093952797324 + [ADS_sca_1_OUT].[Feature_10] * -0.03926612584272978 + [ADS_sca_1_OUT].[Feature_11] * -0.13602408874476307 + [ADS_sca_1_OUT].[Feature_12] * -0.004103863472714304 + [ADS_sca_1_OUT].[Feature_13] * 0.06027577976347364 + [ADS_sca_1_OUT].[Feature_14] * -0.1345412076782113 + [ADS_sca_1_OUT].[Feature_15] * -0.09932005276878211 + [ADS_sca_1_OUT].[Feature_16] * 0.13357982467508864 + [ADS_sca_1_OUT].[Feature_17] * 0.1186279080186645 + [ADS_sca_1_OUT].[Feature_18] * -0.0030283856584790037 + [ADS_sca_1_OUT].[Feature_19] * -0.20695579326024946 + [ADS_sca_1_OUT].[Feature_20] * 0.09561870293848879 + [ADS_sca_1_OUT].[Feature_21] * -0.17068341695546535 + [ADS_sca_1_OUT].[Feature_22] * -0.0065309703785713345 + [ADS_sca_1_OUT].[Feature_23] * 0.029503593196149036 + [ADS_sca_1_OUT].[Feature_24] * -0.06410124293262662 + [ADS_sca_1_OUT].[Feature_25] * -0.07088808228532535 + [ADS_sca_1_OUT].[Feature_26] * -0.006801535477304419 + [ADS_sca_1_OUT].[Feature_27] * 0.06350631840192267 + [ADS_sca_1_OUT].[Feature_28] * 0.2160875833656777 + [ADS_sca_1_OUT].[Feature_29] * -0.1133140019553012 + [ADS_sca_1_OUT].[Feature_30] * 0.017811370718222832 + [ADS_sca_1_OUT].[Feature_31] * 0.04283646350751215 + [ADS_sca_1_OUT].[Feature_32] * 0.06619205233408172 + [ADS_sca_1_OUT].[Feature_33] * -0.01846926928839823 + [ADS_sca_1_OUT].[Feature_34] * -0.039816943106500816 + [ADS_sca_1_OUT].[Feature_35] * 0.1842468760830697 + [ADS_sca_1_OUT].[Feature_36] * -0.03779235950448034 + [ADS_sca_1_OUT].[Feature_37] * 0.17356102693502434 + [ADS_sca_1_OUT].[Feature_38] * 0.0382279290277338 + [ADS_sca_1_OUT].[Feature_39] * 0.0022000595832083057 + [ADS_sca_1_OUT].[Feature_40] * 0.04055286041157174 + [ADS_sca_1_OUT].[Feature_41] * 0.09144028876690327 + [ADS_sca_1_OUT].[Feature_42] * -0.03458375140499001 + [ADS_sca_1_OUT].[Feature_43] * 0.03477086975470412 + [ADS_sca_1_OUT].[Feature_44] * -0.03859294525648351 + [ADS_sca_1_OUT].[Feature_45] * -0.01222677714490157 + [ADS_sca_1_OUT].[Feature_46] * 0.03755971980543187 + [ADS_sca_1_OUT].[Feature_47] * 0.13128151461436138 + [ADS_sca_1_OUT].[Feature_48] * -0.058404570556893284 + [ADS_sca_1_OUT].[Feature_49] * -0.005020570697918697 + [ADS_sca_1_OUT].[Feature_50] * -0.048272735344984136 + [ADS_sca_1_OUT].[Feature_51] * 0.001217583048383255 + [ADS_sca_1_OUT].[Feature_52] * 0.05052776108827056 + [ADS_sca_1_OUT].[Feature_53] * -0.05097100488294497 + [ADS_sca_1_OUT].[Feature_54] * 0.049981551897805766 + [ADS_sca_1_OUT].[Feature_55] * 0.00889062990185734 + [ADS_sca_1_OUT].[Feature_56] * 0.1747310326068289 + [ADS_sca_1_OUT].[Feature_57] * -0.19579357196150096 + [ADS_sca_1_OUT].[Feature_58] * 0.06728941375024021 + [ADS_sca_1_OUT].[Feature_59] * -0.09440287225333678 + [ADS_sca_1_OUT].[Feature_60] * 0.09118997844284589 + [ADS_sca_1_OUT].[Feature_61] * -0.09101124815889898 + [ADS_sca_1_OUT].[Feature_62] * 0.2541169228931813 + [ADS_sca_1_OUT].[Feature_63] * -0.02260640083541377 + [ADS_sca_1_OUT].[Feature_64] * 0.0207676776138121 + [ADS_sca_1_OUT].[Feature_65] * -0.20164170253777638 + [ADS_sca_1_OUT].[Feature_66] * 0.04566656789865143 + [ADS_sca_1_OUT].[Feature_67] * 0.1545565427513418 + [ADS_sca_1_OUT].[Feature_68] * 0.04717378405862905 + [ADS_sca_1_OUT].[Feature_69] * 0.030681293685789368 + [ADS_sca_1_OUT].[Feature_70] * -0.06341367400906205 + [ADS_sca_1_OUT].[Feature_71] * -0.09323598753852336 + [ADS_sca_1_OUT].[Feature_72] * 0.09006414865802853 + [ADS_sca_1_OUT].[Feature_73] * -0.11508747885827345 + [ADS_sca_1_OUT].[Feature_74] * 0.007644409154726027 + [ADS_sca_1_OUT].[Feature_75] * -0.06758794615489121 + [ADS_sca_1_OUT].[Feature_76] * 0.18579769744690014 + [ADS_sca_1_OUT].[Feature_77] * 0.23039814291536154 + [ADS_sca_1_OUT].[Feature_78] * 0.048870130630141735 + [ADS_sca_1_OUT].[Feature_79] * -0.10647015339856793 + [ADS_sca_1_OUT].[Feature_80] * -0.02787922667064611 + [ADS_sca_1_OUT].[Feature_81] * -0.015928057660442148 + [ADS_sca_1_OUT].[Feature_82] * 0.02420624274891641 + [ADS_sca_1_OUT].[Feature_83] * 0.07208075714022755 + [ADS_sca_1_OUT].[Feature_84] * 0.04119722810271143 + [ADS_sca_1_OUT].[Feature_85] * 0.0029769730996306422 + [ADS_sca_1_OUT].[Feature_86] * -0.12033649657619107 + [ADS_sca_1_OUT].[Feature_87] * 0.12545266975013514 + [ADS_sca_1_OUT].[Feature_88] * 0.012111298416805005 + [ADS_sca_1_OUT].[Feature_89] * 0.13353434459469438 + [ADS_sca_1_OUT].[Feature_90] * -0.18768199951427636 + [ADS_sca_1_OUT].[Feature_91] * 0.11911105870085376 + [ADS_sca_1_OUT].[Feature_92] * -0.07879668913439578 + [ADS_sca_1_OUT].[Feature_93] * -0.04388176856970932 + [ADS_sca_1_OUT].[Feature_94] * 0.041440238083054685 + [ADS_sca_1_OUT].[Feature_95] * 0.036344453515112965 + [ADS_sca_1_OUT].[Feature_96] * 0.07081648661455574 + [ADS_sca_1_OUT].[Feature_97] * -0.02395719359573204 + [ADS_sca_1_OUT].[Feature_98] * 0.015056160541761059 + [ADS_sca_1_OUT].[Feature_99] * -0.2661413590634676 AS [PC4], [ADS_sca_1_OUT].[Feature_0] * 0.023077855345250597 + [ADS_sca_1_OUT].[Feature_1] * -0.050482124897064495 + [ADS_sca_1_OUT].[Feature_2] * -0.03231111798759019 + [ADS_sca_1_OUT].[Feature_3] * 0.06298973336734061 + [ADS_sca_1_OUT].[Feature_4] * -0.12726484076110153 + [ADS_sca_1_OUT].[Feature_5] * -0.06372086350112297 + [ADS_sca_1_OUT].[Feature_6] * -0.12615115485610945 + [ADS_sca_1_OUT].[Feature_7] * -0.05141177522618908 + [ADS_sca_1_OUT].[Feature_8] * 0.08844764482631153 + [ADS_sca_1_OUT].[Feature_9] * -0.08153293107460993 + [ADS_sca_1_OUT].[Feature_10] * 0.004972053242849135 + [ADS_sca_1_OUT].[Feature_11] * 0.032475153242625225 + [ADS_sca_1_OUT].[Feature_12] * -0.1193220110384253 + [ADS_sca_1_OUT].[Feature_13] * 0.07102504973984834 + [ADS_sca_1_OUT].[Feature_14] * 0.05668965161952346 + [ADS_sca_1_OUT].[Feature_15] * -0.0425870750732428 + [ADS_sca_1_OUT].[Feature_16] * 0.002109569327692657 + [ADS_sca_1_OUT].[Feature_17] * -0.09493479925607144 + [ADS_sca_1_OUT].[Feature_18] * -0.043528130748111286 + [ADS_sca_1_OUT].[Feature_19] * -0.027333899198455136 + [ADS_sca_1_OUT].[Feature_20] * 0.16528061293071808 + [ADS_sca_1_OUT].[Feature_21] * -0.0278542580280971 + [ADS_sca_1_OUT].[Feature_22] * 0.15463306842467506 + [ADS_sca_1_OUT].[Feature_23] * -0.12975887267928998 + [ADS_sca_1_OUT].[Feature_24] * 0.02980716923796312 + [ADS_sca_1_OUT].[Feature_25] * -0.0875925011097783 + [ADS_sca_1_OUT].[Feature_26] * -0.2779364753239012 + [ADS_sca_1_OUT].[Feature_27] * 0.01606917010343143 + [ADS_sca_1_OUT].[Feature_28] * -0.0635374428593724 + [ADS_sca_1_OUT].[Feature_29] * -0.05156659321579317 + [ADS_sca_1_OUT].[Feature_30] * 0.0035685369528528233 + [ADS_sca_1_OUT].[Feature_31] * 0.050483691853341485 + [ADS_sca_1_OUT].[Feature_32] * -0.05042589861233271 + [ADS_sca_1_OUT].[Feature_33] * 0.18871524580827614 + [ADS_sca_1_OUT].[Feature_34] * -0.09216826491535783 + [ADS_sca_1_OUT].[Feature_35] * 0.09560123862820198 + [ADS_sca_1_OUT].[Feature_36] * 0.16061384109176313 + [ADS_sca_1_OUT].[Feature_37] * 0.11411884661817814 + [ADS_sca_1_OUT].[Feature_38] * -0.10431901127898248 + [ADS_sca_1_OUT].[Feature_39] * -0.07907876935013965 + [ADS_sca_1_OUT].[Feature_40] * -0.18578567703020357 + [ADS_sca_1_OUT].[Feature_41] * -0.06882778656028644 + [ADS_sca_1_OUT].[Feature_42] * 0.011635275556958487 + [ADS_sca_1_OUT].[Feature_43] * -0.1258126575053573 + [ADS_sca_1_OUT].[Feature_44] * -0.027876956858870518 + [ADS_sca_1_OUT].[Feature_45] * 0.10289139129275758 + [ADS_sca_1_OUT].[Feature_46] * -0.010522088431185548 + [ADS_sca_1_OUT].[Feature_47] * -0.2211996512208 + [ADS_sca_1_OUT].[Feature_48] * -0.16372061947478034 + [ADS_sca_1_OUT].[Feature_49] * 0.07446063160436536 + [ADS_sca_1_OUT].[Feature_50] * -0.01932644626147323 + [ADS_sca_1_OUT].[Feature_51] * 0.08406221221704646 + [ADS_sca_1_OUT].[Feature_52] * 0.02248748982612913 + [ADS_sca_1_OUT].[Feature_53] * -0.07801619665400876 + [ADS_sca_1_OUT].[Feature_54] * 0.09693621630199108 + [ADS_sca_1_OUT].[Feature_55] * -0.02668274613956144 + [ADS_sca_1_OUT].[Feature_56] * 0.041162072930126456 + [ADS_sca_1_OUT].[Feature_57] * -0.09023338682400876 + [ADS_sca_1_OUT].[Feature_58] * 0.04613270661029692 + [ADS_sca_1_OUT].[Feature_59] * -0.09020690018604156 + [ADS_sca_1_OUT].[Feature_60] * -0.03515830300242961 + [ADS_sca_1_OUT].[Feature_61] * 0.06547449686976313 + [ADS_sca_1_OUT].[Feature_62] * -0.04885637360507097 + [ADS_sca_1_OUT].[Feature_63] * -0.1736470494429017 + [ADS_sca_1_OUT].[Feature_64] * -0.1352872390340787 + [ADS_sca_1_OUT].[Feature_65] * 0.08797523312633185 + [ADS_sca_1_OUT].[Feature_66] * -0.16557776801290514 + [ADS_sca_1_OUT].[Feature_67] * -0.03955734420813372 + [ADS_sca_1_OUT].[Feature_68] * -0.02743371845957504 + [ADS_sca_1_OUT].[Feature_69] * -0.20461788266313927 + [ADS_sca_1_OUT].[Feature_70] * 0.05563059572516112 + [ADS_sca_1_OUT].[Feature_71] * -0.13270184757139758 + [ADS_sca_1_OUT].[Feature_72] * 0.0006466685119529954 + [ADS_sca_1_OUT].[Feature_73] * 0.01736806629842122 + [ADS_sca_1_OUT].[Feature_74] * 0.0607707563779177 + [ADS_sca_1_OUT].[Feature_75] * -0.19401148830236775 + [ADS_sca_1_OUT].[Feature_76] * -0.13639174591463504 + [ADS_sca_1_OUT].[Feature_77] * 0.06456327377197947 + [ADS_sca_1_OUT].[Feature_78] * 0.10116951400494355 + [ADS_sca_1_OUT].[Feature_79] * 0.06929155258176056 + [ADS_sca_1_OUT].[Feature_80] * 0.003366440049998633 + [ADS_sca_1_OUT].[Feature_81] * 0.22395820532578833 + [ADS_sca_1_OUT].[Feature_82] * 0.05998275184264785 + [ADS_sca_1_OUT].[Feature_83] * 0.005003956481461682 + [ADS_sca_1_OUT].[Feature_84] * -0.05259858654285695 + [ADS_sca_1_OUT].[Feature_85] * -0.0655442012622197 + [ADS_sca_1_OUT].[Feature_86] * -0.08587300955821264 + [ADS_sca_1_OUT].[Feature_87] * -0.08026294839696206 + [ADS_sca_1_OUT].[Feature_88] * 0.2537171004319366 + [ADS_sca_1_OUT].[Feature_89] * 0.011587348297759564 + [ADS_sca_1_OUT].[Feature_90] * -0.051837049305944065 + [ADS_sca_1_OUT].[Feature_91] * -0.014567478689999648 + [ADS_sca_1_OUT].[Feature_92] * -0.021153212651072274 + [ADS_sca_1_OUT].[Feature_93] * -0.031912088035925046 + [ADS_sca_1_OUT].[Feature_94] * -0.0833513482524317 + [ADS_sca_1_OUT].[Feature_95] * 0.19362164664902073 + [ADS_sca_1_OUT].[Feature_96] * -0.04746794571677952 + [ADS_sca_1_OUT].[Feature_97] * 0.011537220928963431 + [ADS_sca_1_OUT].[Feature_98] * 0.08225009223164141 + [ADS_sca_1_OUT].[Feature_99] * 0.021487874134968086 AS [PC5], [ADS_sca_1_OUT].[Feature_0] * -0.051654854101836026 + [ADS_sca_1_OUT].[Feature_1] * -0.0229984434663304 + [ADS_sca_1_OUT].[Feature_2] * 0.17192067342759212 + [ADS_sca_1_OUT].[Feature_3] * 0.0948119599398291 + [ADS_sca_1_OUT].[Feature_4] * -0.007305934623060353 + [ADS_sca_1_OUT].[Feature_5] * 0.021996156893820604 + [ADS_sca_1_OUT].[Feature_6] * 0.02135013046601936 + [ADS_sca_1_OUT].[Feature_7] * 0.008198671341549058 + [ADS_sca_1_OUT].[Feature_8] * -0.10780423529289036 + [ADS_sca_1_OUT].[Feature_9] * 0.06409739893239591 + [ADS_sca_1_OUT].[Feature_10] * 0.08487216029106942 + [ADS_sca_1_OUT].[Feature_11] * 0.12103934563146967 + [ADS_sca_1_OUT].[Feature_12] * 0.058472213187473365 + [ADS_sca_1_OUT].[Feature_13] * 0.13106362400082167 + [ADS_sca_1_OUT].[Feature_14] * 0.14720429085373432 + [ADS_sca_1_OUT].[Feature_15] * -0.035958165788505 + [ADS_sca_1_OUT].[Feature_16] * 0.11292380746326787 + [ADS_sca_1_OUT].[Feature_17] * -0.019774480589097115 + [ADS_sca_1_OUT].[Feature_18] * -0.03741717502641569 + [ADS_sca_1_OUT].[Feature_19] * -0.021829069873964456 + [ADS_sca_1_OUT].[Feature_20] * -0.05511826729763113 + [ADS_sca_1_OUT].[Feature_21] * -0.06890672295700874 + [ADS_sca_1_OUT].[Feature_22] * -0.017215853503035342 + [ADS_sca_1_OUT].[Feature_23] * 0.24468069134354256 + [ADS_sca_1_OUT].[Feature_24] * 0.16309212002841866 + [ADS_sca_1_OUT].[Feature_25] * 0.049688644366428725 + [ADS_sca_1_OUT].[Feature_26] * 0.1161228680824717 + [ADS_sca_1_OUT].[Feature_27] * -0.0777761681629427 + [ADS_sca_1_OUT].[Feature_28] * -0.01412013777156919 + [ADS_sca_1_OUT].[Feature_29] * -0.05674637290334725 + [ADS_sca_1_OUT].[Feature_30] * -0.19597704564213517 + [ADS_sca_1_OUT].[Feature_31] * 0.00171049455311964 + [ADS_sca_1_OUT].[Feature_32] * 0.027755620782208952 + [ADS_sca_1_OUT].[Feature_33] * 0.04828447083711233 + [ADS_sca_1_OUT].[Feature_34] * 0.14736693927082384 + [ADS_sca_1_OUT].[Feature_35] * -0.12858057541834264 + [ADS_sca_1_OUT].[Feature_36] * 0.05249429533856762 + [ADS_sca_1_OUT].[Feature_37] * -0.08380791058811855 + [ADS_sca_1_OUT].[Feature_38] * 0.07982552717544963 + [ADS_sca_1_OUT].[Feature_39] * -0.001682512001528042 + [ADS_sca_1_OUT].[Feature_40] * 0.13738174768502528 + [ADS_sca_1_OUT].[Feature_41] * -0.13297548370654552 + [ADS_sca_1_OUT].[Feature_42] * 0.12484513080708386 + [ADS_sca_1_OUT].[Feature_43] * -0.03607193094109671 + [ADS_sca_1_OUT].[Feature_44] * 0.17262077879166277 + [ADS_sca_1_OUT].[Feature_45] * 0.12041211636010357 + [ADS_sca_1_OUT].[Feature_46] * -0.052699510598584944 + [ADS_sca_1_OUT].[Feature_47] * 0.07222011241273085 + [ADS_sca_1_OUT].[Feature_48] * -0.1583741999464663 + [ADS_sca_1_OUT].[Feature_49] * 0.0058948523816657284 + [ADS_sca_1_OUT].[Feature_50] * -0.17198391274190528 + [ADS_sca_1_OUT].[Feature_51] * -0.09566632775383514 + [ADS_sca_1_OUT].[Feature_52] * 0.004437456547705641 + [ADS_sca_1_OUT].[Feature_53] * 0.039176575317374174 + [ADS_sca_1_OUT].[Feature_54] * 0.1536419806347723 + [ADS_sca_1_OUT].[Feature_55] * -0.031058412925391205 + [ADS_sca_1_OUT].[Feature_56] * 0.03349285967107545 + [ADS_sca_1_OUT].[Feature_57] * -0.0188932475850796 + [ADS_sca_1_OUT].[Feature_58] * 0.14925440720371258 + [ADS_sca_1_OUT].[Feature_59] * 0.04273680407658448 + [ADS_sca_1_OUT].[Feature_60] * -0.20796959753154493 + [ADS_sca_1_OUT].[Feature_61] * -0.02946545700371306 + [ADS_sca_1_OUT].[Feature_62] * -0.07617965124191244 + [ADS_sca_1_OUT].[Feature_63] * -0.1696513646008226 + [ADS_sca_1_OUT].[Feature_64] * -0.14938717767306636 + [ADS_sca_1_OUT].[Feature_65] * -0.227396108420591 + [ADS_sca_1_OUT].[Feature_66] * -0.04997798053385151 + [ADS_sca_1_OUT].[Feature_67] * 0.0951793927354497 + [ADS_sca_1_OUT].[Feature_68] * 0.1414254938696981 + [ADS_sca_1_OUT].[Feature_69] * -0.02998918026647085 + [ADS_sca_1_OUT].[Feature_70] * -0.09587438871052936 + [ADS_sca_1_OUT].[Feature_71] * -0.07826411445128172 + [ADS_sca_1_OUT].[Feature_72] * 0.12005275609475208 + [ADS_sca_1_OUT].[Feature_73] * 0.07251346485869428 + [ADS_sca_1_OUT].[Feature_74] * 0.004468907865444968 + [ADS_sca_1_OUT].[Feature_75] * -0.025304430716602537 + [ADS_sca_1_OUT].[Feature_76] * 0.021648542882054048 + [ADS_sca_1_OUT].[Feature_77] * -0.011449897309321387 + [ADS_sca_1_OUT].[Feature_78] * -0.15032627338240998 + [ADS_sca_1_OUT].[Feature_79] * 0.1136086485290949 + [ADS_sca_1_OUT].[Feature_80] * 0.004613883310993875 + [ADS_sca_1_OUT].[Feature_81] * 0.025770014045464088 + [ADS_sca_1_OUT].[Feature_82] * -0.13298656810617912 + [ADS_sca_1_OUT].[Feature_83] * -0.0848572060268537 + [ADS_sca_1_OUT].[Feature_84] * -0.13604541529173544 + [ADS_sca_1_OUT].[Feature_85] * -0.04591075032795349 + [ADS_sca_1_OUT].[Feature_86] * -0.040254775740353764 + [ADS_sca_1_OUT].[Feature_87] * 0.09905099681343953 + [ADS_sca_1_OUT].[Feature_88] * -0.04731864387665486 + [ADS_sca_1_OUT].[Feature_89] * 0.07493191668115905 + [ADS_sca_1_OUT].[Feature_90] * 0.04756314891387543 + [ADS_sca_1_OUT].[Feature_91] * -0.07267652480694958 + [ADS_sca_1_OUT].[Feature_92] * 0.04931129254585605 + [ADS_sca_1_OUT].[Feature_93] * 0.16173531878611186 + [ADS_sca_1_OUT].[Feature_94] * -0.0063099647268551285 + [ADS_sca_1_OUT].[Feature_95] * 0.16806224845510265 + [ADS_sca_1_OUT].[Feature_96] * -0.05910367882963096 + [ADS_sca_1_OUT].[Feature_97] * -0.015147524820417875 + [ADS_sca_1_OUT].[Feature_98] * 0.12639865183342708 + [ADS_sca_1_OUT].[Feature_99] * -0.1316281940301612 AS [PC6], [ADS_sca_1_OUT].[Feature_0] * 0.027263485469032237 + [ADS_sca_1_OUT].[Feature_1] * 0.14776640279873407 + [ADS_sca_1_OUT].[Feature_2] * 0.04843580507128392 + [ADS_sca_1_OUT].[Feature_3] * 0.001466529351139917 + [ADS_sca_1_OUT].[Feature_4] * -0.012253249980856678 + [ADS_sca_1_OUT].[Feature_5] * -0.2721305688267561 + [ADS_sca_1_OUT].[Feature_6] * -0.04059963008159869 + [ADS_sca_1_OUT].[Feature_7] * -0.008518751028603166 + [ADS_sca_1_OUT].[Feature_8] * 0.05575519893490144 + [ADS_sca_1_OUT].[Feature_9] * 0.12945643519587668 + [ADS_sca_1_OUT].[Feature_10] * -0.14845138821464626 + [ADS_sca_1_OUT].[Feature_11] * 0.19261227754646704 + [ADS_sca_1_OUT].[Feature_12] * -0.16633744999006445 + [ADS_sca_1_OUT].[Feature_13] * -0.06090807860246907 + [ADS_sca_1_OUT].[Feature_14] * 0.01031449299588974 + [ADS_sca_1_OUT].[Feature_15] * 0.08124805528382785 + [ADS_sca_1_OUT].[Feature_16] * 0.19401163800776397 + [ADS_sca_1_OUT].[Feature_17] * 0.18993033269213497 + [ADS_sca_1_OUT].[Feature_18] * -0.03716179883935738 + [ADS_sca_1_OUT].[Feature_19] * 0.05275025633216568 + [ADS_sca_1_OUT].[Feature_20] * 0.18000645999738243 + [ADS_sca_1_OUT].[Feature_21] * -0.01713541086299794 + [ADS_sca_1_OUT].[Feature_22] * -0.18228281867015803 + [ADS_sca_1_OUT].[Feature_23] * -0.10949370734893507 + [ADS_sca_1_OUT].[Feature_24] * -0.09139366507503728 + [ADS_sca_1_OUT].[Feature_25] * -0.039632190338088485 + [ADS_sca_1_OUT].[Feature_26] * 0.07604948662384932 + [ADS_sca_1_OUT].[Feature_27] * -0.09178107339700518 + [ADS_sca_1_OUT].[Feature_28] * -0.16547895353104086 + [ADS_sca_1_OUT].[Feature_29] * -0.1312921508732829 + [ADS_sca_1_OUT].[Feature_30] * 0.16016338095144847 + [ADS_sca_1_OUT].[Feature_31] * -0.09934505458399692 + [ADS_sca_1_OUT].[Feature_32] * -0.04229062679798161 + [ADS_sca_1_OUT].[Feature_33] * 0.0018272938336116019 + [ADS_sca_1_OUT].[Feature_34] * -0.04831425412368238 + [ADS_sca_1_OUT].[Feature_35] * 0.0167075456699661 + [ADS_sca_1_OUT].[Feature_36] * -0.04392315974992017 + [ADS_sca_1_OUT].[Feature_37] * 0.0894942754778841 + [ADS_sca_1_OUT].[Feature_38] * 0.023267713375738727 + [ADS_sca_1_OUT].[Feature_39] * -0.022759350527618648 + [ADS_sca_1_OUT].[Feature_40] * 0.031066435987137975 + [ADS_sca_1_OUT].[Feature_41] * 0.009259239501892004 + [ADS_sca_1_OUT].[Feature_42] * -0.08669456780658463 + [ADS_sca_1_OUT].[Feature_43] * -0.09481434875825753 + [ADS_sca_1_OUT].[Feature_44] * 0.13169936827288736 + [ADS_sca_1_OUT].[Feature_45] * -0.03430545613871206 + [ADS_sca_1_OUT].[Feature_46] * 0.08371446331018188 + [ADS_sca_1_OUT].[Feature_47] * 0.03559021577503052 + [ADS_sca_1_OUT].[Feature_48] * 0.006189144608613766 + [ADS_sca_1_OUT].[Feature_49] * -0.007911303271021916 + [ADS_sca_1_OUT].[Feature_50] * -0.027706239366930608 + [ADS_sca_1_OUT].[Feature_51] * -0.10742130167196814 + [ADS_sca_1_OUT].[Feature_52] * 0.12214926740626557 + [ADS_sca_1_OUT].[Feature_53] * 0.19307046181795162 + [ADS_sca_1_OUT].[Feature_54] * -0.12172637698622744 + [ADS_sca_1_OUT].[Feature_55] * 0.15404394163807567 + [ADS_sca_1_OUT].[Feature_56] * 0.08553027541054466 + [ADS_sca_1_OUT].[Feature_57] * 0.02873800831203945 + [ADS_sca_1_OUT].[Feature_58] * -0.06383829120601432 + [ADS_sca_1_OUT].[Feature_59] * 0.1729828799144016 + [ADS_sca_1_OUT].[Feature_60] * -0.033946709443355594 + [ADS_sca_1_OUT].[Feature_61] * -0.043036996448597535 + [ADS_sca_1_OUT].[Feature_62] * -0.07353744422388672 + [ADS_sca_1_OUT].[Feature_63] * -0.08303788869226572 + [ADS_sca_1_OUT].[Feature_64] * 0.09065225064484377 + [ADS_sca_1_OUT].[Feature_65] * -0.01867366759762089 + [ADS_sca_1_OUT].[Feature_66] * -0.0736452947881261 + [ADS_sca_1_OUT].[Feature_67] * -0.04705742671840003 + [ADS_sca_1_OUT].[Feature_68] * 0.1225152599340251 + [ADS_sca_1_OUT].[Feature_69] * -0.07270792218480439 + [ADS_sca_1_OUT].[Feature_70] * 0.182644924854825 + [ADS_sca_1_OUT].[Feature_71] * -0.05170255759293229 + [ADS_sca_1_OUT].[Feature_72] * -0.0814330517387118 + [ADS_sca_1_OUT].[Feature_73] * 0.022222571713640102 + [ADS_sca_1_OUT].[Feature_74] * -0.040542173326310924 + [ADS_sca_1_OUT].[Feature_75] * 0.009889404741876828 + [ADS_sca_1_OUT].[Feature_76] * 0.04326330738205712 + [ADS_sca_1_OUT].[Feature_77] * -0.06795621611535191 + [ADS_sca_1_OUT].[Feature_78] * -0.05916931483150035 + [ADS_sca_1_OUT].[Feature_79] * -0.05522736393958605 + [ADS_sca_1_OUT].[Feature_80] * 0.05371197276756222 + [ADS_sca_1_OUT].[Feature_81] * -0.04757521265642847 + [ADS_sca_1_OUT].[Feature_82] * 0.01187729061613588 + [ADS_sca_1_OUT].[Feature_83] * 0.06620259613494911 + [ADS_sca_1_OUT].[Feature_84] * -0.11201338560555937 + [ADS_sca_1_OUT].[Feature_85] * -0.042819553245352034 + [ADS_sca_1_OUT].[Feature_86] * 0.04770276605850458 + [ADS_sca_1_OUT].[Feature_87] * -0.09129788378763885 + [ADS_sca_1_OUT].[Feature_88] * -0.09289458591981539 + [ADS_sca_1_OUT].[Feature_89] * 0.09751532097249364 + [ADS_sca_1_OUT].[Feature_90] * -0.07509969855575856 + [ADS_sca_1_OUT].[Feature_91] * 0.10094559071755439 + [ADS_sca_1_OUT].[Feature_92] * 0.13286051118220327 + [ADS_sca_1_OUT].[Feature_93] * -0.07283569955902147 + [ADS_sca_1_OUT].[Feature_94] * -0.033633134396921734 + [ADS_sca_1_OUT].[Feature_95] * 0.19395238547161647 + [ADS_sca_1_OUT].[Feature_96] * 0.2036635516680753 + [ADS_sca_1_OUT].[Feature_97] * -0.1619650862277215 + [ADS_sca_1_OUT].[Feature_98] * 0.08550821366725506 + [ADS_sca_1_OUT].[Feature_99] * -0.04286628239290258 AS [PC7] 
FROM [ADS_sca_1_OUT]), 
[DT_node_lookup] AS 
(SELECT [ADS_pre_1_OUT].[KEY] AS [KEY], CASE WHEN ([ADS_pre_1_OUT].[PC1] <= -1.997567265543833) THEN 2 ELSE CASE WHEN ([ADS_pre_1_OUT].[PC3] <= -1.3616403341517291) THEN 4 ELSE CASE WHEN ([ADS_pre_1_OUT].[PC4] <= -2.6087903016644467) THEN 6 ELSE CASE WHEN ([ADS_pre_1_OUT].[PC2] <= -1.1431327336535) THEN 8 ELSE CASE WHEN ([ADS_pre_1_OUT].[PC3] <= -0.8962324896745459) THEN 10 ELSE CASE WHEN ([ADS_pre_1_OUT].[PC4] <= -1.6429272517728142) THEN 12 ELSE CASE WHEN ([ADS_pre_1_OUT].[PC4] <= 0.08708683462336647) THEN 14 ELSE 15 END END END END END END END AS node_id_2 
FROM [ADS_pre_1_OUT]), 
[DT_node_data] AS 
(SELECT [Values].nid AS nid, [Values].[P_0] AS [P_0], [Values].[P_1] AS [P_1], [Values].[P_2] AS [P_2], [Values].[P_3] AS [P_3], [Values].[D] AS [D], [Values].[DP] AS [DP] 
FROM (SELECT 2 AS nid, 0.05263157894736843 AS [P_0], 0.15789473684210512 AS [P_1], 0.7894736842105265 AS [P_2], 0.0 AS [P_3], 2 AS [D], 0.7894736842105265 AS [DP] UNION ALL SELECT 4 AS nid, 0.7058823529411765 AS [P_0], 0.23529411764705882 AS [P_1], 0.0 AS [P_2], 0.058823529411764656 AS [P_3], 0 AS [D], 0.7058823529411765 AS [DP] UNION ALL SELECT 6 AS nid, 0.75 AS [P_0], 0.0 AS [P_1], 0.0 AS [P_2], 0.25 AS [P_3], 0 AS [D], 0.75 AS [DP] UNION ALL SELECT 8 AS nid, 0.538461538461538 AS [P_0], 0.307692307692308 AS [P_1], 0.153846153846154 AS [P_2], 0.0 AS [P_3], 0 AS [D], 0.538461538461538 AS [DP] UNION ALL SELECT 10 AS nid, 0.0 AS [P_0], 0.0 AS [P_1], 0.571428571428571 AS [P_2], 0.428571428571429 AS [P_3], 2 AS [D], 0.571428571428571 AS [DP] UNION ALL SELECT 12 AS nid, 0.0 AS [P_0], 1.0 AS [P_1], 0.0 AS [P_2], 0.0 AS [P_3], 1 AS [D], 1.0 AS [DP] UNION ALL SELECT 14 AS nid, 0.28571428571428603 AS [P_0], 0.14285714285714302 AS [P_1], 0.0 AS [P_2], 0.5714285714285711 AS [P_3], 3 AS [D], 0.5714285714285711 AS [DP] UNION ALL SELECT 15 AS nid, 0.0 AS [P_0], 0.2941176470588237 AS [P_1], 0.0 AS [P_2], 0.7058823529411763 AS [P_3], 3 AS [D], 0.7058823529411763 AS [DP]) AS [Values]), 
[DT_Output] AS 
(SELECT [DT_node_lookup].[KEY] AS [KEY], [DT_node_lookup].node_id_2 AS node_id_2, [DT_node_data].nid AS nid, [DT_node_data].[P_0] AS [P_0], [DT_node_data].[P_1] AS [P_1], [DT_node_data].[P_2] AS [P_2], [DT_node_data].[P_3] AS [P_3], [DT_node_data].[D] AS [D], [DT_node_data].[DP] AS [DP] 
FROM [DT_node_lookup] LEFT OUTER JOIN [DT_node_data] ON [DT_node_lookup].node_id_2 = [DT_node_data].nid), 
[RF_Model_0] AS 
(SELECT [DT_Output].[KEY] AS [KEY], CAST(NULL AS FLOAT(53)) AS [Score_0], [DT_Output].[P_0] AS [Proba_0], CASE WHEN ([DT_Output].[P_0] IS NULL OR [DT_Output].[P_0] > 0.0) THEN log([DT_Output].[P_0]) ELSE -1.79769313486231e+308 END AS [LogProba_0], CAST(NULL AS FLOAT(53)) AS [Score_1], [DT_Output].[P_1] AS [Proba_1], CASE WHEN ([DT_Output].[P_1] IS NULL OR [DT_Output].[P_1] > 0.0) THEN log([DT_Output].[P_1]) ELSE -1.79769313486231e+308 END AS [LogProba_1], CAST(NULL AS FLOAT(53)) AS [Score_2], [DT_Output].[P_2] AS [Proba_2], CASE WHEN ([DT_Output].[P_2] IS NULL OR [DT_Output].[P_2] > 0.0) THEN log([DT_Output].[P_2]) ELSE -1.79769313486231e+308 END AS [LogProba_2], CAST(NULL AS FLOAT(53)) AS [Score_3], [DT_Output].[P_3] AS [Proba_3], CASE WHEN ([DT_Output].[P_3] IS NULL OR [DT_Output].[P_3] > 0.0) THEN log([DT_Output].[P_3]) ELSE -1.79769313486231e+308 END AS [LogProba_3] 
FROM [DT_Output]), 
[DT_node_lookup_1] AS 
(SELECT [ADS_pre_1_OUT].[KEY] AS [KEY], CASE WHEN ([ADS_pre_1_OUT].[PC1] <= -2.235573567908623) THEN 2 ELSE CASE WHEN ([ADS_pre_1_OUT].[PC7] <= 2.872253660132033) THEN CASE WHEN ([ADS_pre_1_OUT].[PC2] <= -0.866760235525163) THEN 5 ELSE CASE WHEN ([ADS_pre_1_OUT].[PC7] <= -0.2241062358386234) THEN CASE WHEN ([ADS_pre_1_OUT].[PC5] <= 1.543835689547109) THEN 8 ELSE 9 END ELSE CASE WHEN ([ADS_pre_1_OUT].[PC6] <= -1.360093365057025) THEN 11 ELSE 12 END END END ELSE 13 END END AS node_id_2 
FROM [ADS_pre_1_OUT]), 
[DT_node_data_1] AS 
(SELECT [Values].nid AS nid, [Values].[P_0] AS [P_0], [Values].[P_1] AS [P_1], [Values].[P_2] AS [P_2], [Values].[P_3] AS [P_3], [Values].[D] AS [D], [Values].[DP] AS [DP] 
FROM (SELECT 2 AS nid, 0.20000000000000007 AS [P_0], 0.20000000000000007 AS [P_1], 0.5333333333333332 AS [P_2], 0.06666666666666672 AS [P_3], 2 AS [D], 0.5333333333333332 AS [DP] UNION ALL SELECT 5 AS nid, 0.5833333333333331 AS [P_0], 0.3750000000000001 AS [P_1], 0.041666666666666706 AS [P_2], 0.0 AS [P_3], 0 AS [D], 0.5833333333333331 AS [DP] UNION ALL SELECT 8 AS nid, 0.1052631578947369 AS [P_0], 0.31578947368421073 AS [P_1], 0.1052631578947369 AS [P_2], 0.47368421052631554 AS [P_3], 3 AS [D], 0.47368421052631554 AS [DP] UNION ALL SELECT 9 AS nid, 0.571428571428571 AS [P_0], 0.428571428571429 AS [P_1], 0.0 AS [P_2], 0.0 AS [P_3], 0 AS [D], 0.571428571428571 AS [DP] UNION ALL SELECT 11 AS nid, 0.2857142857142857 AS [P_0], 0.2857142857142857 AS [P_1], 0.0 AS [P_2], 0.4285714285714286 AS [P_3], 3 AS [D], 0.4285714285714286 AS [DP] UNION ALL SELECT 12 AS nid, 0.06666666666666672 AS [P_0], 0.0 AS [P_1], 0.0 AS [P_2], 0.9333333333333333 AS [P_3], 3 AS [D], 0.9333333333333333 AS [DP] UNION ALL SELECT 13 AS nid, 0.0 AS [P_0], 0.0 AS [P_1], 0.555555555555556 AS [P_2], 0.444444444444444 AS [P_3], 2 AS [D], 0.555555555555556 AS [DP]) AS [Values]), 
[DT_Output_1] AS 
(SELECT [DT_node_lookup_1].[KEY] AS [KEY], [DT_node_lookup_1].node_id_2 AS node_id_2, [DT_node_data_1].nid AS nid, [DT_node_data_1].[P_0] AS [P_0], [DT_node_data_1].[P_1] AS [P_1], [DT_node_data_1].[P_2] AS [P_2], [DT_node_data_1].[P_3] AS [P_3], [DT_node_data_1].[D] AS [D], [DT_node_data_1].[DP] AS [DP] 
FROM [DT_node_lookup_1] LEFT OUTER JOIN [DT_node_data_1] ON [DT_node_lookup_1].node_id_2 = [DT_node_data_1].nid), 
[RF_Model_1] AS 
(SELECT [DT_Output_1].[KEY] AS [KEY], CAST(NULL AS FLOAT(53)) AS [Score_0], [DT_Output_1].[P_0] AS [Proba_0], CASE WHEN ([DT_Output_1].[P_0] IS NULL OR [DT_Output_1].[P_0] > 0.0) THEN log([DT_Output_1].[P_0]) ELSE -1.79769313486231e+308 END AS [LogProba_0], CAST(NULL AS FLOAT(53)) AS [Score_1], [DT_Output_1].[P_1] AS [Proba_1], CASE WHEN ([DT_Output_1].[P_1] IS NULL OR [DT_Output_1].[P_1] > 0.0) THEN log([DT_Output_1].[P_1]) ELSE -1.79769313486231e+308 END AS [LogProba_1], CAST(NULL AS FLOAT(53)) AS [Score_2], [DT_Output_1].[P_2] AS [Proba_2], CASE WHEN ([DT_Output_1].[P_2] IS NULL OR [DT_Output_1].[P_2] > 0.0) THEN log([DT_Output_1].[P_2]) ELSE -1.79769313486231e+308 END AS [LogProba_2], CAST(NULL AS FLOAT(53)) AS [Score_3], [DT_Output_1].[P_3] AS [Proba_3], CASE WHEN ([DT_Output_1].[P_3] IS NULL OR [DT_Output_1].[P_3] > 0.0) THEN log([DT_Output_1].[P_3]) ELSE -1.79769313486231e+308 END AS [LogProba_3] 
FROM [DT_Output_1]), 
[DT_node_lookup_2] AS 
(SELECT [ADS_pre_1_OUT].[KEY] AS [KEY], CASE WHEN ([ADS_pre_1_OUT].[PC3] <= -1.2036042098613369) THEN CASE WHEN ([ADS_pre_1_OUT].[PC1] <= -0.6806234650912457) THEN 3 ELSE 4 END ELSE CASE WHEN ([ADS_pre_1_OUT].[PC6] <= -0.3275344767942108) THEN CASE WHEN ([ADS_pre_1_OUT].[PC6] <= -0.7108925171890971) THEN CASE WHEN ([ADS_pre_1_OUT].[PC4] <= -1.5207244599220702) THEN 8 ELSE 9 END ELSE 10 END ELSE 11 END END AS node_id_2 
FROM [ADS_pre_1_OUT]), 
[DT_node_data_2] AS 
(SELECT [Values].nid AS nid, [Values].[P_0] AS [P_0], [Values].[P_1] AS [P_1], [Values].[P_2] AS [P_2], [Values].[P_3] AS [P_3], [Values].[D] AS [D], [Values].[DP] AS [DP] 
FROM (SELECT 3 AS nid, 0.272727272727273 AS [P_0], 0.181818181818182 AS [P_1], 0.545454545454545 AS [P_2], 0.0 AS [P_3], 2 AS [D], 0.545454545454545 AS [DP] UNION ALL SELECT 4 AS nid, 0.47368421052631604 AS [P_0], 0.36842105263157904 AS [P_1], 0.0 AS [P_2], 0.15789473684210503 AS [P_3], 0 AS [D], 0.47368421052631604 AS [DP] UNION ALL SELECT 8 AS nid, 0.0 AS [P_0], 0.714285714285714 AS [P_1], 0.0 AS [P_2], 0.285714285714286 AS [P_3], 1 AS [D], 0.714285714285714 AS [DP] UNION ALL SELECT 9 AS nid, 0.0 AS [P_0], 0.133333333333333 AS [P_1], 0.666666666666667 AS [P_2], 0.2 AS [P_3], 2 AS [D], 0.666666666666667 AS [DP] UNION ALL SELECT 10 AS nid, 0.4 AS [P_0], 0.3 AS [P_1], 0.3 AS [P_2], 0.0 AS [P_3], 0 AS [D], 0.4 AS [DP] UNION ALL SELECT 11 AS nid, 0.117647058823529 AS [P_0], 0.147058823529412 AS [P_1], 0.235294117647059 AS [P_2], 0.5 AS [P_3], 3 AS [D], 0.5 AS [DP]) AS [Values]), 
[DT_Output_2] AS 
(SELECT [DT_node_lookup_2].[KEY] AS [KEY], [DT_node_lookup_2].node_id_2 AS node_id_2, [DT_node_data_2].nid AS nid, [DT_node_data_2].[P_0] AS [P_0], [DT_node_data_2].[P_1] AS [P_1], [DT_node_data_2].[P_2] AS [P_2], [DT_node_data_2].[P_3] AS [P_3], [DT_node_data_2].[D] AS [D], [DT_node_data_2].[DP] AS [DP] 
FROM [DT_node_lookup_2] LEFT OUTER JOIN [DT_node_data_2] ON [DT_node_lookup_2].node_id_2 = [DT_node_data_2].nid), 
[RF_Model_2] AS 
(SELECT [DT_Output_2].[KEY] AS [KEY], CAST(NULL AS FLOAT(53)) AS [Score_0], [DT_Output_2].[P_0] AS [Proba_0], CASE WHEN ([DT_Output_2].[P_0] IS NULL OR [DT_Output_2].[P_0] > 0.0) THEN log([DT_Output_2].[P_0]) ELSE -1.79769313486231e+308 END AS [LogProba_0], CAST(NULL AS FLOAT(53)) AS [Score_1], [DT_Output_2].[P_1] AS [Proba_1], CASE WHEN ([DT_Output_2].[P_1] IS NULL OR [DT_Output_2].[P_1] > 0.0) THEN log([DT_Output_2].[P_1]) ELSE -1.79769313486231e+308 END AS [LogProba_1], CAST(NULL AS FLOAT(53)) AS [Score_2], [DT_Output_2].[P_2] AS [Proba_2], CASE WHEN ([DT_Output_2].[P_2] IS NULL OR [DT_Output_2].[P_2] > 0.0) THEN log([DT_Output_2].[P_2]) ELSE -1.79769313486231e+308 END AS [LogProba_2], CAST(NULL AS FLOAT(53)) AS [Score_3], [DT_Output_2].[P_3] AS [Proba_3], CASE WHEN ([DT_Output_2].[P_3] IS NULL OR [DT_Output_2].[P_3] > 0.0) THEN log([DT_Output_2].[P_3]) ELSE -1.79769313486231e+308 END AS [LogProba_3] 
FROM [DT_Output_2]), 
[DT_node_lookup_3] AS 
(SELECT [ADS_pre_1_OUT].[KEY] AS [KEY], CASE WHEN ([ADS_pre_1_OUT].[PC1] <= -1.997567265543833) THEN CASE WHEN ([ADS_pre_1_OUT].[PC3] <= -0.002385493637046836) THEN 3 ELSE 4 END ELSE CASE WHEN ([ADS_pre_1_OUT].[PC2] <= -0.2351673804617248) THEN CASE WHEN ([ADS_pre_1_OUT].[PC2] <= -1.8526836750587778) THEN 7 ELSE CASE WHEN ([ADS_pre_1_OUT].[PC4] <= -0.6900211254437625) THEN 9 ELSE 10 END END ELSE CASE WHEN ([ADS_pre_1_OUT].[PC6] <= -0.4804934817157649) THEN 12 ELSE 13 END END END AS node_id_2 
FROM [ADS_pre_1_OUT]), 
[DT_node_data_3] AS 
(SELECT [Values].nid AS nid, [Values].[P_0] AS [P_0], [Values].[P_1] AS [P_1], [Values].[P_2] AS [P_2], [Values].[P_3] AS [P_3], [Values].[D] AS [D], [Values].[DP] AS [DP] 
FROM (SELECT 3 AS nid, 0.0 AS [P_0], 0.0 AS [P_1], 1.0 AS [P_2], 0.0 AS [P_3], 2 AS [D], 1.0 AS [DP] UNION ALL SELECT 4 AS nid, 0.181818181818182 AS [P_0], 0.272727272727273 AS [P_1], 0.545454545454545 AS [P_2], 0.0 AS [P_3], 2 AS [D], 0.545454545454545 AS [DP] UNION ALL SELECT 7 AS nid, 0.272727272727273 AS [P_0], 0.727272727272727 AS [P_1], 0.0 AS [P_2], 0.0 AS [P_3], 1 AS [D], 0.727272727272727 AS [DP] UNION ALL SELECT 9 AS nid, 0.538461538461538 AS [P_0], 0.230769230769231 AS [P_1], 0.230769230769231 AS [P_2], 0.0 AS [P_3], 0 AS [D], 0.538461538461538 AS [DP] UNION ALL SELECT 10 AS nid, 0.5 AS [P_0], 0.1875 AS [P_1], 0.125 AS [P_2], 0.1875 AS [P_3], 0 AS [D], 0.5 AS [DP] UNION ALL SELECT 12 AS nid, 0.05882352941176472 AS [P_0], 0.17647058823529405 AS [P_1], 0.23529411764705907 AS [P_2], 0.5294117647058822 AS [P_3], 3 AS [D], 0.5294117647058822 AS [DP] UNION ALL SELECT 13 AS nid, 0.105263157894737 AS [P_0], 0.263157894736842 AS [P_1], 0.0 AS [P_2], 0.631578947368421 AS [P_3], 3 AS [D], 0.631578947368421 AS [DP]) AS [Values]), 
[DT_Output_3] AS 
(SELECT [DT_node_lookup_3].[KEY] AS [KEY], [DT_node_lookup_3].node_id_2 AS node_id_2, [DT_node_data_3].nid AS nid, [DT_node_data_3].[P_0] AS [P_0], [DT_node_data_3].[P_1] AS [P_1], [DT_node_data_3].[P_2] AS [P_2], [DT_node_data_3].[P_3] AS [P_3], [DT_node_data_3].[D] AS [D], [DT_node_data_3].[DP] AS [DP] 
FROM [DT_node_lookup_3] LEFT OUTER JOIN [DT_node_data_3] ON [DT_node_lookup_3].node_id_2 = [DT_node_data_3].nid), 
[RF_Model_3] AS 
(SELECT [DT_Output_3].[KEY] AS [KEY], CAST(NULL AS FLOAT(53)) AS [Score_0], [DT_Output_3].[P_0] AS [Proba_0], CASE WHEN ([DT_Output_3].[P_0] IS NULL OR [DT_Output_3].[P_0] > 0.0) THEN log([DT_Output_3].[P_0]) ELSE -1.79769313486231e+308 END AS [LogProba_0], CAST(NULL AS FLOAT(53)) AS [Score_1], [DT_Output_3].[P_1] AS [Proba_1], CASE WHEN ([DT_Output_3].[P_1] IS NULL OR [DT_Output_3].[P_1] > 0.0) THEN log([DT_Output_3].[P_1]) ELSE -1.79769313486231e+308 END AS [LogProba_1], CAST(NULL AS FLOAT(53)) AS [Score_2], [DT_Output_3].[P_2] AS [Proba_2], CASE WHEN ([DT_Output_3].[P_2] IS NULL OR [DT_Output_3].[P_2] > 0.0) THEN log([DT_Output_3].[P_2]) ELSE -1.79769313486231e+308 END AS [LogProba_2], CAST(NULL AS FLOAT(53)) AS [Score_3], [DT_Output_3].[P_3] AS [Proba_3], CASE WHEN ([DT_Output_3].[P_3] IS NULL OR [DT_Output_3].[P_3] > 0.0) THEN log([DT_Output_3].[P_3]) ELSE -1.79769313486231e+308 END AS [LogProba_3] 
FROM [DT_Output_3]), 
[DT_node_lookup_4] AS 
(SELECT [ADS_pre_1_OUT].[KEY] AS [KEY], CASE WHEN ([ADS_pre_1_OUT].[PC2] <= 2.344948920914375) THEN CASE WHEN ([ADS_pre_1_OUT].[PC7] <= 0.5464607510502721) THEN CASE WHEN ([ADS_pre_1_OUT].[PC5] <= -0.1956683744617655) THEN CASE WHEN ([ADS_pre_1_OUT].[PC1] <= -1.379730639598187) THEN 5 ELSE 6 END ELSE CASE WHEN ([ADS_pre_1_OUT].[PC1] <= 1.793323108747412) THEN CASE WHEN ([ADS_pre_1_OUT].[PC2] <= -2.016566050731246) THEN 9 ELSE 10 END ELSE 11 END END ELSE 12 END ELSE 13 END AS node_id_2 
FROM [ADS_pre_1_OUT]), 
[DT_node_data_4] AS 
(SELECT [Values].nid AS nid, [Values].[P_0] AS [P_0], [Values].[P_1] AS [P_1], [Values].[P_2] AS [P_2], [Values].[P_3] AS [P_3], [Values].[D] AS [D], [Values].[DP] AS [DP] 
FROM (SELECT 5 AS nid, 0.142857142857143 AS [P_0], 0.0 AS [P_1], 0.857142857142857 AS [P_2], 0.0 AS [P_3], 2 AS [D], 0.857142857142857 AS [DP] UNION ALL SELECT 6 AS nid, 0.2777777777777781 AS [P_0], 0.4444444444444442 AS [P_1], 0.05555555555555563 AS [P_2], 0.2222222222222221 AS [P_3], 1 AS [D], 0.4444444444444442 AS [DP] UNION ALL SELECT 9 AS nid, 0.363636363636364 AS [P_0], 0.0 AS [P_1], 0.636363636363636 AS [P_2], 0.0 AS [P_3], 2 AS [D], 0.636363636363636 AS [DP] UNION ALL SELECT 10 AS nid, 0.75 AS [P_0], 0.0 AS [P_1], 0.125 AS [P_2], 0.125 AS [P_3], 0 AS [D], 0.75 AS [DP] UNION ALL SELECT 11 AS nid, 0.625 AS [P_0], 0.375 AS [P_1], 0.0 AS [P_2], 0.0 AS [P_3], 0 AS [D], 0.625 AS [DP] UNION ALL SELECT 12 AS nid, 0.222222222222222 AS [P_0], 0.62962962962963 AS [P_1], 0.148148148148148 AS [P_2], 0.0 AS [P_3], 1 AS [D], 0.62962962962963 AS [DP] UNION ALL SELECT 13 AS nid, 0.0 AS [P_0], 0.0 AS [P_1], 0.222222222222222 AS [P_2], 0.777777777777778 AS [P_3], 3 AS [D], 0.777777777777778 AS [DP]) AS [Values]), 
[DT_Output_4] AS 
(SELECT [DT_node_lookup_4].[KEY] AS [KEY], [DT_node_lookup_4].node_id_2 AS node_id_2, [DT_node_data_4].nid AS nid, [DT_node_data_4].[P_0] AS [P_0], [DT_node_data_4].[P_1] AS [P_1], [DT_node_data_4].[P_2] AS [P_2], [DT_node_data_4].[P_3] AS [P_3], [DT_node_data_4].[D] AS [D], [DT_node_data_4].[DP] AS [DP] 
FROM [DT_node_lookup_4] LEFT OUTER JOIN [DT_node_data_4] ON [DT_node_lookup_4].node_id_2 = [DT_node_data_4].nid), 
[RF_Model_4] AS 
(SELECT [DT_Output_4].[KEY] AS [KEY], CAST(NULL AS FLOAT(53)) AS [Score_0], [DT_Output_4].[P_0] AS [Proba_0], CASE WHEN ([DT_Output_4].[P_0] IS NULL OR [DT_Output_4].[P_0] > 0.0) THEN log([DT_Output_4].[P_0]) ELSE -1.79769313486231e+308 END AS [LogProba_0], CAST(NULL AS FLOAT(53)) AS [Score_1], [DT_Output_4].[P_1] AS [Proba_1], CASE WHEN ([DT_Output_4].[P_1] IS NULL OR [DT_Output_4].[P_1] > 0.0) THEN log([DT_Output_4].[P_1]) ELSE -1.79769313486231e+308 END AS [LogProba_1], CAST(NULL AS FLOAT(53)) AS [Score_2], [DT_Output_4].[P_2] AS [Proba_2], CASE WHEN ([DT_Output_4].[P_2] IS NULL OR [DT_Output_4].[P_2] > 0.0) THEN log([DT_Output_4].[P_2]) ELSE -1.79769313486231e+308 END AS [LogProba_2], CAST(NULL AS FLOAT(53)) AS [Score_3], [DT_Output_4].[P_3] AS [Proba_3], CASE WHEN ([DT_Output_4].[P_3] IS NULL OR [DT_Output_4].[P_3] > 0.0) THEN log([DT_Output_4].[P_3]) ELSE -1.79769313486231e+308 END AS [LogProba_3] 
FROM [DT_Output_4]), 
[DT_node_lookup_5] AS 
(SELECT [ADS_pre_1_OUT].[KEY] AS [KEY], CASE WHEN ([ADS_pre_1_OUT].[PC1] <= -1.6952815223141) THEN CASE WHEN ([ADS_pre_1_OUT].[PC5] <= -0.296545856263938) THEN 3 ELSE 4 END ELSE CASE WHEN ([ADS_pre_1_OUT].[PC4] <= 0.9275176477528756) THEN CASE WHEN ([ADS_pre_1_OUT].[PC7] <= 0.4479043483218435) THEN CASE WHEN ([ADS_pre_1_OUT].[PC5] <= 1.16450624529508) THEN CASE WHEN ([ADS_pre_1_OUT].[PC2] <= -0.4345615532929956) THEN 9 ELSE 10 END ELSE 11 END ELSE CASE WHEN ([ADS_pre_1_OUT].[PC7] <= 1.400755004970869) THEN 13 ELSE 14 END END ELSE 15 END END AS node_id_2 
FROM [ADS_pre_1_OUT]), 
[DT_node_data_5] AS 
(SELECT [Values].nid AS nid, [Values].[P_0] AS [P_0], [Values].[P_1] AS [P_1], [Values].[P_2] AS [P_2], [Values].[P_3] AS [P_3], [Values].[D] AS [D], [Values].[DP] AS [DP] 
FROM (SELECT 3 AS nid, 0.0 AS [P_0], 0.0 AS [P_1], 1.0 AS [P_2], 0.0 AS [P_3], 2 AS [D], 1.0 AS [DP] UNION ALL SELECT 4 AS nid, 0.07142857142857137 AS [P_0], 0.28571428571428586 AS [P_1], 0.4999999999999998 AS [P_2], 0.14285714285714293 AS [P_3], 2 AS [D], 0.4999999999999998 AS [DP] UNION ALL SELECT 9 AS nid, 0.7 AS [P_0], 0.3 AS [P_1], 0.0 AS [P_2], 0.0 AS [P_3], 0 AS [D], 0.7 AS [DP] UNION ALL SELECT 10 AS nid, 0.36363636363636404 AS [P_0], 0.09090909090909091 AS [P_1], 0.0 AS [P_2], 0.5454545454545451 AS [P_3], 3 AS [D], 0.5454545454545451 AS [DP] UNION ALL SELECT 11 AS nid, 0.2857142857142857 AS [P_0], 0.4285714285714286 AS [P_1], 0.14285714285714285 AS [P_2], 0.14285714285714285 AS [P_3], 1 AS [D], 0.4285714285714286 AS [DP] UNION ALL SELECT 13 AS nid, 0.0 AS [P_0], 0.444444444444444 AS [P_1], 0.0 AS [P_2], 0.555555555555556 AS [P_3], 3 AS [D], 0.555555555555556 AS [DP] UNION ALL SELECT 14 AS nid, 0.07692307692307683 AS [P_0], 0.3076923076923077 AS [P_1], 0.2307692307692308 AS [P_2], 0.3846153846153847 AS [P_3], 3 AS [D], 0.3846153846153847 AS [DP] UNION ALL SELECT 15 AS nid, 0.0 AS [P_0], 0.5789473684210528 AS [P_1], 0.052631578947368376 AS [P_2], 0.3684210526315788 AS [P_3], 1 AS [D], 0.5789473684210528 AS [DP]) AS [Values]), 
[DT_Output_5] AS 
(SELECT [DT_node_lookup_5].[KEY] AS [KEY], [DT_node_lookup_5].node_id_2 AS node_id_2, [DT_node_data_5].nid AS nid, [DT_node_data_5].[P_0] AS [P_0], [DT_node_data_5].[P_1] AS [P_1], [DT_node_data_5].[P_2] AS [P_2], [DT_node_data_5].[P_3] AS [P_3], [DT_node_data_5].[D] AS [D], [DT_node_data_5].[DP] AS [DP] 
FROM [DT_node_lookup_5] LEFT OUTER JOIN [DT_node_data_5] ON [DT_node_lookup_5].node_id_2 = [DT_node_data_5].nid), 
[RF_Model_5] AS 
(SELECT [DT_Output_5].[KEY] AS [KEY], CAST(NULL AS FLOAT(53)) AS [Score_0], [DT_Output_5].[P_0] AS [Proba_0], CASE WHEN ([DT_Output_5].[P_0] IS NULL OR [DT_Output_5].[P_0] > 0.0) THEN log([DT_Output_5].[P_0]) ELSE -1.79769313486231e+308 END AS [LogProba_0], CAST(NULL AS FLOAT(53)) AS [Score_1], [DT_Output_5].[P_1] AS [Proba_1], CASE WHEN ([DT_Output_5].[P_1] IS NULL OR [DT_Output_5].[P_1] > 0.0) THEN log([DT_Output_5].[P_1]) ELSE -1.79769313486231e+308 END AS [LogProba_1], CAST(NULL AS FLOAT(53)) AS [Score_2], [DT_Output_5].[P_2] AS [Proba_2], CASE WHEN ([DT_Output_5].[P_2] IS NULL OR [DT_Output_5].[P_2] > 0.0) THEN log([DT_Output_5].[P_2]) ELSE -1.79769313486231e+308 END AS [LogProba_2], CAST(NULL AS FLOAT(53)) AS [Score_3], [DT_Output_5].[P_3] AS [Proba_3], CASE WHEN ([DT_Output_5].[P_3] IS NULL OR [DT_Output_5].[P_3] > 0.0) THEN log([DT_Output_5].[P_3]) ELSE -1.79769313486231e+308 END AS [LogProba_3] 
FROM [DT_Output_5]), 
[DT_node_lookup_6] AS 
(SELECT [ADS_pre_1_OUT].[KEY] AS [KEY], CASE WHEN ([ADS_pre_1_OUT].[PC2] <= -0.3227084081375842) THEN CASE WHEN ([ADS_pre_1_OUT].[PC1] <= -1.6952815223141) THEN 3 ELSE CASE WHEN ([ADS_pre_1_OUT].[PC5] <= -0.1956683744617655) THEN 5 ELSE 6 END END ELSE CASE WHEN ([ADS_pre_1_OUT].[PC1] <= -2.062820986963303) THEN 8 ELSE CASE WHEN ([ADS_pre_1_OUT].[PC7] <= 0.4479043483218435) THEN CASE WHEN ([ADS_pre_1_OUT].[PC7] <= 0.07901256326401936) THEN CASE WHEN ([ADS_pre_1_OUT].[PC4] <= 0.6379112617909777) THEN 12 ELSE 13 END ELSE 14 END ELSE 15 END END END AS node_id_2 
FROM [ADS_pre_1_OUT]), 
[DT_node_data_6] AS 
(SELECT [Values].nid AS nid, [Values].[P_0] AS [P_0], [Values].[P_1] AS [P_1], [Values].[P_2] AS [P_2], [Values].[P_3] AS [P_3], [Values].[D] AS [D], [Values].[DP] AS [DP] 
FROM (SELECT 3 AS nid, 0.0 AS [P_0], 0.375 AS [P_1], 0.625 AS [P_2], 0.0 AS [P_3], 2 AS [D], 0.625 AS [DP] UNION ALL SELECT 5 AS nid, 0.25 AS [P_0], 0.75 AS [P_1], 0.0 AS [P_2], 0.0 AS [P_3], 1 AS [D], 0.75 AS [DP] UNION ALL SELECT 6 AS nid, 0.8125 AS [P_0], 0.0625 AS [P_1], 0.125 AS [P_2], 0.0 AS [P_3], 0 AS [D], 0.8125 AS [DP] UNION ALL SELECT 8 AS nid, 0.166666666666667 AS [P_0], 0.25 AS [P_1], 0.583333333333333 AS [P_2], 0.0 AS [P_3], 2 AS [D], 0.583333333333333 AS [DP] UNION ALL SELECT 12 AS nid, 0.06666666666666672 AS [P_0], 0.0 AS [P_1], 0.0 AS [P_2], 0.9333333333333333 AS [P_3], 3 AS [D], 0.9333333333333333 AS [DP] UNION ALL SELECT 13 AS nid, 0.888888888888889 AS [P_0], 0.0 AS [P_1], 0.111111111111111 AS [P_2], 0.0 AS [P_3], 0 AS [D], 0.888888888888889 AS [DP] UNION ALL SELECT 14 AS nid, 0.4285714285714286 AS [P_0], 0.4285714285714286 AS [P_1], 0.0 AS [P_2], 0.14285714285714285 AS [P_3], 0 AS [D], 0.4285714285714286 AS [DP] UNION ALL SELECT 15 AS nid, 0.0 AS [P_0], 0.07692307692307691 AS [P_1], 0.07692307692307691 AS [P_2], 0.8461538461538463 AS [P_3], 3 AS [D], 0.8461538461538463 AS [DP]) AS [Values]), 
[DT_Output_6] AS 
(SELECT [DT_node_lookup_6].[KEY] AS [KEY], [DT_node_lookup_6].node_id_2 AS node_id_2, [DT_node_data_6].nid AS nid, [DT_node_data_6].[P_0] AS [P_0], [DT_node_data_6].[P_1] AS [P_1], [DT_node_data_6].[P_2] AS [P_2], [DT_node_data_6].[P_3] AS [P_3], [DT_node_data_6].[D] AS [D], [DT_node_data_6].[DP] AS [DP] 
FROM [DT_node_lookup_6] LEFT OUTER JOIN [DT_node_data_6] ON [DT_node_lookup_6].node_id_2 = [DT_node_data_6].nid), 
[RF_Model_6] AS 
(SELECT [DT_Output_6].[KEY] AS [KEY], CAST(NULL AS FLOAT(53)) AS [Score_0], [DT_Output_6].[P_0] AS [Proba_0], CASE WHEN ([DT_Output_6].[P_0] IS NULL OR [DT_Output_6].[P_0] > 0.0) THEN log([DT_Output_6].[P_0]) ELSE -1.79769313486231e+308 END AS [LogProba_0], CAST(NULL AS FLOAT(53)) AS [Score_1], [DT_Output_6].[P_1] AS [Proba_1], CASE WHEN ([DT_Output_6].[P_1] IS NULL OR [DT_Output_6].[P_1] > 0.0) THEN log([DT_Output_6].[P_1]) ELSE -1.79769313486231e+308 END AS [LogProba_1], CAST(NULL AS FLOAT(53)) AS [Score_2], [DT_Output_6].[P_2] AS [Proba_2], CASE WHEN ([DT_Output_6].[P_2] IS NULL OR [DT_Output_6].[P_2] > 0.0) THEN log([DT_Output_6].[P_2]) ELSE -1.79769313486231e+308 END AS [LogProba_2], CAST(NULL AS FLOAT(53)) AS [Score_3], [DT_Output_6].[P_3] AS [Proba_3], CASE WHEN ([DT_Output_6].[P_3] IS NULL OR [DT_Output_6].[P_3] > 0.0) THEN log([DT_Output_6].[P_3]) ELSE -1.79769313486231e+308 END AS [LogProba_3] 
FROM [DT_Output_6]), 
[DT_node_lookup_7] AS 
(SELECT [ADS_pre_1_OUT].[KEY] AS [KEY], CASE WHEN ([ADS_pre_1_OUT].[PC1] <= -2.5194801259520627) THEN 2 ELSE CASE WHEN ([ADS_pre_1_OUT].[PC7] <= -1.4412183818719653) THEN 4 ELSE CASE WHEN ([ADS_pre_1_OUT].[PC7] <= -0.6377418973743174) THEN CASE WHEN ([ADS_pre_1_OUT].[PC5] <= -0.1956683744617655) THEN 7 ELSE 8 END ELSE CASE WHEN ([ADS_pre_1_OUT].[PC5] <= 1.327629585992232) THEN CASE WHEN ([ADS_pre_1_OUT].[PC6] <= -1.127991238948308) THEN 11 ELSE CASE WHEN ([ADS_pre_1_OUT].[PC7] <= 1.4586248527887482) THEN 13 ELSE 14 END END ELSE 15 END END END END AS node_id_2 
FROM [ADS_pre_1_OUT]), 
[DT_node_data_7] AS 
(SELECT [Values].nid AS nid, [Values].[P_0] AS [P_0], [Values].[P_1] AS [P_1], [Values].[P_2] AS [P_2], [Values].[P_3] AS [P_3], [Values].[D] AS [D], [Values].[DP] AS [DP] 
FROM (SELECT 2 AS nid, 0.0 AS [P_0], 0.0 AS [P_1], 0.9166666666666667 AS [P_2], 0.08333333333333329 AS [P_3], 2 AS [D], 0.9166666666666667 AS [DP] UNION ALL SELECT 4 AS nid, 0.07142857142857144 AS [P_0], 0.5000000000000003 AS [P_1], 0.21428571428571414 AS [P_2], 0.21428571428571414 AS [P_3], 1 AS [D], 0.5000000000000003 AS [DP] UNION ALL SELECT 7 AS nid, 0.41666666666666663 AS [P_0], 0.24999999999999978 AS [P_1], 0.16666666666666685 AS [P_2], 0.16666666666666685 AS [P_3], 0 AS [D], 0.41666666666666663 AS [DP] UNION ALL SELECT 8 AS nid, 0.642857142857143 AS [P_0], 0.0 AS [P_1], 0.142857142857143 AS [P_2], 0.214285714285714 AS [P_3], 0 AS [D], 0.642857142857143 AS [DP] UNION ALL SELECT 11 AS nid, 0.166666666666667 AS [P_0], 0.333333333333333 AS [P_1], 0.5 AS [P_2], 0.0 AS [P_3], 2 AS [D], 0.5 AS [DP] UNION ALL SELECT 13 AS nid, 0.20000000000000007 AS [P_0], 0.20000000000000007 AS [P_1], 0.06666666666666671 AS [P_2], 0.5333333333333331 AS [P_3], 3 AS [D], 0.5333333333333331 AS [DP] UNION ALL SELECT 14 AS nid, 0.11111111111111112 AS [P_0], 0.11111111111111112 AS [P_1], 0.4444444444444445 AS [P_2], 0.33333333333333337 AS [P_3], 2 AS [D], 0.4444444444444445 AS [DP] UNION ALL SELECT 15 AS nid, 0.0 AS [P_0], 0.0 AS [P_1], 0.0 AS [P_2], 1.0 AS [P_3], 3 AS [D], 1.0 AS [DP]) AS [Values]), 
[DT_Output_7] AS 
(SELECT [DT_node_lookup_7].[KEY] AS [KEY], [DT_node_lookup_7].node_id_2 AS node_id_2, [DT_node_data_7].nid AS nid, [DT_node_data_7].[P_0] AS [P_0], [DT_node_data_7].[P_1] AS [P_1], [DT_node_data_7].[P_2] AS [P_2], [DT_node_data_7].[P_3] AS [P_3], [DT_node_data_7].[D] AS [D], [DT_node_data_7].[DP] AS [DP] 
FROM [DT_node_lookup_7] LEFT OUTER JOIN [DT_node_data_7] ON [DT_node_lookup_7].node_id_2 = [DT_node_data_7].nid), 
[RF_Model_7] AS 
(SELECT [DT_Output_7].[KEY] AS [KEY], CAST(NULL AS FLOAT(53)) AS [Score_0], [DT_Output_7].[P_0] AS [Proba_0], CASE WHEN ([DT_Output_7].[P_0] IS NULL OR [DT_Output_7].[P_0] > 0.0) THEN log([DT_Output_7].[P_0]) ELSE -1.79769313486231e+308 END AS [LogProba_0], CAST(NULL AS FLOAT(53)) AS [Score_1], [DT_Output_7].[P_1] AS [Proba_1], CASE WHEN ([DT_Output_7].[P_1] IS NULL OR [DT_Output_7].[P_1] > 0.0) THEN log([DT_Output_7].[P_1]) ELSE -1.79769313486231e+308 END AS [LogProba_1], CAST(NULL AS FLOAT(53)) AS [Score_2], [DT_Output_7].[P_2] AS [Proba_2], CASE WHEN ([DT_Output_7].[P_2] IS NULL OR [DT_Output_7].[P_2] > 0.0) THEN log([DT_Output_7].[P_2]) ELSE -1.79769313486231e+308 END AS [LogProba_2], CAST(NULL AS FLOAT(53)) AS [Score_3], [DT_Output_7].[P_3] AS [Proba_3], CASE WHEN ([DT_Output_7].[P_3] IS NULL OR [DT_Output_7].[P_3] > 0.0) THEN log([DT_Output_7].[P_3]) ELSE -1.79769313486231e+308 END AS [LogProba_3] 
FROM [DT_Output_7]), 
[DT_node_lookup_8] AS 
(SELECT [ADS_pre_1_OUT].[KEY] AS [KEY], CASE WHEN ([ADS_pre_1_OUT].[PC1] <= -1.6952815223141) THEN 2 ELSE CASE WHEN ([ADS_pre_1_OUT].[PC4] <= 1.154971747228545) THEN CASE WHEN ([ADS_pre_1_OUT].[PC3] <= -0.7579942561932725) THEN CASE WHEN ([ADS_pre_1_OUT].[PC2] <= -0.4345615532929956) THEN 6 ELSE 7 END ELSE CASE WHEN ([ADS_pre_1_OUT].[PC7] <= -0.6928510347980138) THEN 9 ELSE CASE WHEN ([ADS_pre_1_OUT].[PC5] <= -2.144404496589342) THEN 11 ELSE 12 END END END ELSE 13 END END AS node_id_2 
FROM [ADS_pre_1_OUT]), 
[DT_node_data_8] AS 
(SELECT [Values].nid AS nid, [Values].[P_0] AS [P_0], [Values].[P_1] AS [P_1], [Values].[P_2] AS [P_2], [Values].[P_3] AS [P_3], [Values].[D] AS [D], [Values].[DP] AS [DP] 
FROM (SELECT 2 AS nid, 0.05 AS [P_0], 0.2 AS [P_1], 0.7 AS [P_2], 0.05 AS [P_3], 2 AS [D], 0.7 AS [DP] UNION ALL SELECT 6 AS nid, 0.7 AS [P_0], 0.3 AS [P_1], 0.0 AS [P_2], 0.0 AS [P_3], 0 AS [D], 0.7 AS [DP] UNION ALL SELECT 7 AS nid, 0.2 AS [P_0], 0.333333333333333 AS [P_1], 0.266666666666667 AS [P_2], 0.2 AS [P_3], 1 AS [D], 0.333333333333333 AS [DP] UNION ALL SELECT 9 AS nid, 0.18181818181818182 AS [P_0], 0.36363636363636365 AS [P_1], 0.09090909090909081 AS [P_2], 0.36363636363636365 AS [P_3], 1 AS [D], 0.36363636363636365 AS [DP] UNION ALL SELECT 11 AS nid, 0.714285714285714 AS [P_0], 0.0 AS [P_1], 0.0 AS [P_2], 0.285714285714286 AS [P_3], 0 AS [D], 0.714285714285714 AS [DP] UNION ALL SELECT 12 AS nid, 0.13333333333333303 AS [P_0], 0.0 AS [P_1], 0.06666666666666671 AS [P_2], 0.8000000000000003 AS [P_3], 3 AS [D], 0.8000000000000003 AS [DP] UNION ALL SELECT 13 AS nid, 0.05555555555555563 AS [P_0], 0.6111111111111113 AS [P_1], 0.0 AS [P_2], 0.33333333333333315 AS [P_3], 1 AS [D], 0.6111111111111113 AS [DP]) AS [Values]), 
[DT_Output_8] AS 
(SELECT [DT_node_lookup_8].[KEY] AS [KEY], [DT_node_lookup_8].node_id_2 AS node_id_2, [DT_node_data_8].nid AS nid, [DT_node_data_8].[P_0] AS [P_0], [DT_node_data_8].[P_1] AS [P_1], [DT_node_data_8].[P_2] AS [P_2], [DT_node_data_8].[P_3] AS [P_3], [DT_node_data_8].[D] AS [D], [DT_node_data_8].[DP] AS [DP] 
FROM [DT_node_lookup_8] LEFT OUTER JOIN [DT_node_data_8] ON [DT_node_lookup_8].node_id_2 = [DT_node_data_8].nid), 
[RF_Model_8] AS 
(SELECT [DT_Output_8].[KEY] AS [KEY], CAST(NULL AS FLOAT(53)) AS [Score_0], [DT_Output_8].[P_0] AS [Proba_0], CASE WHEN ([DT_Output_8].[P_0] IS NULL OR [DT_Output_8].[P_0] > 0.0) THEN log([DT_Output_8].[P_0]) ELSE -1.79769313486231e+308 END AS [LogProba_0], CAST(NULL AS FLOAT(53)) AS [Score_1], [DT_Output_8].[P_1] AS [Proba_1], CASE WHEN ([DT_Output_8].[P_1] IS NULL OR [DT_Output_8].[P_1] > 0.0) THEN log([DT_Output_8].[P_1]) ELSE -1.79769313486231e+308 END AS [LogProba_1], CAST(NULL AS FLOAT(53)) AS [Score_2], [DT_Output_8].[P_2] AS [Proba_2], CASE WHEN ([DT_Output_8].[P_2] IS NULL OR [DT_Output_8].[P_2] > 0.0) THEN log([DT_Output_8].[P_2]) ELSE -1.79769313486231e+308 END AS [LogProba_2], CAST(NULL AS FLOAT(53)) AS [Score_3], [DT_Output_8].[P_3] AS [Proba_3], CASE WHEN ([DT_Output_8].[P_3] IS NULL OR [DT_Output_8].[P_3] > 0.0) THEN log([DT_Output_8].[P_3]) ELSE -1.79769313486231e+308 END AS [LogProba_3] 
FROM [DT_Output_8]), 
[DT_node_lookup_9] AS 
(SELECT [ADS_pre_1_OUT].[KEY] AS [KEY], CASE WHEN ([ADS_pre_1_OUT].[PC5] <= -2.704959691323024) THEN 2 ELSE CASE WHEN ([ADS_pre_1_OUT].[PC2] <= -0.866760235525163) THEN CASE WHEN ([ADS_pre_1_OUT].[PC4] <= 0.5996843673815583) THEN CASE WHEN ([ADS_pre_1_OUT].[PC7] <= 0.9630048947950246) THEN 6 ELSE 7 END ELSE 8 END ELSE CASE WHEN ([ADS_pre_1_OUT].[PC7] <= -0.7323644784080903) THEN 10 ELSE CASE WHEN ([ADS_pre_1_OUT].[PC6] <= -0.3275344767942108) THEN CASE WHEN ([ADS_pre_1_OUT].[PC3] <= 1.036446110016374) THEN 13 ELSE 14 END ELSE 15 END END END END AS node_id_2 
FROM [ADS_pre_1_OUT]), 
[DT_node_data_9] AS 
(SELECT [Values].nid AS nid, [Values].[P_0] AS [P_0], [Values].[P_1] AS [P_1], [Values].[P_2] AS [P_2], [Values].[P_3] AS [P_3], [Values].[D] AS [D], [Values].[DP] AS [DP] 
FROM (SELECT 2 AS nid, 0.0 AS [P_0], 0.428571428571429 AS [P_1], 0.571428571428571 AS [P_2], 0.0 AS [P_3], 2 AS [D], 0.571428571428571 AS [DP] UNION ALL SELECT 6 AS nid, 0.5 AS [P_0], 0.5 AS [P_1], 0.0 AS [P_2], 0.0 AS [P_3], 0 AS [D], 0.5 AS [DP] UNION ALL SELECT 7 AS nid, 0.777777777777778 AS [P_0], 0.111111111111111 AS [P_1], 0.0 AS [P_2], 0.111111111111111 AS [P_3], 0 AS [D], 0.777777777777778 AS [DP] UNION ALL SELECT 8 AS nid, 0.25 AS [P_0], 0.5 AS [P_1], 0.25 AS [P_2], 0.0 AS [P_3], 1 AS [D], 0.5 AS [DP] UNION ALL SELECT 10 AS nid, 0.473684210526316 AS [P_0], 0.105263157894737 AS [P_1], 0.157894736842105 AS [P_2], 0.263157894736842 AS [P_3], 0 AS [D], 0.473684210526316 AS [DP] UNION ALL SELECT 13 AS nid, 0.0 AS [P_0], 0.153846153846154 AS [P_1], 0.307692307692308 AS [P_2], 0.538461538461538 AS [P_3], 3 AS [D], 0.538461538461538 AS [DP] UNION ALL SELECT 14 AS nid, 0.0 AS [P_0], 1.0 AS [P_1], 0.0 AS [P_2], 0.0 AS [P_3], 1 AS [D], 1.0 AS [DP] UNION ALL SELECT 15 AS nid, 0.0 AS [P_0], 0.117647058823529 AS [P_1], 0.0 AS [P_2], 0.882352941176471 AS [P_3], 3 AS [D], 0.882352941176471 AS [DP]) AS [Values]), 
[DT_Output_9] AS 
(SELECT [DT_node_lookup_9].[KEY] AS [KEY], [DT_node_lookup_9].node_id_2 AS node_id_2, [DT_node_data_9].nid AS nid, [DT_node_data_9].[P_0] AS [P_0], [DT_node_data_9].[P_1] AS [P_1], [DT_node_data_9].[P_2] AS [P_2], [DT_node_data_9].[P_3] AS [P_3], [DT_node_data_9].[D] AS [D], [DT_node_data_9].[DP] AS [DP] 
FROM [DT_node_lookup_9] LEFT OUTER JOIN [DT_node_data_9] ON [DT_node_lookup_9].node_id_2 = [DT_node_data_9].nid), 
[RF_Model_9] AS 
(SELECT [DT_Output_9].[KEY] AS [KEY], CAST(NULL AS FLOAT(53)) AS [Score_0], [DT_Output_9].[P_0] AS [Proba_0], CASE WHEN ([DT_Output_9].[P_0] IS NULL OR [DT_Output_9].[P_0] > 0.0) THEN log([DT_Output_9].[P_0]) ELSE -1.79769313486231e+308 END AS [LogProba_0], CAST(NULL AS FLOAT(53)) AS [Score_1], [DT_Output_9].[P_1] AS [Proba_1], CASE WHEN ([DT_Output_9].[P_1] IS NULL OR [DT_Output_9].[P_1] > 0.0) THEN log([DT_Output_9].[P_1]) ELSE -1.79769313486231e+308 END AS [LogProba_1], CAST(NULL AS FLOAT(53)) AS [Score_2], [DT_Output_9].[P_2] AS [Proba_2], CASE WHEN ([DT_Output_9].[P_2] IS NULL OR [DT_Output_9].[P_2] > 0.0) THEN log([DT_Output_9].[P_2]) ELSE -1.79769313486231e+308 END AS [LogProba_2], CAST(NULL AS FLOAT(53)) AS [Score_3], [DT_Output_9].[P_3] AS [Proba_3], CASE WHEN ([DT_Output_9].[P_3] IS NULL OR [DT_Output_9].[P_3] > 0.0) THEN log([DT_Output_9].[P_3]) ELSE -1.79769313486231e+308 END AS [LogProba_3] 
FROM [DT_Output_9]), 
[RF_0] AS 
(SELECT [RF_esu_0].[KEY] AS [KEY], [RF_esu_0].[Score_0] AS [Score_0], [RF_esu_0].[Proba_0] AS [Proba_0], [RF_esu_0].[LogProba_0] AS [LogProba_0], [RF_esu_0].[Score_1] AS [Score_1], [RF_esu_0].[Proba_1] AS [Proba_1], [RF_esu_0].[LogProba_1] AS [LogProba_1], [RF_esu_0].[Score_2] AS [Score_2], [RF_esu_0].[Proba_2] AS [Proba_2], [RF_esu_0].[LogProba_2] AS [LogProba_2], [RF_esu_0].[Score_3] AS [Score_3], [RF_esu_0].[Proba_3] AS [Proba_3], [RF_esu_0].[LogProba_3] AS [LogProba_3] 
FROM (SELECT [RF_Model_0].[KEY] AS [KEY], CAST([RF_Model_0].[Score_0] AS FLOAT(53)) AS [Score_0], CAST([RF_Model_0].[Proba_0] AS FLOAT(53)) AS [Proba_0], CAST([RF_Model_0].[LogProba_0] AS FLOAT(53)) AS [LogProba_0], CAST([RF_Model_0].[Score_1] AS FLOAT(53)) AS [Score_1], CAST([RF_Model_0].[Proba_1] AS FLOAT(53)) AS [Proba_1], CAST([RF_Model_0].[LogProba_1] AS FLOAT(53)) AS [LogProba_1], CAST([RF_Model_0].[Score_2] AS FLOAT(53)) AS [Score_2], CAST([RF_Model_0].[Proba_2] AS FLOAT(53)) AS [Proba_2], CAST([RF_Model_0].[LogProba_2] AS FLOAT(53)) AS [LogProba_2], CAST([RF_Model_0].[Score_3] AS FLOAT(53)) AS [Score_3], CAST([RF_Model_0].[Proba_3] AS FLOAT(53)) AS [Proba_3], CAST([RF_Model_0].[LogProba_3] AS FLOAT(53)) AS [LogProba_3] 
FROM [RF_Model_0] UNION ALL SELECT [RF_Model_1].[KEY] AS [KEY], CAST([RF_Model_1].[Score_0] AS FLOAT(53)) AS [Score_0], CAST([RF_Model_1].[Proba_0] AS FLOAT(53)) AS [Proba_0], CAST([RF_Model_1].[LogProba_0] AS FLOAT(53)) AS [LogProba_0], CAST([RF_Model_1].[Score_1] AS FLOAT(53)) AS [Score_1], CAST([RF_Model_1].[Proba_1] AS FLOAT(53)) AS [Proba_1], CAST([RF_Model_1].[LogProba_1] AS FLOAT(53)) AS [LogProba_1], CAST([RF_Model_1].[Score_2] AS FLOAT(53)) AS [Score_2], CAST([RF_Model_1].[Proba_2] AS FLOAT(53)) AS [Proba_2], CAST([RF_Model_1].[LogProba_2] AS FLOAT(53)) AS [LogProba_2], CAST([RF_Model_1].[Score_3] AS FLOAT(53)) AS [Score_3], CAST([RF_Model_1].[Proba_3] AS FLOAT(53)) AS [Proba_3], CAST([RF_Model_1].[LogProba_3] AS FLOAT(53)) AS [LogProba_3] 
FROM [RF_Model_1] UNION ALL SELECT [RF_Model_2].[KEY] AS [KEY], CAST([RF_Model_2].[Score_0] AS FLOAT(53)) AS [Score_0], CAST([RF_Model_2].[Proba_0] AS FLOAT(53)) AS [Proba_0], CAST([RF_Model_2].[LogProba_0] AS FLOAT(53)) AS [LogProba_0], CAST([RF_Model_2].[Score_1] AS FLOAT(53)) AS [Score_1], CAST([RF_Model_2].[Proba_1] AS FLOAT(53)) AS [Proba_1], CAST([RF_Model_2].[LogProba_1] AS FLOAT(53)) AS [LogProba_1], CAST([RF_Model_2].[Score_2] AS FLOAT(53)) AS [Score_2], CAST([RF_Model_2].[Proba_2] AS FLOAT(53)) AS [Proba_2], CAST([RF_Model_2].[LogProba_2] AS FLOAT(53)) AS [LogProba_2], CAST([RF_Model_2].[Score_3] AS FLOAT(53)) AS [Score_3], CAST([RF_Model_2].[Proba_3] AS FLOAT(53)) AS [Proba_3], CAST([RF_Model_2].[LogProba_3] AS FLOAT(53)) AS [LogProba_3] 
FROM [RF_Model_2] UNION ALL SELECT [RF_Model_3].[KEY] AS [KEY], CAST([RF_Model_3].[Score_0] AS FLOAT(53)) AS [Score_0], CAST([RF_Model_3].[Proba_0] AS FLOAT(53)) AS [Proba_0], CAST([RF_Model_3].[LogProba_0] AS FLOAT(53)) AS [LogProba_0], CAST([RF_Model_3].[Score_1] AS FLOAT(53)) AS [Score_1], CAST([RF_Model_3].[Proba_1] AS FLOAT(53)) AS [Proba_1], CAST([RF_Model_3].[LogProba_1] AS FLOAT(53)) AS [LogProba_1], CAST([RF_Model_3].[Score_2] AS FLOAT(53)) AS [Score_2], CAST([RF_Model_3].[Proba_2] AS FLOAT(53)) AS [Proba_2], CAST([RF_Model_3].[LogProba_2] AS FLOAT(53)) AS [LogProba_2], CAST([RF_Model_3].[Score_3] AS FLOAT(53)) AS [Score_3], CAST([RF_Model_3].[Proba_3] AS FLOAT(53)) AS [Proba_3], CAST([RF_Model_3].[LogProba_3] AS FLOAT(53)) AS [LogProba_3] 
FROM [RF_Model_3] UNION ALL SELECT [RF_Model_4].[KEY] AS [KEY], CAST([RF_Model_4].[Score_0] AS FLOAT(53)) AS [Score_0], CAST([RF_Model_4].[Proba_0] AS FLOAT(53)) AS [Proba_0], CAST([RF_Model_4].[LogProba_0] AS FLOAT(53)) AS [LogProba_0], CAST([RF_Model_4].[Score_1] AS FLOAT(53)) AS [Score_1], CAST([RF_Model_4].[Proba_1] AS FLOAT(53)) AS [Proba_1], CAST([RF_Model_4].[LogProba_1] AS FLOAT(53)) AS [LogProba_1], CAST([RF_Model_4].[Score_2] AS FLOAT(53)) AS [Score_2], CAST([RF_Model_4].[Proba_2] AS FLOAT(53)) AS [Proba_2], CAST([RF_Model_4].[LogProba_2] AS FLOAT(53)) AS [LogProba_2], CAST([RF_Model_4].[Score_3] AS FLOAT(53)) AS [Score_3], CAST([RF_Model_4].[Proba_3] AS FLOAT(53)) AS [Proba_3], CAST([RF_Model_4].[LogProba_3] AS FLOAT(53)) AS [LogProba_3] 
FROM [RF_Model_4] UNION ALL SELECT [RF_Model_5].[KEY] AS [KEY], CAST([RF_Model_5].[Score_0] AS FLOAT(53)) AS [Score_0], CAST([RF_Model_5].[Proba_0] AS FLOAT(53)) AS [Proba_0], CAST([RF_Model_5].[LogProba_0] AS FLOAT(53)) AS [LogProba_0], CAST([RF_Model_5].[Score_1] AS FLOAT(53)) AS [Score_1], CAST([RF_Model_5].[Proba_1] AS FLOAT(53)) AS [Proba_1], CAST([RF_Model_5].[LogProba_1] AS FLOAT(53)) AS [LogProba_1], CAST([RF_Model_5].[Score_2] AS FLOAT(53)) AS [Score_2], CAST([RF_Model_5].[Proba_2] AS FLOAT(53)) AS [Proba_2], CAST([RF_Model_5].[LogProba_2] AS FLOAT(53)) AS [LogProba_2], CAST([RF_Model_5].[Score_3] AS FLOAT(53)) AS [Score_3], CAST([RF_Model_5].[Proba_3] AS FLOAT(53)) AS [Proba_3], CAST([RF_Model_5].[LogProba_3] AS FLOAT(53)) AS [LogProba_3] 
FROM [RF_Model_5] UNION ALL SELECT [RF_Model_6].[KEY] AS [KEY], CAST([RF_Model_6].[Score_0] AS FLOAT(53)) AS [Score_0], CAST([RF_Model_6].[Proba_0] AS FLOAT(53)) AS [Proba_0], CAST([RF_Model_6].[LogProba_0] AS FLOAT(53)) AS [LogProba_0], CAST([RF_Model_6].[Score_1] AS FLOAT(53)) AS [Score_1], CAST([RF_Model_6].[Proba_1] AS FLOAT(53)) AS [Proba_1], CAST([RF_Model_6].[LogProba_1] AS FLOAT(53)) AS [LogProba_1], CAST([RF_Model_6].[Score_2] AS FLOAT(53)) AS [Score_2], CAST([RF_Model_6].[Proba_2] AS FLOAT(53)) AS [Proba_2], CAST([RF_Model_6].[LogProba_2] AS FLOAT(53)) AS [LogProba_2], CAST([RF_Model_6].[Score_3] AS FLOAT(53)) AS [Score_3], CAST([RF_Model_6].[Proba_3] AS FLOAT(53)) AS [Proba_3], CAST([RF_Model_6].[LogProba_3] AS FLOAT(53)) AS [LogProba_3] 
FROM [RF_Model_6] UNION ALL SELECT [RF_Model_7].[KEY] AS [KEY], CAST([RF_Model_7].[Score_0] AS FLOAT(53)) AS [Score_0], CAST([RF_Model_7].[Proba_0] AS FLOAT(53)) AS [Proba_0], CAST([RF_Model_7].[LogProba_0] AS FLOAT(53)) AS [LogProba_0], CAST([RF_Model_7].[Score_1] AS FLOAT(53)) AS [Score_1], CAST([RF_Model_7].[Proba_1] AS FLOAT(53)) AS [Proba_1], CAST([RF_Model_7].[LogProba_1] AS FLOAT(53)) AS [LogProba_1], CAST([RF_Model_7].[Score_2] AS FLOAT(53)) AS [Score_2], CAST([RF_Model_7].[Proba_2] AS FLOAT(53)) AS [Proba_2], CAST([RF_Model_7].[LogProba_2] AS FLOAT(53)) AS [LogProba_2], CAST([RF_Model_7].[Score_3] AS FLOAT(53)) AS [Score_3], CAST([RF_Model_7].[Proba_3] AS FLOAT(53)) AS [Proba_3], CAST([RF_Model_7].[LogProba_3] AS FLOAT(53)) AS [LogProba_3] 
FROM [RF_Model_7] UNION ALL SELECT [RF_Model_8].[KEY] AS [KEY], CAST([RF_Model_8].[Score_0] AS FLOAT(53)) AS [Score_0], CAST([RF_Model_8].[Proba_0] AS FLOAT(53)) AS [Proba_0], CAST([RF_Model_8].[LogProba_0] AS FLOAT(53)) AS [LogProba_0], CAST([RF_Model_8].[Score_1] AS FLOAT(53)) AS [Score_1], CAST([RF_Model_8].[Proba_1] AS FLOAT(53)) AS [Proba_1], CAST([RF_Model_8].[LogProba_1] AS FLOAT(53)) AS [LogProba_1], CAST([RF_Model_8].[Score_2] AS FLOAT(53)) AS [Score_2], CAST([RF_Model_8].[Proba_2] AS FLOAT(53)) AS [Proba_2], CAST([RF_Model_8].[LogProba_2] AS FLOAT(53)) AS [LogProba_2], CAST([RF_Model_8].[Score_3] AS FLOAT(53)) AS [Score_3], CAST([RF_Model_8].[Proba_3] AS FLOAT(53)) AS [Proba_3], CAST([RF_Model_8].[LogProba_3] AS FLOAT(53)) AS [LogProba_3] 
FROM [RF_Model_8] UNION ALL SELECT [RF_Model_9].[KEY] AS [KEY], CAST([RF_Model_9].[Score_0] AS FLOAT(53)) AS [Score_0], CAST([RF_Model_9].[Proba_0] AS FLOAT(53)) AS [Proba_0], CAST([RF_Model_9].[LogProba_0] AS FLOAT(53)) AS [LogProba_0], CAST([RF_Model_9].[Score_1] AS FLOAT(53)) AS [Score_1], CAST([RF_Model_9].[Proba_1] AS FLOAT(53)) AS [Proba_1], CAST([RF_Model_9].[LogProba_1] AS FLOAT(53)) AS [LogProba_1], CAST([RF_Model_9].[Score_2] AS FLOAT(53)) AS [Score_2], CAST([RF_Model_9].[Proba_2] AS FLOAT(53)) AS [Proba_2], CAST([RF_Model_9].[LogProba_2] AS FLOAT(53)) AS [LogProba_2], CAST([RF_Model_9].[Score_3] AS FLOAT(53)) AS [Score_3], CAST([RF_Model_9].[Proba_3] AS FLOAT(53)) AS [Proba_3], CAST([RF_Model_9].[LogProba_3] AS FLOAT(53)) AS [LogProba_3] 
FROM [RF_Model_9]) AS [RF_esu_0]), 
[DT_node_lookup_10] AS 
(SELECT [ADS_pre_1_OUT].[KEY] AS [KEY], CASE WHEN ([ADS_pre_1_OUT].[PC6] <= 2.614440810623147) THEN 2 ELSE 3 END AS node_id_2 
FROM [ADS_pre_1_OUT]), 
[DT_node_data_10] AS 
(SELECT [Values].nid AS nid, [Values].[P_0] AS [P_0], [Values].[P_1] AS [P_1], [Values].[P_2] AS [P_2], [Values].[P_3] AS [P_3], [Values].[D] AS [D], [Values].[DP] AS [DP] 
FROM (SELECT 2 AS nid, 0.2962962962962963 AS [P_0], 0.2962962962962963 AS [P_1], 0.2592592592592593 AS [P_2], 0.14814814814814814 AS [P_3], 0 AS [D], 0.2962962962962963 AS [DP] UNION ALL SELECT 3 AS nid, 0.06666666666666665 AS [P_0], 0.0 AS [P_1], 0.26666666666666683 AS [P_2], 0.6666666666666665 AS [P_3], 3 AS [D], 0.6666666666666665 AS [DP]) AS [Values]), 
[DT_Output_10] AS 
(SELECT [DT_node_lookup_10].[KEY] AS [KEY], [DT_node_lookup_10].node_id_2 AS node_id_2, [DT_node_data_10].nid AS nid, [DT_node_data_10].[P_0] AS [P_0], [DT_node_data_10].[P_1] AS [P_1], [DT_node_data_10].[P_2] AS [P_2], [DT_node_data_10].[P_3] AS [P_3], [DT_node_data_10].[D] AS [D], [DT_node_data_10].[DP] AS [DP] 
FROM [DT_node_lookup_10] LEFT OUTER JOIN [DT_node_data_10] ON [DT_node_lookup_10].node_id_2 = [DT_node_data_10].nid), 
[RF_Model_10] AS 
(SELECT [DT_Output_10].[KEY] AS [KEY], CAST(NULL AS FLOAT(53)) AS [Score_0], [DT_Output_10].[P_0] AS [Proba_0], CASE WHEN ([DT_Output_10].[P_0] IS NULL OR [DT_Output_10].[P_0] > 0.0) THEN log([DT_Output_10].[P_0]) ELSE -1.79769313486231e+308 END AS [LogProba_0], CAST(NULL AS FLOAT(53)) AS [Score_1], [DT_Output_10].[P_1] AS [Proba_1], CASE WHEN ([DT_Output_10].[P_1] IS NULL OR [DT_Output_10].[P_1] > 0.0) THEN log([DT_Output_10].[P_1]) ELSE -1.79769313486231e+308 END AS [LogProba_1], CAST(NULL AS FLOAT(53)) AS [Score_2], [DT_Output_10].[P_2] AS [Proba_2], CASE WHEN ([DT_Output_10].[P_2] IS NULL OR [DT_Output_10].[P_2] > 0.0) THEN log([DT_Output_10].[P_2]) ELSE -1.79769313486231e+308 END AS [LogProba_2], CAST(NULL AS FLOAT(53)) AS [Score_3], [DT_Output_10].[P_3] AS [Proba_3], CASE WHEN ([DT_Output_10].[P_3] IS NULL OR [DT_Output_10].[P_3] > 0.0) THEN log([DT_Output_10].[P_3]) ELSE -1.79769313486231e+308 END AS [LogProba_3] 
FROM [DT_Output_10]), 
[DT_node_lookup_11] AS 
(SELECT [ADS_pre_1_OUT].[KEY] AS [KEY], CASE WHEN ([ADS_pre_1_OUT].[PC6] <= 2.614440810623147) THEN CASE WHEN ([ADS_pre_1_OUT].[PC6] <= -1.665366868372655) THEN 3 ELSE 4 END ELSE 5 END AS node_id_2 
FROM [ADS_pre_1_OUT]), 
[DT_node_data_11] AS 
(SELECT [Values].nid AS nid, [Values].[P_0] AS [P_0], [Values].[P_1] AS [P_1], [Values].[P_2] AS [P_2], [Values].[P_3] AS [P_3], [Values].[D] AS [D], [Values].[DP] AS [DP] 
FROM (SELECT 3 AS nid, 0.153846153846154 AS [P_0], 0.153846153846154 AS [P_1], 0.692307692307692 AS [P_2], 0.0 AS [P_3], 2 AS [D], 0.692307692307692 AS [DP] UNION ALL SELECT 4 AS nid, 0.32 AS [P_0], 0.213333333333333 AS [P_1], 0.2 AS [P_2], 0.266666666666667 AS [P_3], 0 AS [D], 0.32 AS [DP] UNION ALL SELECT 5 AS nid, 0.0 AS [P_0], 0.0 AS [P_1], 0.125 AS [P_2], 0.875 AS [P_3], 3 AS [D], 0.875 AS [DP]) AS [Values]), 
[DT_Output_11] AS 
(SELECT [DT_node_lookup_11].[KEY] AS [KEY], [DT_node_lookup_11].node_id_2 AS node_id_2, [DT_node_data_11].nid AS nid, [DT_node_data_11].[P_0] AS [P_0], [DT_node_data_11].[P_1] AS [P_1], [DT_node_data_11].[P_2] AS [P_2], [DT_node_data_11].[P_3] AS [P_3], [DT_node_data_11].[D] AS [D], [DT_node_data_11].[DP] AS [DP] 
FROM [DT_node_lookup_11] LEFT OUTER JOIN [DT_node_data_11] ON [DT_node_lookup_11].node_id_2 = [DT_node_data_11].nid), 
[RF_Model_11] AS 
(SELECT [DT_Output_11].[KEY] AS [KEY], CAST(NULL AS FLOAT(53)) AS [Score_0], [DT_Output_11].[P_0] AS [Proba_0], CASE WHEN ([DT_Output_11].[P_0] IS NULL OR [DT_Output_11].[P_0] > 0.0) THEN log([DT_Output_11].[P_0]) ELSE -1.79769313486231e+308 END AS [LogProba_0], CAST(NULL AS FLOAT(53)) AS [Score_1], [DT_Output_11].[P_1] AS [Proba_1], CASE WHEN ([DT_Output_11].[P_1] IS NULL OR [DT_Output_11].[P_1] > 0.0) THEN log([DT_Output_11].[P_1]) ELSE -1.79769313486231e+308 END AS [LogProba_1], CAST(NULL AS FLOAT(53)) AS [Score_2], [DT_Output_11].[P_2] AS [Proba_2], CASE WHEN ([DT_Output_11].[P_2] IS NULL OR [DT_Output_11].[P_2] > 0.0) THEN log([DT_Output_11].[P_2]) ELSE -1.79769313486231e+308 END AS [LogProba_2], CAST(NULL AS FLOAT(53)) AS [Score_3], [DT_Output_11].[P_3] AS [Proba_3], CASE WHEN ([DT_Output_11].[P_3] IS NULL OR [DT_Output_11].[P_3] > 0.0) THEN log([DT_Output_11].[P_3]) ELSE -1.79769313486231e+308 END AS [LogProba_3] 
FROM [DT_Output_11]), 
[DT_node_lookup_12] AS 
(SELECT [ADS_pre_1_OUT].[KEY] AS [KEY], CASE WHEN ([ADS_pre_1_OUT].[PC1] <= -1.997567265543833) THEN 2 ELSE CASE WHEN ([ADS_pre_1_OUT].[PC4] <= 0.7344200745987426) THEN CASE WHEN ([ADS_pre_1_OUT].[PC4] <= -1.2203445577547958) THEN 5 ELSE CASE WHEN ([ADS_pre_1_OUT].[PC2] <= -1.0919863601463191) THEN 7 ELSE CASE WHEN ([ADS_pre_1_OUT].[PC6] <= -0.8858315927669266) THEN 9 ELSE 10 END END END ELSE CASE WHEN ([ADS_pre_1_OUT].[PC3] <= -0.5180033463091563) THEN 12 ELSE 13 END END END AS node_id_2 
FROM [ADS_pre_1_OUT]), 
[DT_node_data_12] AS 
(SELECT [Values].nid AS nid, [Values].[P_0] AS [P_0], [Values].[P_1] AS [P_1], [Values].[P_2] AS [P_2], [Values].[P_3] AS [P_3], [Values].[D] AS [D], [Values].[DP] AS [DP] 
FROM (SELECT 2 AS nid, 0.2222222222222221 AS [P_0], 0.05555555555555563 AS [P_1], 0.7222222222222223 AS [P_2], 0.0 AS [P_3], 2 AS [D], 0.7222222222222223 AS [DP] UNION ALL SELECT 5 AS nid, 0.266666666666667 AS [P_0], 0.4 AS [P_1], 0.0 AS [P_2], 0.333333333333333 AS [P_3], 1 AS [D], 0.4 AS [DP] UNION ALL SELECT 7 AS nid, 0.636363636363636 AS [P_0], 0.0 AS [P_1], 0.363636363636364 AS [P_2], 0.0 AS [P_3], 0 AS [D], 0.636363636363636 AS [DP] UNION ALL SELECT 9 AS nid, 0.25 AS [P_0], 0.125 AS [P_1], 0.0 AS [P_2], 0.625 AS [P_3], 3 AS [D], 0.625 AS [DP] UNION ALL SELECT 10 AS nid, 0.272727272727273 AS [P_0], 0.0 AS [P_1], 0.0 AS [P_2], 0.727272727272727 AS [P_3], 3 AS [D], 0.727272727272727 AS [DP] UNION ALL SELECT 12 AS nid, 0.125 AS [P_0], 0.875 AS [P_1], 0.0 AS [P_2], 0.0 AS [P_3], 1 AS [D], 0.875 AS [DP] UNION ALL SELECT 13 AS nid, 0.0 AS [P_0], 0.4999999999999998 AS [P_1], 0.07142857142857137 AS [P_2], 0.4285714285714288 AS [P_3], 1 AS [D], 0.4999999999999998 AS [DP]) AS [Values]), 
[DT_Output_12] AS 
(SELECT [DT_node_lookup_12].[KEY] AS [KEY], [DT_node_lookup_12].node_id_2 AS node_id_2, [DT_node_data_12].nid AS nid, [DT_node_data_12].[P_0] AS [P_0], [DT_node_data_12].[P_1] AS [P_1], [DT_node_data_12].[P_2] AS [P_2], [DT_node_data_12].[P_3] AS [P_3], [DT_node_data_12].[D] AS [D], [DT_node_data_12].[DP] AS [DP] 
FROM [DT_node_lookup_12] LEFT OUTER JOIN [DT_node_data_12] ON [DT_node_lookup_12].node_id_2 = [DT_node_data_12].nid), 
[RF_Model_12] AS 
(SELECT [DT_Output_12].[KEY] AS [KEY], CAST(NULL AS FLOAT(53)) AS [Score_0], [DT_Output_12].[P_0] AS [Proba_0], CASE WHEN ([DT_Output_12].[P_0] IS NULL OR [DT_Output_12].[P_0] > 0.0) THEN log([DT_Output_12].[P_0]) ELSE -1.79769313486231e+308 END AS [LogProba_0], CAST(NULL AS FLOAT(53)) AS [Score_1], [DT_Output_12].[P_1] AS [Proba_1], CASE WHEN ([DT_Output_12].[P_1] IS NULL OR [DT_Output_12].[P_1] > 0.0) THEN log([DT_Output_12].[P_1]) ELSE -1.79769313486231e+308 END AS [LogProba_1], CAST(NULL AS FLOAT(53)) AS [Score_2], [DT_Output_12].[P_2] AS [Proba_2], CASE WHEN ([DT_Output_12].[P_2] IS NULL OR [DT_Output_12].[P_2] > 0.0) THEN log([DT_Output_12].[P_2]) ELSE -1.79769313486231e+308 END AS [LogProba_2], CAST(NULL AS FLOAT(53)) AS [Score_3], [DT_Output_12].[P_3] AS [Proba_3], CASE WHEN ([DT_Output_12].[P_3] IS NULL OR [DT_Output_12].[P_3] > 0.0) THEN log([DT_Output_12].[P_3]) ELSE -1.79769313486231e+308 END AS [LogProba_3] 
FROM [DT_Output_12]), 
[DT_node_lookup_13] AS 
(SELECT [ADS_pre_1_OUT].[KEY] AS [KEY], CASE WHEN ([ADS_pre_1_OUT].[PC2] <= -0.1864604090697288) THEN CASE WHEN ([ADS_pre_1_OUT].[PC7] <= 0.9721386218853104) THEN 3 ELSE 4 END ELSE CASE WHEN ([ADS_pre_1_OUT].[PC4] <= 0.6529809094732077) THEN CASE WHEN ([ADS_pre_1_OUT].[PC4] <= -2.3807297636866736) THEN 7 ELSE CASE WHEN ([ADS_pre_1_OUT].[PC3] <= -0.7983381680868058) THEN 9 ELSE 10 END END ELSE 11 END END AS node_id_2 
FROM [ADS_pre_1_OUT]), 
[DT_node_data_13] AS 
(SELECT [Values].nid AS nid, [Values].[P_0] AS [P_0], [Values].[P_1] AS [P_1], [Values].[P_2] AS [P_2], [Values].[P_3] AS [P_3], [Values].[D] AS [D], [Values].[DP] AS [DP] 
FROM (SELECT 3 AS nid, 0.38888888888888856 AS [P_0], 0.3055555555555557 AS [P_1], 0.3055555555555557 AS [P_2], 0.0 AS [P_3], 0 AS [D], 0.38888888888888856 AS [DP] UNION ALL SELECT 4 AS nid, 0.14285714285714285 AS [P_0], 0.2857142857142857 AS [P_1], 0.2857142857142857 AS [P_2], 0.2857142857142857 AS [P_3], 1 AS [D], 0.2857142857142857 AS [DP] UNION ALL SELECT 7 AS nid, 0.4285714285714286 AS [P_0], 0.2857142857142857 AS [P_1], 0.14285714285714285 AS [P_2], 0.14285714285714285 AS [P_3], 0 AS [D], 0.4285714285714286 AS [DP] UNION ALL SELECT 9 AS nid, 0.0 AS [P_0], 0.461538461538462 AS [P_1], 0.0 AS [P_2], 0.538461538461538 AS [P_3], 3 AS [D], 0.538461538461538 AS [DP] UNION ALL SELECT 10 AS nid, 0.0 AS [P_0], 0.176470588235294 AS [P_1], 0.529411764705882 AS [P_2], 0.294117647058824 AS [P_3], 2 AS [D], 0.529411764705882 AS [DP] UNION ALL SELECT 11 AS nid, 0.5 AS [P_0], 0.0625 AS [P_1], 0.1875 AS [P_2], 0.25 AS [P_3], 0 AS [D], 0.5 AS [DP]) AS [Values]), 
[DT_Output_13] AS 
(SELECT [DT_node_lookup_13].[KEY] AS [KEY], [DT_node_lookup_13].node_id_2 AS node_id_2, [DT_node_data_13].nid AS nid, [DT_node_data_13].[P_0] AS [P_0], [DT_node_data_13].[P_1] AS [P_1], [DT_node_data_13].[P_2] AS [P_2], [DT_node_data_13].[P_3] AS [P_3], [DT_node_data_13].[D] AS [D], [DT_node_data_13].[DP] AS [DP] 
FROM [DT_node_lookup_13] LEFT OUTER JOIN [DT_node_data_13] ON [DT_node_lookup_13].node_id_2 = [DT_node_data_13].nid), 
[RF_Model_13] AS 
(SELECT [DT_Output_13].[KEY] AS [KEY], CAST(NULL AS FLOAT(53)) AS [Score_0], [DT_Output_13].[P_0] AS [Proba_0], CASE WHEN ([DT_Output_13].[P_0] IS NULL OR [DT_Output_13].[P_0] > 0.0) THEN log([DT_Output_13].[P_0]) ELSE -1.79769313486231e+308 END AS [LogProba_0], CAST(NULL AS FLOAT(53)) AS [Score_1], [DT_Output_13].[P_1] AS [Proba_1], CASE WHEN ([DT_Output_13].[P_1] IS NULL OR [DT_Output_13].[P_1] > 0.0) THEN log([DT_Output_13].[P_1]) ELSE -1.79769313486231e+308 END AS [LogProba_1], CAST(NULL AS FLOAT(53)) AS [Score_2], [DT_Output_13].[P_2] AS [Proba_2], CASE WHEN ([DT_Output_13].[P_2] IS NULL OR [DT_Output_13].[P_2] > 0.0) THEN log([DT_Output_13].[P_2]) ELSE -1.79769313486231e+308 END AS [LogProba_2], CAST(NULL AS FLOAT(53)) AS [Score_3], [DT_Output_13].[P_3] AS [Proba_3], CASE WHEN ([DT_Output_13].[P_3] IS NULL OR [DT_Output_13].[P_3] > 0.0) THEN log([DT_Output_13].[P_3]) ELSE -1.79769313486231e+308 END AS [LogProba_3] 
FROM [DT_Output_13]), 
[DT_node_lookup_14] AS 
(SELECT [ADS_pre_1_OUT].[KEY] AS [KEY], CASE WHEN ([ADS_pre_1_OUT].[PC5] <= -0.296545856263938) THEN CASE WHEN ([ADS_pre_1_OUT].[PC6] <= 1.090637748676213) THEN CASE WHEN ([ADS_pre_1_OUT].[PC1] <= -2.1242632025869317) THEN 4 ELSE CASE WHEN ([ADS_pre_1_OUT].[PC4] <= -0.8626078528509504) THEN 6 ELSE 7 END END ELSE 8 END ELSE CASE WHEN ([ADS_pre_1_OUT].[PC2] <= 2.0955134620747016) THEN CASE WHEN ([ADS_pre_1_OUT].[PC2] <= 0.039262656342331115) THEN CASE WHEN ([ADS_pre_1_OUT].[PC5] <= 1.327629585992232) THEN 12 ELSE 13 END ELSE 14 END ELSE 15 END END AS node_id_2 
FROM [ADS_pre_1_OUT]), 
[DT_node_data_14] AS 
(SELECT [Values].nid AS nid, [Values].[P_0] AS [P_0], [Values].[P_1] AS [P_1], [Values].[P_2] AS [P_2], [Values].[P_3] AS [P_3], [Values].[D] AS [D], [Values].[DP] AS [DP] 
FROM (SELECT 4 AS nid, 0.07142857142857137 AS [P_0], 0.0 AS [P_1], 0.9285714285714286 AS [P_2], 0.0 AS [P_3], 2 AS [D], 0.9285714285714286 AS [DP] UNION ALL SELECT 6 AS nid, 0.4285714285714286 AS [P_0], 0.2857142857142857 AS [P_1], 0.2857142857142857 AS [P_2], 0.0 AS [P_3], 0 AS [D], 0.4285714285714286 AS [DP] UNION ALL SELECT 7 AS nid, 0.4 AS [P_0], 0.266666666666667 AS [P_1], 0.0 AS [P_2], 0.333333333333333 AS [P_3], 0 AS [D], 0.4 AS [DP] UNION ALL SELECT 8 AS nid, 0.0 AS [P_0], 0.7 AS [P_1], 0.0 AS [P_2], 0.3 AS [P_3], 1 AS [D], 0.7 AS [DP] UNION ALL SELECT 12 AS nid, 0.714285714285714 AS [P_0], 0.142857142857143 AS [P_1], 0.142857142857143 AS [P_2], 0.0 AS [P_3], 0 AS [D], 0.714285714285714 AS [DP] UNION ALL SELECT 13 AS nid, 0.2 AS [P_0], 0.4 AS [P_1], 0.1 AS [P_2], 0.3 AS [P_3], 1 AS [D], 0.4 AS [DP] UNION ALL SELECT 14 AS nid, 0.1666666666666669 AS [P_0], 0.6666666666666666 AS [P_1], 0.11111111111111094 AS [P_2], 0.05555555555555557 AS [P_3], 1 AS [D], 0.6666666666666666 AS [DP] UNION ALL SELECT 15 AS nid, 0.0 AS [P_0], 0.125 AS [P_1], 0.0 AS [P_2], 0.875 AS [P_3], 3 AS [D], 0.875 AS [DP]) AS [Values]), 
[DT_Output_14] AS 
(SELECT [DT_node_lookup_14].[KEY] AS [KEY], [DT_node_lookup_14].node_id_2 AS node_id_2, [DT_node_data_14].nid AS nid, [DT_node_data_14].[P_0] AS [P_0], [DT_node_data_14].[P_1] AS [P_1], [DT_node_data_14].[P_2] AS [P_2], [DT_node_data_14].[P_3] AS [P_3], [DT_node_data_14].[D] AS [D], [DT_node_data_14].[DP] AS [DP] 
FROM [DT_node_lookup_14] LEFT OUTER JOIN [DT_node_data_14] ON [DT_node_lookup_14].node_id_2 = [DT_node_data_14].nid), 
[RF_Model_14] AS 
(SELECT [DT_Output_14].[KEY] AS [KEY], CAST(NULL AS FLOAT(53)) AS [Score_0], [DT_Output_14].[P_0] AS [Proba_0], CASE WHEN ([DT_Output_14].[P_0] IS NULL OR [DT_Output_14].[P_0] > 0.0) THEN log([DT_Output_14].[P_0]) ELSE -1.79769313486231e+308 END AS [LogProba_0], CAST(NULL AS FLOAT(53)) AS [Score_1], [DT_Output_14].[P_1] AS [Proba_1], CASE WHEN ([DT_Output_14].[P_1] IS NULL OR [DT_Output_14].[P_1] > 0.0) THEN log([DT_Output_14].[P_1]) ELSE -1.79769313486231e+308 END AS [LogProba_1], CAST(NULL AS FLOAT(53)) AS [Score_2], [DT_Output_14].[P_2] AS [Proba_2], CASE WHEN ([DT_Output_14].[P_2] IS NULL OR [DT_Output_14].[P_2] > 0.0) THEN log([DT_Output_14].[P_2]) ELSE -1.79769313486231e+308 END AS [LogProba_2], CAST(NULL AS FLOAT(53)) AS [Score_3], [DT_Output_14].[P_3] AS [Proba_3], CASE WHEN ([DT_Output_14].[P_3] IS NULL OR [DT_Output_14].[P_3] > 0.0) THEN log([DT_Output_14].[P_3]) ELSE -1.79769313486231e+308 END AS [LogProba_3] 
FROM [DT_Output_14]), 
[DT_node_lookup_15] AS 
(SELECT [ADS_pre_1_OUT].[KEY] AS [KEY], CASE WHEN ([ADS_pre_1_OUT].[PC4] <= -2.841595509724217) THEN 2 ELSE CASE WHEN ([ADS_pre_1_OUT].[PC4] <= -0.7642230666527174) THEN 4 ELSE CASE WHEN ([ADS_pre_1_OUT].[PC7] <= 1.7330785030215081) THEN 6 ELSE 7 END END END AS node_id_2 
FROM [ADS_pre_1_OUT]), 
[DT_node_data_15] AS 
(SELECT [Values].nid AS nid, [Values].[P_0] AS [P_0], [Values].[P_1] AS [P_1], [Values].[P_2] AS [P_2], [Values].[P_3] AS [P_3], [Values].[D] AS [D], [Values].[DP] AS [DP] 
FROM (SELECT 2 AS nid, 0.75 AS [P_0], 0.0 AS [P_1], 0.125 AS [P_2], 0.125 AS [P_3], 0 AS [D], 0.75 AS [DP] UNION ALL SELECT 4 AS nid, 0.2 AS [P_0], 0.52 AS [P_1], 0.12 AS [P_2], 0.16 AS [P_3], 1 AS [D], 0.52 AS [DP] UNION ALL SELECT 6 AS nid, 0.303571428571429 AS [P_0], 0.142857142857143 AS [P_1], 0.339285714285714 AS [P_2], 0.214285714285714 AS [P_3], 2 AS [D], 0.339285714285714 AS [DP] UNION ALL SELECT 7 AS nid, 0.142857142857143 AS [P_0], 0.714285714285714 AS [P_1], 0.0 AS [P_2], 0.142857142857143 AS [P_3], 1 AS [D], 0.714285714285714 AS [DP]) AS [Values]), 
[DT_Output_15] AS 
(SELECT [DT_node_lookup_15].[KEY] AS [KEY], [DT_node_lookup_15].node_id_2 AS node_id_2, [DT_node_data_15].nid AS nid, [DT_node_data_15].[P_0] AS [P_0], [DT_node_data_15].[P_1] AS [P_1], [DT_node_data_15].[P_2] AS [P_2], [DT_node_data_15].[P_3] AS [P_3], [DT_node_data_15].[D] AS [D], [DT_node_data_15].[DP] AS [DP] 
FROM [DT_node_lookup_15] LEFT OUTER JOIN [DT_node_data_15] ON [DT_node_lookup_15].node_id_2 = [DT_node_data_15].nid), 
[RF_Model_15] AS 
(SELECT [DT_Output_15].[KEY] AS [KEY], CAST(NULL AS FLOAT(53)) AS [Score_0], [DT_Output_15].[P_0] AS [Proba_0], CASE WHEN ([DT_Output_15].[P_0] IS NULL OR [DT_Output_15].[P_0] > 0.0) THEN log([DT_Output_15].[P_0]) ELSE -1.79769313486231e+308 END AS [LogProba_0], CAST(NULL AS FLOAT(53)) AS [Score_1], [DT_Output_15].[P_1] AS [Proba_1], CASE WHEN ([DT_Output_15].[P_1] IS NULL OR [DT_Output_15].[P_1] > 0.0) THEN log([DT_Output_15].[P_1]) ELSE -1.79769313486231e+308 END AS [LogProba_1], CAST(NULL AS FLOAT(53)) AS [Score_2], [DT_Output_15].[P_2] AS [Proba_2], CASE WHEN ([DT_Output_15].[P_2] IS NULL OR [DT_Output_15].[P_2] > 0.0) THEN log([DT_Output_15].[P_2]) ELSE -1.79769313486231e+308 END AS [LogProba_2], CAST(NULL AS FLOAT(53)) AS [Score_3], [DT_Output_15].[P_3] AS [Proba_3], CASE WHEN ([DT_Output_15].[P_3] IS NULL OR [DT_Output_15].[P_3] > 0.0) THEN log([DT_Output_15].[P_3]) ELSE -1.79769313486231e+308 END AS [LogProba_3] 
FROM [DT_Output_15]), 
[RF_1] AS 
(SELECT [RF_esu_1].[KEY] AS [KEY], [RF_esu_1].[Score_0] AS [Score_0], [RF_esu_1].[Proba_0] AS [Proba_0], [RF_esu_1].[LogProba_0] AS [LogProba_0], [RF_esu_1].[Score_1] AS [Score_1], [RF_esu_1].[Proba_1] AS [Proba_1], [RF_esu_1].[LogProba_1] AS [LogProba_1], [RF_esu_1].[Score_2] AS [Score_2], [RF_esu_1].[Proba_2] AS [Proba_2], [RF_esu_1].[LogProba_2] AS [LogProba_2], [RF_esu_1].[Score_3] AS [Score_3], [RF_esu_1].[Proba_3] AS [Proba_3], [RF_esu_1].[LogProba_3] AS [LogProba_3] 
FROM (SELECT [RF_Model_10].[KEY] AS [KEY], CAST([RF_Model_10].[Score_0] AS FLOAT(53)) AS [Score_0], CAST([RF_Model_10].[Proba_0] AS FLOAT(53)) AS [Proba_0], CAST([RF_Model_10].[LogProba_0] AS FLOAT(53)) AS [LogProba_0], CAST([RF_Model_10].[Score_1] AS FLOAT(53)) AS [Score_1], CAST([RF_Model_10].[Proba_1] AS FLOAT(53)) AS [Proba_1], CAST([RF_Model_10].[LogProba_1] AS FLOAT(53)) AS [LogProba_1], CAST([RF_Model_10].[Score_2] AS FLOAT(53)) AS [Score_2], CAST([RF_Model_10].[Proba_2] AS FLOAT(53)) AS [Proba_2], CAST([RF_Model_10].[LogProba_2] AS FLOAT(53)) AS [LogProba_2], CAST([RF_Model_10].[Score_3] AS FLOAT(53)) AS [Score_3], CAST([RF_Model_10].[Proba_3] AS FLOAT(53)) AS [Proba_3], CAST([RF_Model_10].[LogProba_3] AS FLOAT(53)) AS [LogProba_3] 
FROM [RF_Model_10] UNION ALL SELECT [RF_Model_11].[KEY] AS [KEY], CAST([RF_Model_11].[Score_0] AS FLOAT(53)) AS [Score_0], CAST([RF_Model_11].[Proba_0] AS FLOAT(53)) AS [Proba_0], CAST([RF_Model_11].[LogProba_0] AS FLOAT(53)) AS [LogProba_0], CAST([RF_Model_11].[Score_1] AS FLOAT(53)) AS [Score_1], CAST([RF_Model_11].[Proba_1] AS FLOAT(53)) AS [Proba_1], CAST([RF_Model_11].[LogProba_1] AS FLOAT(53)) AS [LogProba_1], CAST([RF_Model_11].[Score_2] AS FLOAT(53)) AS [Score_2], CAST([RF_Model_11].[Proba_2] AS FLOAT(53)) AS [Proba_2], CAST([RF_Model_11].[LogProba_2] AS FLOAT(53)) AS [LogProba_2], CAST([RF_Model_11].[Score_3] AS FLOAT(53)) AS [Score_3], CAST([RF_Model_11].[Proba_3] AS FLOAT(53)) AS [Proba_3], CAST([RF_Model_11].[LogProba_3] AS FLOAT(53)) AS [LogProba_3] 
FROM [RF_Model_11] UNION ALL SELECT [RF_Model_12].[KEY] AS [KEY], CAST([RF_Model_12].[Score_0] AS FLOAT(53)) AS [Score_0], CAST([RF_Model_12].[Proba_0] AS FLOAT(53)) AS [Proba_0], CAST([RF_Model_12].[LogProba_0] AS FLOAT(53)) AS [LogProba_0], CAST([RF_Model_12].[Score_1] AS FLOAT(53)) AS [Score_1], CAST([RF_Model_12].[Proba_1] AS FLOAT(53)) AS [Proba_1], CAST([RF_Model_12].[LogProba_1] AS FLOAT(53)) AS [LogProba_1], CAST([RF_Model_12].[Score_2] AS FLOAT(53)) AS [Score_2], CAST([RF_Model_12].[Proba_2] AS FLOAT(53)) AS [Proba_2], CAST([RF_Model_12].[LogProba_2] AS FLOAT(53)) AS [LogProba_2], CAST([RF_Model_12].[Score_3] AS FLOAT(53)) AS [Score_3], CAST([RF_Model_12].[Proba_3] AS FLOAT(53)) AS [Proba_3], CAST([RF_Model_12].[LogProba_3] AS FLOAT(53)) AS [LogProba_3] 
FROM [RF_Model_12] UNION ALL SELECT [RF_Model_13].[KEY] AS [KEY], CAST([RF_Model_13].[Score_0] AS FLOAT(53)) AS [Score_0], CAST([RF_Model_13].[Proba_0] AS FLOAT(53)) AS [Proba_0], CAST([RF_Model_13].[LogProba_0] AS FLOAT(53)) AS [LogProba_0], CAST([RF_Model_13].[Score_1] AS FLOAT(53)) AS [Score_1], CAST([RF_Model_13].[Proba_1] AS FLOAT(53)) AS [Proba_1], CAST([RF_Model_13].[LogProba_1] AS FLOAT(53)) AS [LogProba_1], CAST([RF_Model_13].[Score_2] AS FLOAT(53)) AS [Score_2], CAST([RF_Model_13].[Proba_2] AS FLOAT(53)) AS [Proba_2], CAST([RF_Model_13].[LogProba_2] AS FLOAT(53)) AS [LogProba_2], CAST([RF_Model_13].[Score_3] AS FLOAT(53)) AS [Score_3], CAST([RF_Model_13].[Proba_3] AS FLOAT(53)) AS [Proba_3], CAST([RF_Model_13].[LogProba_3] AS FLOAT(53)) AS [LogProba_3] 
FROM [RF_Model_13] UNION ALL SELECT [RF_Model_14].[KEY] AS [KEY], CAST([RF_Model_14].[Score_0] AS FLOAT(53)) AS [Score_0], CAST([RF_Model_14].[Proba_0] AS FLOAT(53)) AS [Proba_0], CAST([RF_Model_14].[LogProba_0] AS FLOAT(53)) AS [LogProba_0], CAST([RF_Model_14].[Score_1] AS FLOAT(53)) AS [Score_1], CAST([RF_Model_14].[Proba_1] AS FLOAT(53)) AS [Proba_1], CAST([RF_Model_14].[LogProba_1] AS FLOAT(53)) AS [LogProba_1], CAST([RF_Model_14].[Score_2] AS FLOAT(53)) AS [Score_2], CAST([RF_Model_14].[Proba_2] AS FLOAT(53)) AS [Proba_2], CAST([RF_Model_14].[LogProba_2] AS FLOAT(53)) AS [LogProba_2], CAST([RF_Model_14].[Score_3] AS FLOAT(53)) AS [Score_3], CAST([RF_Model_14].[Proba_3] AS FLOAT(53)) AS [Proba_3], CAST([RF_Model_14].[LogProba_3] AS FLOAT(53)) AS [LogProba_3] 
FROM [RF_Model_14] UNION ALL SELECT [RF_Model_15].[KEY] AS [KEY], CAST([RF_Model_15].[Score_0] AS FLOAT(53)) AS [Score_0], CAST([RF_Model_15].[Proba_0] AS FLOAT(53)) AS [Proba_0], CAST([RF_Model_15].[LogProba_0] AS FLOAT(53)) AS [LogProba_0], CAST([RF_Model_15].[Score_1] AS FLOAT(53)) AS [Score_1], CAST([RF_Model_15].[Proba_1] AS FLOAT(53)) AS [Proba_1], CAST([RF_Model_15].[LogProba_1] AS FLOAT(53)) AS [LogProba_1], CAST([RF_Model_15].[Score_2] AS FLOAT(53)) AS [Score_2], CAST([RF_Model_15].[Proba_2] AS FLOAT(53)) AS [Proba_2], CAST([RF_Model_15].[LogProba_2] AS FLOAT(53)) AS [LogProba_2], CAST([RF_Model_15].[Score_3] AS FLOAT(53)) AS [Score_3], CAST([RF_Model_15].[Proba_3] AS FLOAT(53)) AS [Proba_3], CAST([RF_Model_15].[LogProba_3] AS FLOAT(53)) AS [LogProba_3] 
FROM [RF_Model_15]) AS [RF_esu_1]), 
[RF] AS 
(SELECT [RFbig_esu].[KEY] AS [KEY], [RFbig_esu].[Score_0] AS [Score_0], [RFbig_esu].[Proba_0] AS [Proba_0], [RFbig_esu].[LogProba_0] AS [LogProba_0], [RFbig_esu].[Score_1] AS [Score_1], [RFbig_esu].[Proba_1] AS [Proba_1], [RFbig_esu].[LogProba_1] AS [LogProba_1], [RFbig_esu].[Score_2] AS [Score_2], [RFbig_esu].[Proba_2] AS [Proba_2], [RFbig_esu].[LogProba_2] AS [LogProba_2], [RFbig_esu].[Score_3] AS [Score_3], [RFbig_esu].[Proba_3] AS [Proba_3], [RFbig_esu].[LogProba_3] AS [LogProba_3] 
FROM (SELECT [RF_0].[KEY] AS [KEY], CAST([RF_0].[Score_0] AS FLOAT(53)) AS [Score_0], CAST([RF_0].[Proba_0] AS FLOAT(53)) AS [Proba_0], CAST([RF_0].[LogProba_0] AS FLOAT(53)) AS [LogProba_0], CAST([RF_0].[Score_1] AS FLOAT(53)) AS [Score_1], CAST([RF_0].[Proba_1] AS FLOAT(53)) AS [Proba_1], CAST([RF_0].[LogProba_1] AS FLOAT(53)) AS [LogProba_1], CAST([RF_0].[Score_2] AS FLOAT(53)) AS [Score_2], CAST([RF_0].[Proba_2] AS FLOAT(53)) AS [Proba_2], CAST([RF_0].[LogProba_2] AS FLOAT(53)) AS [LogProba_2], CAST([RF_0].[Score_3] AS FLOAT(53)) AS [Score_3], CAST([RF_0].[Proba_3] AS FLOAT(53)) AS [Proba_3], CAST([RF_0].[LogProba_3] AS FLOAT(53)) AS [LogProba_3] 
FROM [RF_0] UNION ALL SELECT [RF_1].[KEY] AS [KEY], CAST([RF_1].[Score_0] AS FLOAT(53)) AS [Score_0], CAST([RF_1].[Proba_0] AS FLOAT(53)) AS [Proba_0], CAST([RF_1].[LogProba_0] AS FLOAT(53)) AS [LogProba_0], CAST([RF_1].[Score_1] AS FLOAT(53)) AS [Score_1], CAST([RF_1].[Proba_1] AS FLOAT(53)) AS [Proba_1], CAST([RF_1].[LogProba_1] AS FLOAT(53)) AS [LogProba_1], CAST([RF_1].[Score_2] AS FLOAT(53)) AS [Score_2], CAST([RF_1].[Proba_2] AS FLOAT(53)) AS [Proba_2], CAST([RF_1].[LogProba_2] AS FLOAT(53)) AS [LogProba_2], CAST([RF_1].[Score_3] AS FLOAT(53)) AS [Score_3], CAST([RF_1].[Proba_3] AS FLOAT(53)) AS [Proba_3], CAST([RF_1].[LogProba_3] AS FLOAT(53)) AS [LogProba_3] 
FROM [RF_1]) AS [RFbig_esu]), 
[RF_avg] AS 
(SELECT [T].[KEY] AS [KEY], CAST([T].[Score_0] AS FLOAT(53)) AS [Score_0], CAST([T].[Proba_0] AS FLOAT(53)) AS [Proba_0], CAST([T].[LogProba_0] AS FLOAT(53)) AS [LogProba_0], CAST([T].[Score_1] AS FLOAT(53)) AS [Score_1], CAST([T].[Proba_1] AS FLOAT(53)) AS [Proba_1], CAST([T].[LogProba_1] AS FLOAT(53)) AS [LogProba_1], CAST([T].[Score_2] AS FLOAT(53)) AS [Score_2], CAST([T].[Proba_2] AS FLOAT(53)) AS [Proba_2], CAST([T].[LogProba_2] AS FLOAT(53)) AS [LogProba_2], CAST([T].[Score_3] AS FLOAT(53)) AS [Score_3], CAST([T].[Proba_3] AS FLOAT(53)) AS [Proba_3], CAST([T].[LogProba_3] AS FLOAT(53)) AS [LogProba_3] 
FROM (SELECT [RF].[KEY] AS [KEY], avg(CAST([RF].[Score_0] AS FLOAT(53))) AS [Score_0], avg(CAST([RF].[Proba_0] AS FLOAT(53))) AS [Proba_0], CAST(NULL AS FLOAT(53)) AS [LogProba_0], avg(CAST([RF].[Score_1] AS FLOAT(53))) AS [Score_1], avg(CAST([RF].[Proba_1] AS FLOAT(53))) AS [Proba_1], CAST(NULL AS FLOAT(53)) AS [LogProba_1], avg(CAST([RF].[Score_2] AS FLOAT(53))) AS [Score_2], avg(CAST([RF].[Proba_2] AS FLOAT(53))) AS [Proba_2], CAST(NULL AS FLOAT(53)) AS [LogProba_2], avg(CAST([RF].[Score_3] AS FLOAT(53))) AS [Score_3], avg(CAST([RF].[Proba_3] AS FLOAT(53))) AS [Proba_3], CAST(NULL AS FLOAT(53)) AS [LogProba_3] 
FROM [RF] GROUP BY [RF].[KEY]) AS [T]), 
orig_cte AS 
(SELECT [RF_avg].[KEY] AS [KEY], [RF_avg].[Score_0] AS [Score_0], [RF_avg].[Score_1] AS [Score_1], [RF_avg].[Score_2] AS [Score_2], [RF_avg].[Score_3] AS [Score_3], [RF_avg].[Proba_0] AS [Proba_0], [RF_avg].[Proba_1] AS [Proba_1], [RF_avg].[Proba_2] AS [Proba_2], [RF_avg].[Proba_3] AS [Proba_3], [RF_avg].[LogProba_0] AS [LogProba_0], [RF_avg].[LogProba_1] AS [LogProba_1], [RF_avg].[LogProba_2] AS [LogProba_2], [RF_avg].[LogProba_3] AS [LogProba_3], CAST(NULL AS BIGINT) AS [Decision], CAST(NULL AS FLOAT(53)) AS [DecisionProba] 
FROM [RF_avg]), 
score_class_union AS 
(SELECT scu.[KEY_u] AS [KEY_u], scu.class AS class, scu.[LogProba] AS [LogProba], scu.[Proba] AS [Proba], scu.[Score] AS [Score] 
FROM (SELECT orig_cte.[KEY] AS [KEY_u], 0 AS class, orig_cte.[LogProba_0] AS [LogProba], orig_cte.[Proba_0] AS [Proba], orig_cte.[Score_0] AS [Score] 
FROM orig_cte UNION ALL SELECT orig_cte.[KEY] AS [KEY_u], 1 AS class, orig_cte.[LogProba_1] AS [LogProba], orig_cte.[Proba_1] AS [Proba], orig_cte.[Score_1] AS [Score] 
FROM orig_cte UNION ALL SELECT orig_cte.[KEY] AS [KEY_u], 2 AS class, orig_cte.[LogProba_2] AS [LogProba], orig_cte.[Proba_2] AS [Proba], orig_cte.[Score_2] AS [Score] 
FROM orig_cte UNION ALL SELECT orig_cte.[KEY] AS [KEY_u], 3 AS class, orig_cte.[LogProba_3] AS [LogProba], orig_cte.[Proba_3] AS [Proba], orig_cte.[Score_3] AS [Score] 
FROM orig_cte) AS scu), 
score_max AS 
(SELECT orig_cte.[KEY] AS [KEY], orig_cte.[Score_0] AS [Score_0], orig_cte.[Score_1] AS [Score_1], orig_cte.[Score_2] AS [Score_2], orig_cte.[Score_3] AS [Score_3], orig_cte.[Proba_0] AS [Proba_0], orig_cte.[Proba_1] AS [Proba_1], orig_cte.[Proba_2] AS [Proba_2], orig_cte.[Proba_3] AS [Proba_3], orig_cte.[LogProba_0] AS [LogProba_0], orig_cte.[LogProba_1] AS [LogProba_1], orig_cte.[LogProba_2] AS [LogProba_2], orig_cte.[LogProba_3] AS [LogProba_3], orig_cte.[Decision] AS [Decision], orig_cte.[DecisionProba] AS [DecisionProba], max_select.[KEY_m] AS [KEY_m], max_select.[max_Proba] AS [max_Proba] 
FROM orig_cte LEFT OUTER JOIN (SELECT score_class_union.[KEY_u] AS [KEY_m], max(score_class_union.[Proba]) AS [max_Proba] 
FROM score_class_union GROUP BY score_class_union.[KEY_u]) AS max_select ON orig_cte.[KEY] = max_select.[KEY_m]), 
union_with_max AS 
(SELECT score_class_union.[KEY_u] AS [KEY_u], score_class_union.class AS class, score_class_union.[LogProba] AS [LogProba], score_class_union.[Proba] AS [Proba], score_class_union.[Score] AS [Score], score_max.[KEY] AS [KEY], score_max.[Score_0] AS [Score_0], score_max.[Score_1] AS [Score_1], score_max.[Score_2] AS [Score_2], score_max.[Score_3] AS [Score_3], score_max.[Proba_0] AS [Proba_0], score_max.[Proba_1] AS [Proba_1], score_max.[Proba_2] AS [Proba_2], score_max.[Proba_3] AS [Proba_3], score_max.[LogProba_0] AS [LogProba_0], score_max.[LogProba_1] AS [LogProba_1], score_max.[LogProba_2] AS [LogProba_2], score_max.[LogProba_3] AS [LogProba_3], score_max.[Decision] AS [Decision], score_max.[DecisionProba] AS [DecisionProba], score_max.[KEY_m] AS [KEY_m], score_max.[max_Proba] AS [max_Proba] 
FROM score_class_union LEFT OUTER JOIN score_max ON score_class_union.[KEY_u] = score_max.[KEY]), 
arg_max_cte AS 
(SELECT score_max.[KEY] AS [KEY], score_max.[Score_0] AS [Score_0], score_max.[Score_1] AS [Score_1], score_max.[Score_2] AS [Score_2], score_max.[Score_3] AS [Score_3], score_max.[Proba_0] AS [Proba_0], score_max.[Proba_1] AS [Proba_1], score_max.[Proba_2] AS [Proba_2], score_max.[Proba_3] AS [Proba_3], score_max.[LogProba_0] AS [LogProba_0], score_max.[LogProba_1] AS [LogProba_1], score_max.[LogProba_2] AS [LogProba_2], score_max.[LogProba_3] AS [LogProba_3], score_max.[Decision] AS [Decision], score_max.[DecisionProba] AS [DecisionProba], score_max.[KEY_m] AS [KEY_m], score_max.[max_Proba] AS [max_Proba], [arg_max_t_Proba].[KEY_Proba] AS [KEY_Proba], [arg_max_t_Proba].[arg_max_Proba] AS [arg_max_Proba] 
FROM score_max LEFT OUTER JOIN (SELECT union_with_max.[KEY] AS [KEY_Proba], max(union_with_max.class) AS [arg_max_Proba] 
FROM union_with_max 
WHERE union_with_max.[max_Proba] <= union_with_max.[Proba] GROUP BY union_with_max.[KEY]) AS [arg_max_t_Proba] ON score_max.[KEY] = [arg_max_t_Proba].[KEY_Proba])
 SELECT arg_max_cte.[KEY] AS [KEY], arg_max_cte.[Score_0] AS [Score_0], arg_max_cte.[Score_1] AS [Score_1], arg_max_cte.[Score_2] AS [Score_2], arg_max_cte.[Score_3] AS [Score_3], arg_max_cte.[Proba_0] AS [Proba_0], arg_max_cte.[Proba_1] AS [Proba_1], arg_max_cte.[Proba_2] AS [Proba_2], arg_max_cte.[Proba_3] AS [Proba_3], CASE WHEN (arg_max_cte.[Proba_0] IS NULL OR arg_max_cte.[Proba_0] > 0.0) THEN log(arg_max_cte.[Proba_0]) ELSE -1.79769313486231e+308 END AS [LogProba_0], CASE WHEN (arg_max_cte.[Proba_1] IS NULL OR arg_max_cte.[Proba_1] > 0.0) THEN log(arg_max_cte.[Proba_1]) ELSE -1.79769313486231e+308 END AS [LogProba_1], CASE WHEN (arg_max_cte.[Proba_2] IS NULL OR arg_max_cte.[Proba_2] > 0.0) THEN log(arg_max_cte.[Proba_2]) ELSE -1.79769313486231e+308 END AS [LogProba_2], CASE WHEN (arg_max_cte.[Proba_3] IS NULL OR arg_max_cte.[Proba_3] > 0.0) THEN log(arg_max_cte.[Proba_3]) ELSE -1.79769313486231e+308 END AS [LogProba_3], arg_max_cte.[arg_max_Proba] AS [Decision], arg_max_cte.[max_Proba] AS [DecisionProba] 
FROM arg_max_cte