-- This SQL code was generated by sklearn2sql (development version).
-- Copyright 2018

-- Model : CaretRegressor_nnet
-- Dataset : freidman1
-- Database : teradata


-- This SQL code can contain one or more statements, to be executed in the order they appear in this file.



-- Model deployment code

WITH "IL" AS 
(SELECT "ADS"."KEY" AS "KEY", CAST("ADS"."Feature_0" AS DOUBLE PRECISION) AS "Feature_0", CAST("ADS"."Feature_1" AS DOUBLE PRECISION) AS "Feature_1", CAST("ADS"."Feature_2" AS DOUBLE PRECISION) AS "Feature_2", CAST("ADS"."Feature_3" AS DOUBLE PRECISION) AS "Feature_3", CAST("ADS"."Feature_4" AS DOUBLE PRECISION) AS "Feature_4", CAST("ADS"."Feature_5" AS DOUBLE PRECISION) AS "Feature_5", CAST("ADS"."Feature_6" AS DOUBLE PRECISION) AS "Feature_6", CAST("ADS"."Feature_7" AS DOUBLE PRECISION) AS "Feature_7", CAST("ADS"."Feature_8" AS DOUBLE PRECISION) AS "Feature_8", CAST("ADS"."Feature_9" AS DOUBLE PRECISION) AS "Feature_9" 
FROM freidman1 AS "ADS"), 
"HL_BA_1" AS 
(SELECT "IL"."KEY" AS "KEY", CAST(-0.390005 AS DOUBLE PRECISION) * "IL"."Feature_0" + CAST(-3.136234 AS DOUBLE PRECISION) * "IL"."Feature_1" + CAST(-0.01687662 AS DOUBLE PRECISION) * "IL"."Feature_2" + CAST(-1.993105 AS DOUBLE PRECISION) * "IL"."Feature_3" + CAST(-0.9116776 AS DOUBLE PRECISION) * "IL"."Feature_4" + CAST(0.01716051 AS DOUBLE PRECISION) * "IL"."Feature_5" + CAST(0.1515231 AS DOUBLE PRECISION) * "IL"."Feature_6" + CAST(0.0959176 AS DOUBLE PRECISION) * "IL"."Feature_7" + CAST(-0.06586776 AS DOUBLE PRECISION) * "IL"."Feature_8" + CAST(-0.003534024 AS DOUBLE PRECISION) * "IL"."Feature_9" + CAST(1.839138 AS DOUBLE PRECISION) AS "NEUR_1_1", CAST(-3.938998 AS DOUBLE PRECISION) * "IL"."Feature_0" + CAST(-1.991299 AS DOUBLE PRECISION) * "IL"."Feature_1" + CAST(-4.252288 AS DOUBLE PRECISION) * "IL"."Feature_2" + CAST(-2.200536 AS DOUBLE PRECISION) * "IL"."Feature_3" + CAST(-3.137559 AS DOUBLE PRECISION) * "IL"."Feature_4" + CAST(-4.075193 AS DOUBLE PRECISION) * "IL"."Feature_5" + CAST(-4.14391 AS DOUBLE PRECISION) * "IL"."Feature_6" + CAST(-2.372157 AS DOUBLE PRECISION) * "IL"."Feature_7" + CAST(-4.291992 AS DOUBLE PRECISION) * "IL"."Feature_8" + CAST(-4.691681 AS DOUBLE PRECISION) * "IL"."Feature_9" + CAST(-7.149831 AS DOUBLE PRECISION) AS "NEUR_1_2", CAST(-1.834669 AS DOUBLE PRECISION) * "IL"."Feature_0" + CAST(-1.36897 AS DOUBLE PRECISION) * "IL"."Feature_1" + CAST(-3.523802 AS DOUBLE PRECISION) * "IL"."Feature_2" + CAST(-1.720222 AS DOUBLE PRECISION) * "IL"."Feature_3" + CAST(-2.098447 AS DOUBLE PRECISION) * "IL"."Feature_4" + CAST(-2.10022 AS DOUBLE PRECISION) * "IL"."Feature_5" + CAST(-2.389836 AS DOUBLE PRECISION) * "IL"."Feature_6" + CAST(-2.627102 AS DOUBLE PRECISION) * "IL"."Feature_7" + CAST(-2.371936 AS DOUBLE PRECISION) * "IL"."Feature_8" + CAST(-3.091202 AS DOUBLE PRECISION) * "IL"."Feature_9" + CAST(-5.629398 AS DOUBLE PRECISION) AS "NEUR_1_3", CAST(-3.155565 AS DOUBLE PRECISION) * "IL"."Feature_0" + CAST(-1.758592 AS DOUBLE PRECISION) * "IL"."Feature_1" + CAST(-3.465403 AS DOUBLE PRECISION) * "IL"."Feature_2" + CAST(-2.422351 AS DOUBLE PRECISION) * "IL"."Feature_3" + CAST(-3.180812 AS DOUBLE PRECISION) * "IL"."Feature_4" + CAST(-4.337509 AS DOUBLE PRECISION) * "IL"."Feature_5" + CAST(-3.775354 AS DOUBLE PRECISION) * "IL"."Feature_6" + CAST(-3.41745 AS DOUBLE PRECISION) * "IL"."Feature_7" + CAST(-4.754655 AS DOUBLE PRECISION) * "IL"."Feature_8" + CAST(-4.286217 AS DOUBLE PRECISION) * "IL"."Feature_9" + CAST(-8.451322 AS DOUBLE PRECISION) AS "NEUR_1_4", CAST(-27.43991 AS DOUBLE PRECISION) * "IL"."Feature_0" + CAST(13.89167 AS DOUBLE PRECISION) * "IL"."Feature_1" + CAST(-0.7342694 AS DOUBLE PRECISION) * "IL"."Feature_2" + CAST(-6.23222 AS DOUBLE PRECISION) * "IL"."Feature_3" + CAST(-5.629803 AS DOUBLE PRECISION) * "IL"."Feature_4" + CAST(-1.338169 AS DOUBLE PRECISION) * "IL"."Feature_5" + CAST(-4.401329 AS DOUBLE PRECISION) * "IL"."Feature_6" + CAST(-2.236337 AS DOUBLE PRECISION) * "IL"."Feature_7" + CAST(1.928108 AS DOUBLE PRECISION) * "IL"."Feature_8" + CAST(2.27011 AS DOUBLE PRECISION) * "IL"."Feature_9" + CAST(5.323085 AS DOUBLE PRECISION) AS "NEUR_1_5", CAST(-3.071257 AS DOUBLE PRECISION) * "IL"."Feature_0" + CAST(-2.091888 AS DOUBLE PRECISION) * "IL"."Feature_1" + CAST(-3.34666 AS DOUBLE PRECISION) * "IL"."Feature_2" + CAST(-3.348989 AS DOUBLE PRECISION) * "IL"."Feature_3" + CAST(-2.545796 AS DOUBLE PRECISION) * "IL"."Feature_4" + CAST(-3.627032 AS DOUBLE PRECISION) * "IL"."Feature_5" + CAST(-2.779548 AS DOUBLE PRECISION) * "IL"."Feature_6" + CAST(-2.338139 AS DOUBLE PRECISION) * "IL"."Feature_7" + CAST(-3.049816 AS DOUBLE PRECISION) * "IL"."Feature_8" + CAST(-3.413898 AS DOUBLE PRECISION) * "IL"."Feature_9" + CAST(-6.762622 AS DOUBLE PRECISION) AS "NEUR_1_6", CAST(-9.904013 AS DOUBLE PRECISION) * "IL"."Feature_0" + CAST(-13.60788 AS DOUBLE PRECISION) * "IL"."Feature_1" + CAST(0.007830305 AS DOUBLE PRECISION) * "IL"."Feature_2" + CAST(-11.96657 AS DOUBLE PRECISION) * "IL"."Feature_3" + CAST(-1.528258 AS DOUBLE PRECISION) * "IL"."Feature_4" + CAST(2.282576 AS DOUBLE PRECISION) * "IL"."Feature_5" + CAST(4.696848 AS DOUBLE PRECISION) * "IL"."Feature_6" + CAST(-4.196567 AS DOUBLE PRECISION) * "IL"."Feature_7" + CAST(-1.346261 AS DOUBLE PRECISION) * "IL"."Feature_8" + CAST(1.965346 AS DOUBLE PRECISION) * "IL"."Feature_9" + CAST(4.835396 AS DOUBLE PRECISION) AS "NEUR_1_7", CAST(-5.162354 AS DOUBLE PRECISION) * "IL"."Feature_0" + CAST(-2.617576 AS DOUBLE PRECISION) * "IL"."Feature_1" + CAST(-4.917908 AS DOUBLE PRECISION) * "IL"."Feature_2" + CAST(-2.680735 AS DOUBLE PRECISION) * "IL"."Feature_3" + CAST(-3.450612 AS DOUBLE PRECISION) * "IL"."Feature_4" + CAST(-4.694474 AS DOUBLE PRECISION) * "IL"."Feature_5" + CAST(-4.777227 AS DOUBLE PRECISION) * "IL"."Feature_6" + CAST(-3.386622 AS DOUBLE PRECISION) * "IL"."Feature_7" + CAST(-5.629793 AS DOUBLE PRECISION) * "IL"."Feature_8" + CAST(-5.370946 AS DOUBLE PRECISION) * "IL"."Feature_9" + CAST(-9.276738 AS DOUBLE PRECISION) AS "NEUR_1_8", CAST(-4.306855 AS DOUBLE PRECISION) * "IL"."Feature_0" + CAST(-3.240416 AS DOUBLE PRECISION) * "IL"."Feature_1" + CAST(-4.190417 AS DOUBLE PRECISION) * "IL"."Feature_2" + CAST(-4.187531 AS DOUBLE PRECISION) * "IL"."Feature_3" + CAST(-4.245736 AS DOUBLE PRECISION) * "IL"."Feature_4" + CAST(-4.793883 AS DOUBLE PRECISION) * "IL"."Feature_5" + CAST(-3.685574 AS DOUBLE PRECISION) * "IL"."Feature_6" + CAST(-4.027338 AS DOUBLE PRECISION) * "IL"."Feature_7" + CAST(-3.886491 AS DOUBLE PRECISION) * "IL"."Feature_8" + CAST(-4.918135 AS DOUBLE PRECISION) * "IL"."Feature_9" + CAST(-8.40023 AS DOUBLE PRECISION) AS "NEUR_1_9", CAST(-4.270463 AS DOUBLE PRECISION) * "IL"."Feature_0" + CAST(-2.853337 AS DOUBLE PRECISION) * "IL"."Feature_1" + CAST(-3.682998 AS DOUBLE PRECISION) * "IL"."Feature_2" + CAST(-3.617178 AS DOUBLE PRECISION) * "IL"."Feature_3" + CAST(-3.19192 AS DOUBLE PRECISION) * "IL"."Feature_4" + CAST(-3.953894 AS DOUBLE PRECISION) * "IL"."Feature_5" + CAST(-3.273237 AS DOUBLE PRECISION) * "IL"."Feature_6" + CAST(-3.624287 AS DOUBLE PRECISION) * "IL"."Feature_7" + CAST(-3.607953 AS DOUBLE PRECISION) * "IL"."Feature_8" + CAST(-4.046647 AS DOUBLE PRECISION) * "IL"."Feature_9" + CAST(-7.115755 AS DOUBLE PRECISION) AS "NEUR_1_10", CAST(-3.584166 AS DOUBLE PRECISION) * "IL"."Feature_0" + CAST(-0.607518 AS DOUBLE PRECISION) * "IL"."Feature_1" + CAST(-3.275268 AS DOUBLE PRECISION) * "IL"."Feature_2" + CAST(-1.450009 AS DOUBLE PRECISION) * "IL"."Feature_3" + CAST(-1.977316 AS DOUBLE PRECISION) * "IL"."Feature_4" + CAST(-2.875902 AS DOUBLE PRECISION) * "IL"."Feature_5" + CAST(-2.674036 AS DOUBLE PRECISION) * "IL"."Feature_6" + CAST(-3.115613 AS DOUBLE PRECISION) * "IL"."Feature_7" + CAST(-2.97909 AS DOUBLE PRECISION) * "IL"."Feature_8" + CAST(-4.012344 AS DOUBLE PRECISION) * "IL"."Feature_9" + CAST(-6.350596 AS DOUBLE PRECISION) AS "NEUR_1_11", CAST(-5.250595 AS DOUBLE PRECISION) * "IL"."Feature_0" + CAST(-3.434367 AS DOUBLE PRECISION) * "IL"."Feature_1" + CAST(-4.325011 AS DOUBLE PRECISION) * "IL"."Feature_2" + CAST(-4.665286 AS DOUBLE PRECISION) * "IL"."Feature_3" + CAST(-4.221893 AS DOUBLE PRECISION) * "IL"."Feature_4" + CAST(-6.058591 AS DOUBLE PRECISION) * "IL"."Feature_5" + CAST(-4.939752 AS DOUBLE PRECISION) * "IL"."Feature_6" + CAST(-4.258136 AS DOUBLE PRECISION) * "IL"."Feature_7" + CAST(-5.36939 AS DOUBLE PRECISION) * "IL"."Feature_8" + CAST(-5.299187 AS DOUBLE PRECISION) * "IL"."Feature_9" + CAST(-10.42355 AS DOUBLE PRECISION) AS "NEUR_1_12" 
FROM "IL"), 
"HL_1_logistic" AS 
(SELECT "HL_BA_1"."KEY" AS "KEY", CAST(1.0 AS DOUBLE PRECISION) / (CAST(1.0 AS DOUBLE PRECISION) + exp(least(CAST(100.0 AS DOUBLE PRECISION), greatest(-CAST(100.0 AS DOUBLE PRECISION), -"HL_BA_1"."NEUR_1_1")))) AS "NEUR_1_1", CAST(1.0 AS DOUBLE PRECISION) / (CAST(1.0 AS DOUBLE PRECISION) + exp(least(CAST(100.0 AS DOUBLE PRECISION), greatest(-CAST(100.0 AS DOUBLE PRECISION), -"HL_BA_1"."NEUR_1_2")))) AS "NEUR_1_2", CAST(1.0 AS DOUBLE PRECISION) / (CAST(1.0 AS DOUBLE PRECISION) + exp(least(CAST(100.0 AS DOUBLE PRECISION), greatest(-CAST(100.0 AS DOUBLE PRECISION), -"HL_BA_1"."NEUR_1_3")))) AS "NEUR_1_3", CAST(1.0 AS DOUBLE PRECISION) / (CAST(1.0 AS DOUBLE PRECISION) + exp(least(CAST(100.0 AS DOUBLE PRECISION), greatest(-CAST(100.0 AS DOUBLE PRECISION), -"HL_BA_1"."NEUR_1_4")))) AS "NEUR_1_4", CAST(1.0 AS DOUBLE PRECISION) / (CAST(1.0 AS DOUBLE PRECISION) + exp(least(CAST(100.0 AS DOUBLE PRECISION), greatest(-CAST(100.0 AS DOUBLE PRECISION), -"HL_BA_1"."NEUR_1_5")))) AS "NEUR_1_5", CAST(1.0 AS DOUBLE PRECISION) / (CAST(1.0 AS DOUBLE PRECISION) + exp(least(CAST(100.0 AS DOUBLE PRECISION), greatest(-CAST(100.0 AS DOUBLE PRECISION), -"HL_BA_1"."NEUR_1_6")))) AS "NEUR_1_6", CAST(1.0 AS DOUBLE PRECISION) / (CAST(1.0 AS DOUBLE PRECISION) + exp(least(CAST(100.0 AS DOUBLE PRECISION), greatest(-CAST(100.0 AS DOUBLE PRECISION), -"HL_BA_1"."NEUR_1_7")))) AS "NEUR_1_7", CAST(1.0 AS DOUBLE PRECISION) / (CAST(1.0 AS DOUBLE PRECISION) + exp(least(CAST(100.0 AS DOUBLE PRECISION), greatest(-CAST(100.0 AS DOUBLE PRECISION), -"HL_BA_1"."NEUR_1_8")))) AS "NEUR_1_8", CAST(1.0 AS DOUBLE PRECISION) / (CAST(1.0 AS DOUBLE PRECISION) + exp(least(CAST(100.0 AS DOUBLE PRECISION), greatest(-CAST(100.0 AS DOUBLE PRECISION), -"HL_BA_1"."NEUR_1_9")))) AS "NEUR_1_9", CAST(1.0 AS DOUBLE PRECISION) / (CAST(1.0 AS DOUBLE PRECISION) + exp(least(CAST(100.0 AS DOUBLE PRECISION), greatest(-CAST(100.0 AS DOUBLE PRECISION), -"HL_BA_1"."NEUR_1_10")))) AS "NEUR_1_10", CAST(1.0 AS DOUBLE PRECISION) / (CAST(1.0 AS DOUBLE PRECISION) + exp(least(CAST(100.0 AS DOUBLE PRECISION), greatest(-CAST(100.0 AS DOUBLE PRECISION), -"HL_BA_1"."NEUR_1_11")))) AS "NEUR_1_11", CAST(1.0 AS DOUBLE PRECISION) / (CAST(1.0 AS DOUBLE PRECISION) + exp(least(CAST(100.0 AS DOUBLE PRECISION), greatest(-CAST(100.0 AS DOUBLE PRECISION), -"HL_BA_1"."NEUR_1_12")))) AS "NEUR_1_12" 
FROM "HL_BA_1"), 
"HL_1_logistic_1" AS 
(SELECT "HL_1_logistic"."KEY" AS "KEY", "HL_1_logistic"."NEUR_1_1" AS "NEUR_1_1", "HL_1_logistic"."NEUR_1_2" AS "NEUR_1_2", "HL_1_logistic"."NEUR_1_3" AS "NEUR_1_3", "HL_1_logistic"."NEUR_1_4" AS "NEUR_1_4", "HL_1_logistic"."NEUR_1_5" AS "NEUR_1_5", "HL_1_logistic"."NEUR_1_6" AS "NEUR_1_6", "HL_1_logistic"."NEUR_1_7" AS "NEUR_1_7", "HL_1_logistic"."NEUR_1_8" AS "NEUR_1_8", "HL_1_logistic"."NEUR_1_9" AS "NEUR_1_9", "HL_1_logistic"."NEUR_1_10" AS "NEUR_1_10", "HL_1_logistic"."NEUR_1_11" AS "NEUR_1_11", "HL_1_logistic"."NEUR_1_12" AS "NEUR_1_12" 
FROM "HL_1_logistic"), 
"OL_BA" AS 
(SELECT "HL_1_logistic_1"."KEY" AS "KEY", CAST(-23.84721 AS DOUBLE PRECISION) * "HL_1_logistic_1"."NEUR_1_1" + CAST(2.437162 AS DOUBLE PRECISION) * "HL_1_logistic_1"."NEUR_1_2" + CAST(-0.1682402 AS DOUBLE PRECISION) * "HL_1_logistic_1"."NEUR_1_3" + CAST(4.542695 AS DOUBLE PRECISION) * "HL_1_logistic_1"."NEUR_1_4" + CAST(-7.283211 AS DOUBLE PRECISION) * "HL_1_logistic_1"."NEUR_1_5" + CAST(9.467165 AS DOUBLE PRECISION) * "HL_1_logistic_1"."NEUR_1_6" + CAST(-4.128597 AS DOUBLE PRECISION) * "HL_1_logistic_1"."NEUR_1_7" + CAST(5.953023 AS DOUBLE PRECISION) * "HL_1_logistic_1"."NEUR_1_8" + CAST(7.762861 AS DOUBLE PRECISION) * "HL_1_logistic_1"."NEUR_1_9" + CAST(6.056423 AS DOUBLE PRECISION) * "HL_1_logistic_1"."NEUR_1_10" + CAST(1.018443 AS DOUBLE PRECISION) * "HL_1_logistic_1"."NEUR_1_11" + CAST(14.25582 AS DOUBLE PRECISION) * "HL_1_logistic_1"."NEUR_1_12" + CAST(22.69712 AS DOUBLE PRECISION) AS "NEUR_2_1" 
FROM "HL_1_logistic_1"), 
"OL_identity" AS 
(SELECT "OL_BA"."KEY" AS "KEY", "OL_BA"."NEUR_2_1" AS "NEUR_2_1" 
FROM "OL_BA"), 
"OL_identity_1" AS 
(SELECT "OL_identity"."KEY" AS "KEY", "OL_identity"."NEUR_2_1" AS "NEUR_2_1" 
FROM "OL_identity")
 SELECT "OL_identity_1"."KEY" AS "KEY", "OL_identity_1"."NEUR_2_1" AS "Estimator" 
FROM "OL_identity_1"