-- This SQL code was generated by sklearn2sql (development version).
-- Copyright 2018

-- Model : CaretRegressor_nnet
-- Dataset : diabetes
-- Database : teradata


-- This SQL code can contain one or more statements, to be executed in the order they appear in this file.



-- Model deployment code

WITH "IL" AS 
(SELECT "ADS"."KEY" AS "KEY", CAST("ADS"."Feature_0" AS DOUBLE PRECISION) AS "Feature_0", CAST("ADS"."Feature_1" AS DOUBLE PRECISION) AS "Feature_1", CAST("ADS"."Feature_2" AS DOUBLE PRECISION) AS "Feature_2", CAST("ADS"."Feature_3" AS DOUBLE PRECISION) AS "Feature_3", CAST("ADS"."Feature_4" AS DOUBLE PRECISION) AS "Feature_4", CAST("ADS"."Feature_5" AS DOUBLE PRECISION) AS "Feature_5", CAST("ADS"."Feature_6" AS DOUBLE PRECISION) AS "Feature_6", CAST("ADS"."Feature_7" AS DOUBLE PRECISION) AS "Feature_7", CAST("ADS"."Feature_8" AS DOUBLE PRECISION) AS "Feature_8", CAST("ADS"."Feature_9" AS DOUBLE PRECISION) AS "Feature_9" 
FROM diabetes AS "ADS"), 
"HL_BA_1" AS 
(SELECT "IL"."KEY" AS "KEY", CAST(-626.6887 AS DOUBLE PRECISION) * "IL"."Feature_0" + CAST(348.7406 AS DOUBLE PRECISION) * "IL"."Feature_1" + CAST(-1683.886 AS DOUBLE PRECISION) * "IL"."Feature_2" + CAST(-1102.104 AS DOUBLE PRECISION) * "IL"."Feature_3" + CAST(-233.9997 AS DOUBLE PRECISION) * "IL"."Feature_4" + CAST(1934.592 AS DOUBLE PRECISION) * "IL"."Feature_5" + CAST(538.6661 AS DOUBLE PRECISION) * "IL"."Feature_6" + CAST(2048.307 AS DOUBLE PRECISION) * "IL"."Feature_7" + CAST(-2031.965 AS DOUBLE PRECISION) * "IL"."Feature_8" + CAST(313.6396 AS DOUBLE PRECISION) * "IL"."Feature_9" + CAST(-30.44751 AS DOUBLE PRECISION) AS "NEUR_1_1", CAST(68.24896 AS DOUBLE PRECISION) * "IL"."Feature_0" + CAST(14.20588 AS DOUBLE PRECISION) * "IL"."Feature_1" + CAST(212.2798 AS DOUBLE PRECISION) * "IL"."Feature_2" + CAST(160.5047 AS DOUBLE PRECISION) * "IL"."Feature_3" + CAST(71.94538 AS DOUBLE PRECISION) * "IL"."Feature_4" + CAST(57.19275 AS DOUBLE PRECISION) * "IL"."Feature_5" + CAST(-142.2771 AS DOUBLE PRECISION) * "IL"."Feature_6" + CAST(156.7876 AS DOUBLE PRECISION) * "IL"."Feature_7" + CAST(203.7438 AS DOUBLE PRECISION) * "IL"."Feature_8" + CAST(140.85 AS DOUBLE PRECISION) * "IL"."Feature_9" + CAST(183.5913 AS DOUBLE PRECISION) AS "NEUR_1_2", CAST(19.68054 AS DOUBLE PRECISION) * "IL"."Feature_0" + CAST(3.54238 AS DOUBLE PRECISION) * "IL"."Feature_1" + CAST(59.56806 AS DOUBLE PRECISION) * "IL"."Feature_2" + CAST(44.47011 AS DOUBLE PRECISION) * "IL"."Feature_3" + CAST(20.17378 AS DOUBLE PRECISION) * "IL"."Feature_4" + CAST(16.47656 AS DOUBLE PRECISION) * "IL"."Feature_5" + CAST(-38.74363 AS DOUBLE PRECISION) * "IL"."Feature_6" + CAST(42.77059 AS DOUBLE PRECISION) * "IL"."Feature_7" + CAST(56.98803 AS DOUBLE PRECISION) * "IL"."Feature_8" + CAST(39.52237 AS DOUBLE PRECISION) * "IL"."Feature_9" + CAST(43.80785 AS DOUBLE PRECISION) AS "NEUR_1_3", CAST(54.83502 AS DOUBLE PRECISION) * "IL"."Feature_0" + CAST(11.22158 AS DOUBLE PRECISION) * "IL"."Feature_1" + CAST(166.615 AS DOUBLE PRECISION) * "IL"."Feature_2" + CAST(125.3815 AS DOUBLE PRECISION) * "IL"."Feature_3" + CAST(57.21719 AS DOUBLE PRECISION) * "IL"."Feature_4" + CAST(45.59709 AS DOUBLE PRECISION) * "IL"."Feature_5" + CAST(-110.4761 AS DOUBLE PRECISION) * "IL"."Feature_6" + CAST(121.9645 AS DOUBLE PRECISION) * "IL"."Feature_7" + CAST(159.5487 AS DOUBLE PRECISION) * "IL"."Feature_8" + CAST(110.4954 AS DOUBLE PRECISION) * "IL"."Feature_9" + CAST(154.9057 AS DOUBLE PRECISION) AS "NEUR_1_4", CAST(-254.3696 AS DOUBLE PRECISION) * "IL"."Feature_0" + CAST(-66.1232 AS DOUBLE PRECISION) * "IL"."Feature_1" + CAST(606.5886 AS DOUBLE PRECISION) * "IL"."Feature_2" + CAST(-94.79522 AS DOUBLE PRECISION) * "IL"."Feature_3" + CAST(789.6608 AS DOUBLE PRECISION) * "IL"."Feature_4" + CAST(-1105.485 AS DOUBLE PRECISION) * "IL"."Feature_5" + CAST(-409.4901 AS DOUBLE PRECISION) * "IL"."Feature_6" + CAST(346.5129 AS DOUBLE PRECISION) * "IL"."Feature_7" + CAST(323.492 AS DOUBLE PRECISION) * "IL"."Feature_8" + CAST(-194.1028 AS DOUBLE PRECISION) * "IL"."Feature_9" + CAST(-0.3970048 AS DOUBLE PRECISION) AS "NEUR_1_5", CAST(2.277847 AS DOUBLE PRECISION) * "IL"."Feature_0" + CAST(0.7551502 AS DOUBLE PRECISION) * "IL"."Feature_1" + CAST(5.681691 AS DOUBLE PRECISION) * "IL"."Feature_2" + CAST(4.238302 AS DOUBLE PRECISION) * "IL"."Feature_3" + CAST(2.413413 AS DOUBLE PRECISION) * "IL"."Feature_4" + CAST(1.423511 AS DOUBLE PRECISION) * "IL"."Feature_5" + CAST(-3.925892 AS DOUBLE PRECISION) * "IL"."Feature_6" + CAST(4.951251 AS DOUBLE PRECISION) * "IL"."Feature_7" + CAST(5.957485 AS DOUBLE PRECISION) * "IL"."Feature_8" + CAST(4.006471 AS DOUBLE PRECISION) * "IL"."Feature_9" + CAST(-31.14389 AS DOUBLE PRECISION) AS "NEUR_1_6", CAST(454.1318 AS DOUBLE PRECISION) * "IL"."Feature_0" + CAST(-539.9425 AS DOUBLE PRECISION) * "IL"."Feature_1" + CAST(732.1945 AS DOUBLE PRECISION) * "IL"."Feature_2" + CAST(1772.399 AS DOUBLE PRECISION) * "IL"."Feature_3" + CAST(-1344.733 AS DOUBLE PRECISION) * "IL"."Feature_4" + CAST(2807.695 AS DOUBLE PRECISION) * "IL"."Feature_5" + CAST(-2144.335 AS DOUBLE PRECISION) * "IL"."Feature_6" + CAST(-1955.188 AS DOUBLE PRECISION) * "IL"."Feature_7" + CAST(1813.404 AS DOUBLE PRECISION) * "IL"."Feature_8" + CAST(2586.113 AS DOUBLE PRECISION) * "IL"."Feature_9" + CAST(-127.7245 AS DOUBLE PRECISION) AS "NEUR_1_7", CAST(56.96839 AS DOUBLE PRECISION) * "IL"."Feature_0" + CAST(10.12859 AS DOUBLE PRECISION) * "IL"."Feature_1" + CAST(176.9748 AS DOUBLE PRECISION) * "IL"."Feature_2" + CAST(135.5305 AS DOUBLE PRECISION) * "IL"."Feature_3" + CAST(62.70812 AS DOUBLE PRECISION) * "IL"."Feature_4" + CAST(52.77948 AS DOUBLE PRECISION) * "IL"."Feature_5" + CAST(-117.4683 AS DOUBLE PRECISION) * "IL"."Feature_6" + CAST(132.7235 AS DOUBLE PRECISION) * "IL"."Feature_7" + CAST(166.8883 AS DOUBLE PRECISION) * "IL"."Feature_8" + CAST(114.8776 AS DOUBLE PRECISION) * "IL"."Feature_9" + CAST(-124.6027 AS DOUBLE PRECISION) AS "NEUR_1_8", CAST(11.92098 AS DOUBLE PRECISION) * "IL"."Feature_0" + CAST(2.690967 AS DOUBLE PRECISION) * "IL"."Feature_1" + CAST(35.90221 AS DOUBLE PRECISION) * "IL"."Feature_2" + CAST(26.74944 AS DOUBLE PRECISION) * "IL"."Feature_3" + CAST(11.64761 AS DOUBLE PRECISION) * "IL"."Feature_4" + CAST(9.790271 AS DOUBLE PRECISION) * "IL"."Feature_5" + CAST(-23.97798 AS DOUBLE PRECISION) * "IL"."Feature_6" + CAST(26.04817 AS DOUBLE PRECISION) * "IL"."Feature_7" + CAST(34.89054 AS DOUBLE PRECISION) * "IL"."Feature_8" + CAST(23.55637 AS DOUBLE PRECISION) * "IL"."Feature_9" + CAST(-217.8361 AS DOUBLE PRECISION) AS "NEUR_1_9", CAST(16.99813 AS DOUBLE PRECISION) * "IL"."Feature_0" + CAST(3.868908 AS DOUBLE PRECISION) * "IL"."Feature_1" + CAST(52.73973 AS DOUBLE PRECISION) * "IL"."Feature_2" + CAST(39.31841 AS DOUBLE PRECISION) * "IL"."Feature_3" + CAST(18.0019 AS DOUBLE PRECISION) * "IL"."Feature_4" + CAST(14.74853 AS DOUBLE PRECISION) * "IL"."Feature_5" + CAST(-35.40409 AS DOUBLE PRECISION) * "IL"."Feature_6" + CAST(38.45533 AS DOUBLE PRECISION) * "IL"."Feature_7" + CAST(50.56634 AS DOUBLE PRECISION) * "IL"."Feature_8" + CAST(34.76006 AS DOUBLE PRECISION) * "IL"."Feature_9" + CAST(-426.1394 AS DOUBLE PRECISION) AS "NEUR_1_10", CAST(16.68518 AS DOUBLE PRECISION) * "IL"."Feature_0" + CAST(3.532662 AS DOUBLE PRECISION) * "IL"."Feature_1" + CAST(53.39185 AS DOUBLE PRECISION) * "IL"."Feature_2" + CAST(40.34394 AS DOUBLE PRECISION) * "IL"."Feature_3" + CAST(18.09177 AS DOUBLE PRECISION) * "IL"."Feature_4" + CAST(14.25267 AS DOUBLE PRECISION) * "IL"."Feature_5" + CAST(-35.5426 AS DOUBLE PRECISION) * "IL"."Feature_6" + CAST(38.8352 AS DOUBLE PRECISION) * "IL"."Feature_7" + CAST(51.35271 AS DOUBLE PRECISION) * "IL"."Feature_8" + CAST(35.08415 AS DOUBLE PRECISION) * "IL"."Feature_9" + CAST(33.22637 AS DOUBLE PRECISION) AS "NEUR_1_11", CAST(0.6737284 AS DOUBLE PRECISION) * "IL"."Feature_0" + CAST(0.4203307 AS DOUBLE PRECISION) * "IL"."Feature_1" + CAST(1.984957 AS DOUBLE PRECISION) * "IL"."Feature_2" + CAST(1.142351 AS DOUBLE PRECISION) * "IL"."Feature_3" + CAST(0.7998989 AS DOUBLE PRECISION) * "IL"."Feature_4" + CAST(-0.06050122 AS DOUBLE PRECISION) * "IL"."Feature_5" + CAST(-1.018662 AS DOUBLE PRECISION) * "IL"."Feature_6" + CAST(1.227687 AS DOUBLE PRECISION) * "IL"."Feature_7" + CAST(1.112602 AS DOUBLE PRECISION) * "IL"."Feature_8" + CAST(1.287911 AS DOUBLE PRECISION) * "IL"."Feature_9" + CAST(-23.86551 AS DOUBLE PRECISION) AS "NEUR_1_12" 
FROM "IL"), 
"HL_1_logistic" AS 
(SELECT "HL_BA_1"."KEY" AS "KEY", CAST(1.0 AS DOUBLE PRECISION) / (CAST(1.0 AS DOUBLE PRECISION) + exp(least(CAST(100.0 AS DOUBLE PRECISION), greatest(-CAST(100.0 AS DOUBLE PRECISION), -"HL_BA_1"."NEUR_1_1")))) AS "NEUR_1_1", CAST(1.0 AS DOUBLE PRECISION) / (CAST(1.0 AS DOUBLE PRECISION) + exp(least(CAST(100.0 AS DOUBLE PRECISION), greatest(-CAST(100.0 AS DOUBLE PRECISION), -"HL_BA_1"."NEUR_1_2")))) AS "NEUR_1_2", CAST(1.0 AS DOUBLE PRECISION) / (CAST(1.0 AS DOUBLE PRECISION) + exp(least(CAST(100.0 AS DOUBLE PRECISION), greatest(-CAST(100.0 AS DOUBLE PRECISION), -"HL_BA_1"."NEUR_1_3")))) AS "NEUR_1_3", CAST(1.0 AS DOUBLE PRECISION) / (CAST(1.0 AS DOUBLE PRECISION) + exp(least(CAST(100.0 AS DOUBLE PRECISION), greatest(-CAST(100.0 AS DOUBLE PRECISION), -"HL_BA_1"."NEUR_1_4")))) AS "NEUR_1_4", CAST(1.0 AS DOUBLE PRECISION) / (CAST(1.0 AS DOUBLE PRECISION) + exp(least(CAST(100.0 AS DOUBLE PRECISION), greatest(-CAST(100.0 AS DOUBLE PRECISION), -"HL_BA_1"."NEUR_1_5")))) AS "NEUR_1_5", CAST(1.0 AS DOUBLE PRECISION) / (CAST(1.0 AS DOUBLE PRECISION) + exp(least(CAST(100.0 AS DOUBLE PRECISION), greatest(-CAST(100.0 AS DOUBLE PRECISION), -"HL_BA_1"."NEUR_1_6")))) AS "NEUR_1_6", CAST(1.0 AS DOUBLE PRECISION) / (CAST(1.0 AS DOUBLE PRECISION) + exp(least(CAST(100.0 AS DOUBLE PRECISION), greatest(-CAST(100.0 AS DOUBLE PRECISION), -"HL_BA_1"."NEUR_1_7")))) AS "NEUR_1_7", CAST(1.0 AS DOUBLE PRECISION) / (CAST(1.0 AS DOUBLE PRECISION) + exp(least(CAST(100.0 AS DOUBLE PRECISION), greatest(-CAST(100.0 AS DOUBLE PRECISION), -"HL_BA_1"."NEUR_1_8")))) AS "NEUR_1_8", CAST(1.0 AS DOUBLE PRECISION) / (CAST(1.0 AS DOUBLE PRECISION) + exp(least(CAST(100.0 AS DOUBLE PRECISION), greatest(-CAST(100.0 AS DOUBLE PRECISION), -"HL_BA_1"."NEUR_1_9")))) AS "NEUR_1_9", CAST(1.0 AS DOUBLE PRECISION) / (CAST(1.0 AS DOUBLE PRECISION) + exp(least(CAST(100.0 AS DOUBLE PRECISION), greatest(-CAST(100.0 AS DOUBLE PRECISION), -"HL_BA_1"."NEUR_1_10")))) AS "NEUR_1_10", CAST(1.0 AS DOUBLE PRECISION) / (CAST(1.0 AS DOUBLE PRECISION) + exp(least(CAST(100.0 AS DOUBLE PRECISION), greatest(-CAST(100.0 AS DOUBLE PRECISION), -"HL_BA_1"."NEUR_1_11")))) AS "NEUR_1_11", CAST(1.0 AS DOUBLE PRECISION) / (CAST(1.0 AS DOUBLE PRECISION) + exp(least(CAST(100.0 AS DOUBLE PRECISION), greatest(-CAST(100.0 AS DOUBLE PRECISION), -"HL_BA_1"."NEUR_1_12")))) AS "NEUR_1_12" 
FROM "HL_BA_1"), 
"HL_1_logistic_1" AS 
(SELECT "HL_1_logistic"."KEY" AS "KEY", "HL_1_logistic"."NEUR_1_1" AS "NEUR_1_1", "HL_1_logistic"."NEUR_1_2" AS "NEUR_1_2", "HL_1_logistic"."NEUR_1_3" AS "NEUR_1_3", "HL_1_logistic"."NEUR_1_4" AS "NEUR_1_4", "HL_1_logistic"."NEUR_1_5" AS "NEUR_1_5", "HL_1_logistic"."NEUR_1_6" AS "NEUR_1_6", "HL_1_logistic"."NEUR_1_7" AS "NEUR_1_7", "HL_1_logistic"."NEUR_1_8" AS "NEUR_1_8", "HL_1_logistic"."NEUR_1_9" AS "NEUR_1_9", "HL_1_logistic"."NEUR_1_10" AS "NEUR_1_10", "HL_1_logistic"."NEUR_1_11" AS "NEUR_1_11", "HL_1_logistic"."NEUR_1_12" AS "NEUR_1_12" 
FROM "HL_1_logistic"), 
"OL_BA" AS 
(SELECT "HL_1_logistic_1"."KEY" AS "KEY", CAST(-21.73521 AS DOUBLE PRECISION) * "HL_1_logistic_1"."NEUR_1_1" + CAST(-17.72408 AS DOUBLE PRECISION) * "HL_1_logistic_1"."NEUR_1_2" + CAST(20.68149 AS DOUBLE PRECISION) * "HL_1_logistic_1"."NEUR_1_3" + CAST(-6.510366 AS DOUBLE PRECISION) * "HL_1_logistic_1"."NEUR_1_4" + CAST(65.95535 AS DOUBLE PRECISION) * "HL_1_logistic_1"."NEUR_1_5" + CAST(42.33953 AS DOUBLE PRECISION) * "HL_1_logistic_1"."NEUR_1_6" + CAST(68.82578 AS DOUBLE PRECISION) * "HL_1_logistic_1"."NEUR_1_7" + CAST(24.02252 AS DOUBLE PRECISION) * "HL_1_logistic_1"."NEUR_1_8" + CAST(60.33094 AS DOUBLE PRECISION) * "HL_1_logistic_1"."NEUR_1_9" + CAST(49.50775 AS DOUBLE PRECISION) * "HL_1_logistic_1"."NEUR_1_10" + CAST(22.95353 AS DOUBLE PRECISION) * "HL_1_logistic_1"."NEUR_1_11" + CAST(59.09962 AS DOUBLE PRECISION) * "HL_1_logistic_1"."NEUR_1_12" + CAST(89.38067 AS DOUBLE PRECISION) AS "NEUR_2_1" 
FROM "HL_1_logistic_1"), 
"OL_identity" AS 
(SELECT "OL_BA"."KEY" AS "KEY", "OL_BA"."NEUR_2_1" AS "NEUR_2_1" 
FROM "OL_BA"), 
"OL_identity_1" AS 
(SELECT "OL_identity"."KEY" AS "KEY", "OL_identity"."NEUR_2_1" AS "NEUR_2_1" 
FROM "OL_identity")
 SELECT "OL_identity_1"."KEY" AS "KEY", "OL_identity_1"."NEUR_2_1" AS "Estimator" 
FROM "OL_identity_1"