-- This SQL code was generated by sklearn2sql (development version).
-- Copyright 2018

-- Model : CaretRegressor_nnet
-- Dataset : RandomReg_10
-- Database : teradata


-- This SQL code can contain one or more statements, to be executed in the order they appear in this file.



-- Model deployment code

WITH "IL" AS 
(SELECT "ADS"."KEY" AS "KEY", CAST("ADS"."Feature_0" AS DOUBLE PRECISION) AS "Feature_0", CAST("ADS"."Feature_1" AS DOUBLE PRECISION) AS "Feature_1", CAST("ADS"."Feature_2" AS DOUBLE PRECISION) AS "Feature_2", CAST("ADS"."Feature_3" AS DOUBLE PRECISION) AS "Feature_3", CAST("ADS"."Feature_4" AS DOUBLE PRECISION) AS "Feature_4", CAST("ADS"."Feature_5" AS DOUBLE PRECISION) AS "Feature_5", CAST("ADS"."Feature_6" AS DOUBLE PRECISION) AS "Feature_6", CAST("ADS"."Feature_7" AS DOUBLE PRECISION) AS "Feature_7", CAST("ADS"."Feature_8" AS DOUBLE PRECISION) AS "Feature_8", CAST("ADS"."Feature_9" AS DOUBLE PRECISION) AS "Feature_9" 
FROM "RandomReg_10" AS "ADS"), 
"HL_BA_1" AS 
(SELECT "IL"."KEY" AS "KEY", CAST(120.0435 AS DOUBLE PRECISION) * "IL"."Feature_0" + CAST(229.3758 AS DOUBLE PRECISION) * "IL"."Feature_1" + CAST(256.3339 AS DOUBLE PRECISION) * "IL"."Feature_2" + CAST(163.1267 AS DOUBLE PRECISION) * "IL"."Feature_3" + CAST(140.0383 AS DOUBLE PRECISION) * "IL"."Feature_4" + CAST(96.92248 AS DOUBLE PRECISION) * "IL"."Feature_5" + CAST(125.8595 AS DOUBLE PRECISION) * "IL"."Feature_6" + CAST(125.7595 AS DOUBLE PRECISION) * "IL"."Feature_7" + CAST(224.9761 AS DOUBLE PRECISION) * "IL"."Feature_8" + CAST(86.73966 AS DOUBLE PRECISION) * "IL"."Feature_9" + CAST(10.79208 AS DOUBLE PRECISION) AS "NEUR_1_1", CAST(53.91789 AS DOUBLE PRECISION) * "IL"."Feature_0" + CAST(-40.7402 AS DOUBLE PRECISION) * "IL"."Feature_1" + CAST(-5.365128 AS DOUBLE PRECISION) * "IL"."Feature_2" + CAST(-66.70094 AS DOUBLE PRECISION) * "IL"."Feature_3" + CAST(-55.81299 AS DOUBLE PRECISION) * "IL"."Feature_4" + CAST(-21.60904 AS DOUBLE PRECISION) * "IL"."Feature_5" + CAST(17.82619 AS DOUBLE PRECISION) * "IL"."Feature_6" + CAST(-20.85493 AS DOUBLE PRECISION) * "IL"."Feature_7" + CAST(-22.45962 AS DOUBLE PRECISION) * "IL"."Feature_8" + CAST(-26.33467 AS DOUBLE PRECISION) * "IL"."Feature_9" + CAST(114.5781 AS DOUBLE PRECISION) AS "NEUR_1_2", CAST(55.5557 AS DOUBLE PRECISION) * "IL"."Feature_0" + CAST(140.6912 AS DOUBLE PRECISION) * "IL"."Feature_1" + CAST(135.9683 AS DOUBLE PRECISION) * "IL"."Feature_2" + CAST(72.31315 AS DOUBLE PRECISION) * "IL"."Feature_3" + CAST(114.6137 AS DOUBLE PRECISION) * "IL"."Feature_4" + CAST(102.635 AS DOUBLE PRECISION) * "IL"."Feature_5" + CAST(112.1124 AS DOUBLE PRECISION) * "IL"."Feature_6" + CAST(93.96044 AS DOUBLE PRECISION) * "IL"."Feature_7" + CAST(136.9838 AS DOUBLE PRECISION) * "IL"."Feature_8" + CAST(6.493225 AS DOUBLE PRECISION) * "IL"."Feature_9" + CAST(51.222 AS DOUBLE PRECISION) AS "NEUR_1_3", CAST(-6.443423 AS DOUBLE PRECISION) * "IL"."Feature_0" + CAST(33.64854 AS DOUBLE PRECISION) * "IL"."Feature_1" + CAST(22.86887 AS DOUBLE PRECISION) * "IL"."Feature_2" + CAST(7.077528 AS DOUBLE PRECISION) * "IL"."Feature_3" + CAST(52.8757 AS DOUBLE PRECISION) * "IL"."Feature_4" + CAST(84.79523 AS DOUBLE PRECISION) * "IL"."Feature_5" + CAST(-5.018447 AS DOUBLE PRECISION) * "IL"."Feature_6" + CAST(36.02294 AS DOUBLE PRECISION) * "IL"."Feature_7" + CAST(42.82494 AS DOUBLE PRECISION) * "IL"."Feature_8" + CAST(-8.259979 AS DOUBLE PRECISION) * "IL"."Feature_9" + CAST(-194.3395 AS DOUBLE PRECISION) AS "NEUR_1_4", CAST(80.19544 AS DOUBLE PRECISION) * "IL"."Feature_0" + CAST(222.9517 AS DOUBLE PRECISION) * "IL"."Feature_1" + CAST(178.2416 AS DOUBLE PRECISION) * "IL"."Feature_2" + CAST(70.83735 AS DOUBLE PRECISION) * "IL"."Feature_3" + CAST(342.8554 AS DOUBLE PRECISION) * "IL"."Feature_4" + CAST(138.8746 AS DOUBLE PRECISION) * "IL"."Feature_5" + CAST(108.9889 AS DOUBLE PRECISION) * "IL"."Feature_6" + CAST(179.2378 AS DOUBLE PRECISION) * "IL"."Feature_7" + CAST(161.5893 AS DOUBLE PRECISION) * "IL"."Feature_8" + CAST(177.9433 AS DOUBLE PRECISION) * "IL"."Feature_9" + CAST(-36.89277 AS DOUBLE PRECISION) AS "NEUR_1_5", CAST(-70.05763 AS DOUBLE PRECISION) * "IL"."Feature_0" + CAST(-153.6308 AS DOUBLE PRECISION) * "IL"."Feature_1" + CAST(-149.9338 AS DOUBLE PRECISION) * "IL"."Feature_2" + CAST(-122.3032 AS DOUBLE PRECISION) * "IL"."Feature_3" + CAST(-106.1231 AS DOUBLE PRECISION) * "IL"."Feature_4" + CAST(-132.2821 AS DOUBLE PRECISION) * "IL"."Feature_5" + CAST(-80.8804 AS DOUBLE PRECISION) * "IL"."Feature_6" + CAST(-94.23741 AS DOUBLE PRECISION) * "IL"."Feature_7" + CAST(-200.7447 AS DOUBLE PRECISION) * "IL"."Feature_8" + CAST(-50.70663 AS DOUBLE PRECISION) * "IL"."Feature_9" + CAST(-19.15646 AS DOUBLE PRECISION) AS "NEUR_1_6", CAST(71.71039 AS DOUBLE PRECISION) * "IL"."Feature_0" + CAST(165.6564 AS DOUBLE PRECISION) * "IL"."Feature_1" + CAST(146.1123 AS DOUBLE PRECISION) * "IL"."Feature_2" + CAST(81.32044 AS DOUBLE PRECISION) * "IL"."Feature_3" + CAST(64.92103 AS DOUBLE PRECISION) * "IL"."Feature_4" + CAST(74.47951 AS DOUBLE PRECISION) * "IL"."Feature_5" + CAST(42.2603 AS DOUBLE PRECISION) * "IL"."Feature_6" + CAST(124.367 AS DOUBLE PRECISION) * "IL"."Feature_7" + CAST(171.5946 AS DOUBLE PRECISION) * "IL"."Feature_8" + CAST(84.33191 AS DOUBLE PRECISION) * "IL"."Feature_9" + CAST(27.47002 AS DOUBLE PRECISION) AS "NEUR_1_7", CAST(82.63408 AS DOUBLE PRECISION) * "IL"."Feature_0" + CAST(57.71919 AS DOUBLE PRECISION) * "IL"."Feature_1" + CAST(77.56602 AS DOUBLE PRECISION) * "IL"."Feature_2" + CAST(49.13992 AS DOUBLE PRECISION) * "IL"."Feature_3" + CAST(51.65236 AS DOUBLE PRECISION) * "IL"."Feature_4" + CAST(35.48055 AS DOUBLE PRECISION) * "IL"."Feature_5" + CAST(56.66943 AS DOUBLE PRECISION) * "IL"."Feature_6" + CAST(-101.4982 AS DOUBLE PRECISION) * "IL"."Feature_7" + CAST(63.94167 AS DOUBLE PRECISION) * "IL"."Feature_8" + CAST(-34.69766 AS DOUBLE PRECISION) * "IL"."Feature_9" + CAST(-45.21301 AS DOUBLE PRECISION) AS "NEUR_1_8", CAST(-90.00952 AS DOUBLE PRECISION) * "IL"."Feature_0" + CAST(25.18467 AS DOUBLE PRECISION) * "IL"."Feature_1" + CAST(-123.632 AS DOUBLE PRECISION) * "IL"."Feature_2" + CAST(-82.25249 AS DOUBLE PRECISION) * "IL"."Feature_3" + CAST(-104.8533 AS DOUBLE PRECISION) * "IL"."Feature_4" + CAST(-67.92363 AS DOUBLE PRECISION) * "IL"."Feature_5" + CAST(-54.70418 AS DOUBLE PRECISION) * "IL"."Feature_6" + CAST(-67.58595 AS DOUBLE PRECISION) * "IL"."Feature_7" + CAST(-140.2221 AS DOUBLE PRECISION) * "IL"."Feature_8" + CAST(-108.1457 AS DOUBLE PRECISION) * "IL"."Feature_9" + CAST(-74.94088 AS DOUBLE PRECISION) AS "NEUR_1_9", CAST(-81.25562 AS DOUBLE PRECISION) * "IL"."Feature_0" + CAST(-45.02509 AS DOUBLE PRECISION) * "IL"."Feature_1" + CAST(-92.68289 AS DOUBLE PRECISION) * "IL"."Feature_2" + CAST(-71.59742 AS DOUBLE PRECISION) * "IL"."Feature_3" + CAST(-37.19663 AS DOUBLE PRECISION) * "IL"."Feature_4" + CAST(-124.7842 AS DOUBLE PRECISION) * "IL"."Feature_5" + CAST(-123.8107 AS DOUBLE PRECISION) * "IL"."Feature_6" + CAST(-33.82423 AS DOUBLE PRECISION) * "IL"."Feature_7" + CAST(-133.6306 AS DOUBLE PRECISION) * "IL"."Feature_8" + CAST(-74.63798 AS DOUBLE PRECISION) * "IL"."Feature_9" + CAST(-79.51864 AS DOUBLE PRECISION) AS "NEUR_1_10", CAST(216.7459 AS DOUBLE PRECISION) * "IL"."Feature_0" + CAST(45.01274 AS DOUBLE PRECISION) * "IL"."Feature_1" + CAST(72.53392 AS DOUBLE PRECISION) * "IL"."Feature_2" + CAST(18.30985 AS DOUBLE PRECISION) * "IL"."Feature_3" + CAST(-9.690258 AS DOUBLE PRECISION) * "IL"."Feature_4" + CAST(42.81664 AS DOUBLE PRECISION) * "IL"."Feature_5" + CAST(46.47933 AS DOUBLE PRECISION) * "IL"."Feature_6" + CAST(59.11244 AS DOUBLE PRECISION) * "IL"."Feature_7" + CAST(109.4529 AS DOUBLE PRECISION) * "IL"."Feature_8" + CAST(124.4907 AS DOUBLE PRECISION) * "IL"."Feature_9" + CAST(-105.3536 AS DOUBLE PRECISION) AS "NEUR_1_11", CAST(-128.1926 AS DOUBLE PRECISION) * "IL"."Feature_0" + CAST(-156.2987 AS DOUBLE PRECISION) * "IL"."Feature_1" + CAST(-272.2817 AS DOUBLE PRECISION) * "IL"."Feature_2" + CAST(-160.1737 AS DOUBLE PRECISION) * "IL"."Feature_3" + CAST(-123.998 AS DOUBLE PRECISION) * "IL"."Feature_4" + CAST(-166.8345 AS DOUBLE PRECISION) * "IL"."Feature_5" + CAST(-11.3005 AS DOUBLE PRECISION) * "IL"."Feature_6" + CAST(-99.06249 AS DOUBLE PRECISION) * "IL"."Feature_7" + CAST(-387.041 AS DOUBLE PRECISION) * "IL"."Feature_8" + CAST(-74.73434 AS DOUBLE PRECISION) * "IL"."Feature_9" + CAST(2.864051 AS DOUBLE PRECISION) AS "NEUR_1_12" 
FROM "IL"), 
"HL_1_logistic" AS 
(SELECT "HL_BA_1"."KEY" AS "KEY", CAST(1.0 AS DOUBLE PRECISION) / (CAST(1.0 AS DOUBLE PRECISION) + exp(least(CAST(100.0 AS DOUBLE PRECISION), greatest(-CAST(100.0 AS DOUBLE PRECISION), -"HL_BA_1"."NEUR_1_1")))) AS "NEUR_1_1", CAST(1.0 AS DOUBLE PRECISION) / (CAST(1.0 AS DOUBLE PRECISION) + exp(least(CAST(100.0 AS DOUBLE PRECISION), greatest(-CAST(100.0 AS DOUBLE PRECISION), -"HL_BA_1"."NEUR_1_2")))) AS "NEUR_1_2", CAST(1.0 AS DOUBLE PRECISION) / (CAST(1.0 AS DOUBLE PRECISION) + exp(least(CAST(100.0 AS DOUBLE PRECISION), greatest(-CAST(100.0 AS DOUBLE PRECISION), -"HL_BA_1"."NEUR_1_3")))) AS "NEUR_1_3", CAST(1.0 AS DOUBLE PRECISION) / (CAST(1.0 AS DOUBLE PRECISION) + exp(least(CAST(100.0 AS DOUBLE PRECISION), greatest(-CAST(100.0 AS DOUBLE PRECISION), -"HL_BA_1"."NEUR_1_4")))) AS "NEUR_1_4", CAST(1.0 AS DOUBLE PRECISION) / (CAST(1.0 AS DOUBLE PRECISION) + exp(least(CAST(100.0 AS DOUBLE PRECISION), greatest(-CAST(100.0 AS DOUBLE PRECISION), -"HL_BA_1"."NEUR_1_5")))) AS "NEUR_1_5", CAST(1.0 AS DOUBLE PRECISION) / (CAST(1.0 AS DOUBLE PRECISION) + exp(least(CAST(100.0 AS DOUBLE PRECISION), greatest(-CAST(100.0 AS DOUBLE PRECISION), -"HL_BA_1"."NEUR_1_6")))) AS "NEUR_1_6", CAST(1.0 AS DOUBLE PRECISION) / (CAST(1.0 AS DOUBLE PRECISION) + exp(least(CAST(100.0 AS DOUBLE PRECISION), greatest(-CAST(100.0 AS DOUBLE PRECISION), -"HL_BA_1"."NEUR_1_7")))) AS "NEUR_1_7", CAST(1.0 AS DOUBLE PRECISION) / (CAST(1.0 AS DOUBLE PRECISION) + exp(least(CAST(100.0 AS DOUBLE PRECISION), greatest(-CAST(100.0 AS DOUBLE PRECISION), -"HL_BA_1"."NEUR_1_8")))) AS "NEUR_1_8", CAST(1.0 AS DOUBLE PRECISION) / (CAST(1.0 AS DOUBLE PRECISION) + exp(least(CAST(100.0 AS DOUBLE PRECISION), greatest(-CAST(100.0 AS DOUBLE PRECISION), -"HL_BA_1"."NEUR_1_9")))) AS "NEUR_1_9", CAST(1.0 AS DOUBLE PRECISION) / (CAST(1.0 AS DOUBLE PRECISION) + exp(least(CAST(100.0 AS DOUBLE PRECISION), greatest(-CAST(100.0 AS DOUBLE PRECISION), -"HL_BA_1"."NEUR_1_10")))) AS "NEUR_1_10", CAST(1.0 AS DOUBLE PRECISION) / (CAST(1.0 AS DOUBLE PRECISION) + exp(least(CAST(100.0 AS DOUBLE PRECISION), greatest(-CAST(100.0 AS DOUBLE PRECISION), -"HL_BA_1"."NEUR_1_11")))) AS "NEUR_1_11", CAST(1.0 AS DOUBLE PRECISION) / (CAST(1.0 AS DOUBLE PRECISION) + exp(least(CAST(100.0 AS DOUBLE PRECISION), greatest(-CAST(100.0 AS DOUBLE PRECISION), -"HL_BA_1"."NEUR_1_12")))) AS "NEUR_1_12" 
FROM "HL_BA_1"), 
"HL_1_logistic_1" AS 
(SELECT "HL_1_logistic"."KEY" AS "KEY", "HL_1_logistic"."NEUR_1_1" AS "NEUR_1_1", "HL_1_logistic"."NEUR_1_2" AS "NEUR_1_2", "HL_1_logistic"."NEUR_1_3" AS "NEUR_1_3", "HL_1_logistic"."NEUR_1_4" AS "NEUR_1_4", "HL_1_logistic"."NEUR_1_5" AS "NEUR_1_5", "HL_1_logistic"."NEUR_1_6" AS "NEUR_1_6", "HL_1_logistic"."NEUR_1_7" AS "NEUR_1_7", "HL_1_logistic"."NEUR_1_8" AS "NEUR_1_8", "HL_1_logistic"."NEUR_1_9" AS "NEUR_1_9", "HL_1_logistic"."NEUR_1_10" AS "NEUR_1_10", "HL_1_logistic"."NEUR_1_11" AS "NEUR_1_11", "HL_1_logistic"."NEUR_1_12" AS "NEUR_1_12" 
FROM "HL_1_logistic"), 
"OL_BA" AS 
(SELECT "HL_1_logistic_1"."KEY" AS "KEY", CAST(-30.71957 AS DOUBLE PRECISION) * "HL_1_logistic_1"."NEUR_1_1" + CAST(-99.51439 AS DOUBLE PRECISION) * "HL_1_logistic_1"."NEUR_1_2" + CAST(-32.39504 AS DOUBLE PRECISION) * "HL_1_logistic_1"."NEUR_1_3" + CAST(207.6683 AS DOUBLE PRECISION) * "HL_1_logistic_1"."NEUR_1_4" + CAST(90.57098 AS DOUBLE PRECISION) * "HL_1_logistic_1"."NEUR_1_5" + CAST(-20.39558 AS DOUBLE PRECISION) * "HL_1_logistic_1"."NEUR_1_6" + CAST(105.4301 AS DOUBLE PRECISION) * "HL_1_logistic_1"."NEUR_1_7" + CAST(105.5453 AS DOUBLE PRECISION) * "HL_1_logistic_1"."NEUR_1_8" + CAST(-137.791 AS DOUBLE PRECISION) * "HL_1_logistic_1"."NEUR_1_9" + CAST(-93.43133 AS DOUBLE PRECISION) * "HL_1_logistic_1"."NEUR_1_10" + CAST(75.65987 AS DOUBLE PRECISION) * "HL_1_logistic_1"."NEUR_1_11" + CAST(71.28213 AS DOUBLE PRECISION) * "HL_1_logistic_1"."NEUR_1_12" + CAST(2.956456 AS DOUBLE PRECISION) AS "NEUR_2_1" 
FROM "HL_1_logistic_1"), 
"OL_identity" AS 
(SELECT "OL_BA"."KEY" AS "KEY", "OL_BA"."NEUR_2_1" AS "NEUR_2_1" 
FROM "OL_BA"), 
"OL_identity_1" AS 
(SELECT "OL_identity"."KEY" AS "KEY", "OL_identity"."NEUR_2_1" AS "NEUR_2_1" 
FROM "OL_identity")
 SELECT "OL_identity_1"."KEY" AS "KEY", "OL_identity_1"."NEUR_2_1" AS "Estimator" 
FROM "OL_identity_1"